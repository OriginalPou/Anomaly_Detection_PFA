
Anomaly_detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002f4a8  08008bd0  08008bd0  00018bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038078  08038078  00050b9c  2**0
                  CONTENTS
  4 .ARM          00000008  08038078  08038078  00048078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08038080  08038080  00050b9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08038080  08038080  00048080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08038084  08038084  00048084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b9c  20000000  08038088  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  20000b9c  08038c24  00050b9c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  200013a4  08038c24  000513a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050b9c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f724  00000000  00000000  00050bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000276b  00000000  00000000  000602f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009a8  00000000  00000000  00062a60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  00063408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019971  00000000  00000000  00063c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a187  00000000  00000000  0007d5f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000936d8  00000000  00000000  00087780  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ae58  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003510  00000000  00000000  0011aed4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000b9c 	.word	0x20000b9c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008bb8 	.word	0x08008bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000ba0 	.word	0x20000ba0
 80001dc:	08008bb8 	.word	0x08008bb8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	f5ad 6d9b 	sub.w	sp, sp, #1240	; 0x4d8
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int true_labels[6]={1,1,0,0,0,0};
 8000ec0:	4bc2      	ldr	r3, [pc, #776]	; (80011cc <main+0x314>)
 8000ec2:	f207 44b4 	addw	r4, r7, #1204	; 0x4b4
 8000ec6:	461d      	mov	r5, r3
 8000ec8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ecc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ed0:	e884 0003 	stmia.w	r4, {r0, r1}
	char buf[60];
	int buf_len = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
	ai_i32 nbatch;

	ai_error ai_err;

	// Pointer to our model
	ai_handle anomaly_det_model = AI_HANDLE_NULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470

	//global buffer to handle the activations data buffer -R/W data
	AI_ALIGNED(4) static ai_u8 activations[AI_ANOMALY_DETECTION_DATA_ACTIVATIONS_SIZE];

	/* initialize network */
	const ai_network_params params = {
 8000ee0:	4bbb      	ldr	r3, [pc, #748]	; (80011d0 <main+0x318>)
 8000ee2:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	f8a7 3444 	strh.w	r3, [r7, #1092]	; 0x444
 8000eec:	2301      	movs	r3, #1
 8000eee:	f8a7 3446 	strh.w	r3, [r7, #1094]	; 0x446
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	f8a7 3448 	strh.w	r3, [r7, #1096]	; 0x448
 8000ef8:	4bb6      	ldr	r3, [pc, #728]	; (80011d4 <main+0x31c>)
 8000efa:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
		AI_ANOMALY_DETECTION_DATA_WEIGHTS(ai_anomaly_detection_data_weights_get()),
 8000efe:	f003 fb2d 	bl	800455c <ai_anomaly_detection_data_weights_get>
 8000f02:	4603      	mov	r3, r0
	const ai_network_params params = {
 8000f04:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8000f0e:	4bb2      	ldr	r3, [pc, #712]	; (80011d8 <main+0x320>)
 8000f10:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8000f14:	2301      	movs	r3, #1
 8000f16:	f8a7 345c 	strh.w	r3, [r7, #1116]	; 0x45c
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
 8000f20:	2301      	movs	r3, #1
 8000f22:	f8a7 3460 	strh.w	r3, [r7, #1120]	; 0x460
 8000f26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f2a:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8000f2e:	4bab      	ldr	r3, [pc, #684]	; (80011dc <main+0x324>)
 8000f30:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c

	AI_ALIGNED(4) ai_float in_data [270];
	AI_ALIGNED(4) ai_float out_data[1];

	// Set pointers wrapper structs to our data buffers
	ai_input[0].n_batches = 1;
 8000f3a:	4ba9      	ldr	r3, [pc, #676]	; (80011e0 <main+0x328>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 8000f40:	4aa7      	ldr	r2, [pc, #668]	; (80011e0 <main+0x328>)
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	6113      	str	r3, [r2, #16]
	ai_output[0].n_batches = 1;
 8000f48:	4ba6      	ldr	r3, [pc, #664]	; (80011e4 <main+0x32c>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 8000f4e:	4aa5      	ldr	r2, [pc, #660]	; (80011e4 <main+0x32c>)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	6113      	str	r3, [r2, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f54:	f000 fc40 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f58:	f000 f99c 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5c:	f000 fa44 	bl	80013e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f60:	f000 fa18 	bl	8001394 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8000f64:	f000 fa02 	bl	800136c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8000f68:	f003 fb02 	bl	8004570 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */

  buf_len = sprintf(buf, "\r\n\r\nSTM32 Anomaly Detection model test\r\n");
 8000f6c:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000f70:	4a9d      	ldr	r2, [pc, #628]	; (80011e8 <main+0x330>)
 8000f72:	461c      	mov	r4, r3
 8000f74:	4615      	mov	r5, r2
 8000f76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f82:	c403      	stmia	r4!, {r0, r1}
 8000f84:	7022      	strb	r2, [r4, #0]
 8000f86:	2328      	movs	r3, #40	; 0x28
 8000f88:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000f8c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8000f96:	2364      	movs	r3, #100	; 0x64
 8000f98:	4894      	ldr	r0, [pc, #592]	; (80011ec <main+0x334>)
 8000f9a:	f001 fc22 	bl	80027e2 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_anomaly_detection_create(&anomaly_det_model, AI_ANOMALY_DETECTION_DATA_CONFIG);
 8000f9e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f003 fa59 	bl	800445c <ai_anomaly_detection_create>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
  if (ai_err.type != AI_ERROR_NONE)
 8000fb0:	f897 3474 	ldrb.w	r3, [r7, #1140]	; 0x474
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d01a      	beq.n	8000fee <main+0x136>
  {
     buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 8000fb8:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8000fbc:	4a8c      	ldr	r2, [pc, #560]	; (80011f0 <main+0x338>)
 8000fbe:	461c      	mov	r4, r3
 8000fc0:	4615      	mov	r5, r2
 8000fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fce:	6020      	str	r0, [r4, #0]
 8000fd0:	3404      	adds	r4, #4
 8000fd2:	8021      	strh	r1, [r4, #0]
 8000fd4:	2325      	movs	r3, #37	; 0x25
 8000fd6:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
     HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8000fda:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8000fe4:	2364      	movs	r3, #100	; 0x64
 8000fe6:	4881      	ldr	r0, [pc, #516]	; (80011ec <main+0x334>)
 8000fe8:	f001 fbfb 	bl	80027e2 <HAL_UART_Transmit>
     while(1);
 8000fec:	e7fe      	b.n	8000fec <main+0x134>
   }

  // Initialize neural network
  if (!ai_anomaly_detection_init(anomaly_det_model, &params))
 8000fee:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8000ff2:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f003 fa51 	bl	80044a0 <ai_anomaly_detection_init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f083 0301 	eor.w	r3, r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d017      	beq.n	800103a <main+0x182>
  {
    buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 800100a:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800100e:	4a79      	ldr	r2, [pc, #484]	; (80011f4 <main+0x33c>)
 8001010:	461c      	mov	r4, r3
 8001012:	4615      	mov	r5, r2
 8001014:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101c:	682b      	ldr	r3, [r5, #0]
 800101e:	7023      	strb	r3, [r4, #0]
 8001020:	2320      	movs	r3, #32
 8001022:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001026:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800102a:	b29a      	uxth	r2, r3
 800102c:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8001030:	2364      	movs	r3, #100	; 0x64
 8001032:	486e      	ldr	r0, [pc, #440]	; (80011ec <main+0x334>)
 8001034:	f001 fbd5 	bl	80027e2 <HAL_UART_Transmit>
    while(1);
 8001038:	e7fe      	b.n	8001038 <main+0x180>
  }
  ;
  for (uint8_t k=0; k<6 ; k++){
 800103a:	2300      	movs	r3, #0
 800103c:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
 8001040:	e118      	b.n	8001274 <main+0x3bc>
	  for (uint16_t j = 0; j<270 ; j++){
 8001042:	2300      	movs	r3, #0
 8001044:	f8a7 34d4 	strh.w	r3, [r7, #1236]	; 0x4d4
 8001048:	e018      	b.n	800107c <main+0x1c4>
			 in_data[j] =  (ai_float)activation[270*k+j];
 800104a:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 800104e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001052:	fb02 f203 	mul.w	r2, r2, r3
 8001056:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 800105a:	441a      	add	r2, r3
 800105c:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 8001060:	4965      	ldr	r1, [pc, #404]	; (80011f8 <main+0x340>)
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	440a      	add	r2, r1
 8001066:	6812      	ldr	r2, [r2, #0]
 8001068:	f107 0108 	add.w	r1, r7, #8
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	601a      	str	r2, [r3, #0]
	  for (uint16_t j = 0; j<270 ; j++){
 8001072:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 8001076:	3301      	adds	r3, #1
 8001078:	f8a7 34d4 	strh.w	r3, [r7, #1236]	; 0x4d4
 800107c:	f8b7 34d4 	ldrh.w	r3, [r7, #1236]	; 0x4d4
 8001080:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001084:	d3e1      	bcc.n	800104a <main+0x192>
	   }
	  nbatch = ai_anomaly_detection_run(anomaly_det_model, &ai_input[0], &ai_output[0]);
 8001086:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800108a:	4a56      	ldr	r2, [pc, #344]	; (80011e4 <main+0x32c>)
 800108c:	4954      	ldr	r1, [pc, #336]	; (80011e0 <main+0x328>)
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fa45 	bl	800451e <ai_anomaly_detection_run>
 8001094:	f8c7 04cc 	str.w	r0, [r7, #1228]	; 0x4cc
		  if (nbatch != 1) {
 8001098:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 800109c:	2b01      	cmp	r3, #1
 800109e:	d016      	beq.n	80010ce <main+0x216>
				buf_len = sprintf(buf, "Error: could not run inference\r\n");
 80010a0:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80010a4:	4a55      	ldr	r2, [pc, #340]	; (80011fc <main+0x344>)
 80010a6:	461c      	mov	r4, r3
 80010a8:	4615      	mov	r5, r2
 80010aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	7023      	strb	r3, [r4, #0]
 80010b6:	2320      	movs	r3, #32
 80010b8:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
				HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80010bc:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 80010c6:	2364      	movs	r3, #100	; 0x64
 80010c8:	4848      	ldr	r0, [pc, #288]	; (80011ec <main+0x334>)
 80010ca:	f001 fb8a 	bl	80027e2 <HAL_UART_Transmit>
		  }

		  if (true_labels[k]==0){
 80010ce:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	f507 629b 	add.w	r2, r7, #1240	; 0x4d8
 80010d8:	4413      	add	r3, r2
 80010da:	f853 3c24 	ldr.w	r3, [r3, #-36]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d119      	bne.n	8001116 <main+0x25e>

			  buf_len = sprintf(buf,"This activation is a normal activation\r\n");
 80010e2:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80010e6:	4a46      	ldr	r2, [pc, #280]	; (8001200 <main+0x348>)
 80010e8:	461c      	mov	r4, r3
 80010ea:	4615      	mov	r5, r2
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f8:	c403      	stmia	r4!, {r0, r1}
 80010fa:	7022      	strb	r2, [r4, #0]
 80010fc:	2328      	movs	r3, #40	; 0x28
 80010fe:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001102:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8001106:	b29a      	uxth	r2, r3
 8001108:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 800110c:	2364      	movs	r3, #100	; 0x64
 800110e:	4837      	ldr	r0, [pc, #220]	; (80011ec <main+0x334>)
 8001110:	f001 fb67 	bl	80027e2 <HAL_UART_Transmit>
 8001114:	e018      	b.n	8001148 <main+0x290>
		  }else{
				  buf_len = sprintf(buf,"This activation is an anomolous activation\r\n");
 8001116:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800111a:	4a3a      	ldr	r2, [pc, #232]	; (8001204 <main+0x34c>)
 800111c:	461c      	mov	r4, r3
 800111e:	4615      	mov	r5, r2
 8001120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001128:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800112c:	c407      	stmia	r4!, {r0, r1, r2}
 800112e:	7023      	strb	r3, [r4, #0]
 8001130:	232c      	movs	r3, #44	; 0x2c
 8001132:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
				  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001136:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800113a:	b29a      	uxth	r2, r3
 800113c:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8001140:	2364      	movs	r3, #100	; 0x64
 8001142:	482a      	ldr	r0, [pc, #168]	; (80011ec <main+0x334>)
 8001144:	f001 fb4d 	bl	80027e2 <HAL_UART_Transmit>
			  }


		  buf_len = sprintf(buf,"The model output is %f \r\n",(float)out_data[0]);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fa03 	bl	8000558 <__aeabi_f2d>
 8001152:	4603      	mov	r3, r0
 8001154:	460c      	mov	r4, r1
 8001156:	f507 608f 	add.w	r0, r7, #1144	; 0x478
 800115a:	461a      	mov	r2, r3
 800115c:	4623      	mov	r3, r4
 800115e:	492a      	ldr	r1, [pc, #168]	; (8001208 <main+0x350>)
 8001160:	f005 fef2 	bl	8006f48 <siprintf>
 8001164:	f8c7 04d0 	str.w	r0, [r7, #1232]	; 0x4d0
		  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001168:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800116c:	b29a      	uxth	r2, r3
 800116e:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8001172:	2364      	movs	r3, #100	; 0x64
 8001174:	481d      	ldr	r0, [pc, #116]	; (80011ec <main+0x334>)
 8001176:	f001 fb34 	bl	80027e2 <HAL_UART_Transmit>
		  if(1-(float)out_data[0]>0.5){
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	edd3 7a00 	vldr	s15, [r3]
 8001180:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001188:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800118c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	dd3c      	ble.n	8001210 <main+0x358>
			  buf_len = sprintf(buf,"The model predicted this activation to be normal");
 8001196:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 800119a:	4a1c      	ldr	r2, [pc, #112]	; (800120c <main+0x354>)
 800119c:	461c      	mov	r4, r3
 800119e:	4615      	mov	r5, r2
 80011a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ac:	682b      	ldr	r3, [r5, #0]
 80011ae:	7023      	strb	r3, [r4, #0]
 80011b0:	2330      	movs	r3, #48	; 0x30
 80011b2:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80011b6:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <main+0x334>)
 80011c4:	f001 fb0d 	bl	80027e2 <HAL_UART_Transmit>
 80011c8:	e03b      	b.n	8001242 <main+0x38a>
 80011ca:	bf00      	nop
 80011cc:	08008d54 	.word	0x08008d54
 80011d0:	40040440 	.word	0x40040440
 80011d4:	0002c804 	.word	0x0002c804
 80011d8:	00040440 	.word	0x00040440
 80011dc:	20000bb8 	.word	0x20000bb8
 80011e0:	20000000 	.word	0x20000000
 80011e4:	20000018 	.word	0x20000018
 80011e8:	08008bd0 	.word	0x08008bd0
 80011ec:	20001314 	.word	0x20001314
 80011f0:	08008bfc 	.word	0x08008bfc
 80011f4:	08008c24 	.word	0x08008c24
 80011f8:	08009b90 	.word	0x08009b90
 80011fc:	08008c48 	.word	0x08008c48
 8001200:	08008c6c 	.word	0x08008c6c
 8001204:	08008c98 	.word	0x08008c98
 8001208:	08008cc8 	.word	0x08008cc8
 800120c:	08008ce4 	.word	0x08008ce4
		  }else{
			  buf_len = sprintf(buf,"The model predicted this activation to be anomalous");
 8001210:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001214:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <main+0x3d0>)
 8001216:	461c      	mov	r4, r3
 8001218:	4615      	mov	r5, r2
 800121a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	2333      	movs	r3, #51	; 0x33
 800122c:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001230:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8001234:	b29a      	uxth	r2, r3
 8001236:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 800123a:	2364      	movs	r3, #100	; 0x64
 800123c:	4813      	ldr	r0, [pc, #76]	; (800128c <main+0x3d4>)
 800123e:	f001 fad0 	bl	80027e2 <HAL_UART_Transmit>
		  }
			  buf_len = sprintf(buf, "\r\n\r\n");
 8001242:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 8001246:	4a12      	ldr	r2, [pc, #72]	; (8001290 <main+0x3d8>)
 8001248:	e892 0003 	ldmia.w	r2, {r0, r1}
 800124c:	6018      	str	r0, [r3, #0]
 800124e:	3304      	adds	r3, #4
 8001250:	7019      	strb	r1, [r3, #0]
 8001252:	2304      	movs	r3, #4
 8001254:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
			  HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001258:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8001262:	2364      	movs	r3, #100	; 0x64
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <main+0x3d4>)
 8001266:	f001 fabc 	bl	80027e2 <HAL_UART_Transmit>
  for (uint8_t k=0; k<6 ; k++){
 800126a:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 800126e:	3301      	adds	r3, #1
 8001270:	f887 34d7 	strb.w	r3, [r7, #1239]	; 0x4d7
 8001274:	f897 34d7 	ldrb.w	r3, [r7, #1239]	; 0x4d7
 8001278:	2b05      	cmp	r3, #5
 800127a:	f67f aee2 	bls.w	8001042 <main+0x18a>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Wait before doing it again
	  HAL_Delay(500);
 800127e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001282:	f000 fb1b 	bl	80018bc <HAL_Delay>
 8001286:	e7fa      	b.n	800127e <main+0x3c6>
 8001288:	08008d18 	.word	0x08008d18
 800128c:	20001314 	.word	0x20001314
 8001290:	08008d4c 	.word	0x08008d4c

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	; 0x50
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 0320 	add.w	r3, r7, #32
 800129e:	2230      	movs	r2, #48	; 0x30
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f005 f893 	bl	80063ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <SystemClock_Config+0xd0>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	4a28      	ldr	r2, [pc, #160]	; (8001364 <SystemClock_Config+0xd0>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	; 0x40
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <SystemClock_Config+0xd0>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012d4:	2300      	movs	r3, #0
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <SystemClock_Config+0xd4>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012e0:	4a21      	ldr	r2, [pc, #132]	; (8001368 <SystemClock_Config+0xd4>)
 80012e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <SystemClock_Config+0xd4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fc:	2310      	movs	r3, #16
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001300:	2302      	movs	r3, #2
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001304:	2300      	movs	r3, #0
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001308:	2310      	movs	r3, #16
 800130a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800130c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001312:	2304      	movs	r3, #4
 8001314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001316:	2307      	movs	r3, #7
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fdb0 	bl	8001e84 <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800132a:	f000 f8cd 	bl	80014c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	2302      	movs	r3, #2
 8001334:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001344:	f107 030c 	add.w	r3, r7, #12
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f001 f80a 	bl	8002364 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001356:	f000 f8b7 	bl	80014c8 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3750      	adds	r7, #80	; 0x50
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000

0800136c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_CRC_Init+0x20>)
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <MX_CRC_Init+0x24>)
 8001374:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_CRC_Init+0x20>)
 8001378:	f000 fbcb 	bl	8001b12 <HAL_CRC_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001382:	f000 f8a1 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000130c 	.word	0x2000130c
 8001390:	40023000 	.word	0x40023000

08001394 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001398:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 800139a:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_USART2_UART_Init+0x50>)
 800139c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013ba:	220c      	movs	r2, #12
 80013bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x4c>)
 80013cc:	f001 f9bc 	bl	8002748 <HAL_UART_Init>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013d6:	f000 f877 	bl	80014c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20001314 	.word	0x20001314
 80013e4:	40004400 	.word	0x40004400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a2c      	ldr	r2, [pc, #176]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a25      	ldr	r2, [pc, #148]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_GPIO_Init+0xd0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b1f      	ldr	r3, [pc, #124]	; (80014b8 <MX_GPIO_Init+0xd0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a1e      	ldr	r2, [pc, #120]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <MX_GPIO_Init+0xd0>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_GPIO_Init+0xd0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <MX_GPIO_Init+0xd4>)
 8001474:	f000 fcec 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001478:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_GPIO_Init+0xd8>)
 8001480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0314 	add.w	r3, r7, #20
 800148a:	4619      	mov	r1, r3
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_GPIO_Init+0xdc>)
 800148e:	f000 fb5d 	bl	8001b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001492:	2320      	movs	r3, #32
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_GPIO_Init+0xd4>)
 80014aa:	f000 fb4f 	bl	8001b4c <HAL_GPIO_Init>

}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020000 	.word	0x40020000
 80014c0:	10210000 	.word	0x10210000
 80014c4:	40020800 	.word	0x40020800

080014c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014cc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ce:	e7fe      	b.n	80014ce <Error_Handler+0x6>

080014d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_MspInit+0x4c>)
 80014e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e4:	6453      	str	r3, [r2, #68]	; 0x44
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	4b09      	ldr	r3, [pc, #36]	; (800151c <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_MspInit+0x4c>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800150e:	2007      	movs	r0, #7
 8001510:	f000 facc 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800

08001520 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <HAL_CRC_MspInit+0x3c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10d      	bne.n	800154e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b0a      	ldr	r3, [pc, #40]	; (8001560 <HAL_CRC_MspInit+0x40>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a09      	ldr	r2, [pc, #36]	; (8001560 <HAL_CRC_MspInit+0x40>)
 800153c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b07      	ldr	r3, [pc, #28]	; (8001560 <HAL_CRC_MspInit+0x40>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	40023000 	.word	0x40023000
 8001560:	40023800 	.word	0x40023800

08001564 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a19      	ldr	r2, [pc, #100]	; (80015e8 <HAL_UART_MspInit+0x84>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d12b      	bne.n	80015de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_UART_MspInit+0x88>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_UART_MspInit+0x88>)
 8001590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001594:	6413      	str	r3, [r2, #64]	; 0x40
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_UART_MspInit+0x88>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_UART_MspInit+0x88>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <HAL_UART_MspInit+0x88>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <HAL_UART_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015be:	230c      	movs	r3, #12
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ce:	2307      	movs	r3, #7
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_UART_MspInit+0x8c>)
 80015da:	f000 fab7 	bl	8001b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40004400 	.word	0x40004400
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001640:	f000 f91c 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001644:	bf00      	nop
 8001646:	bd80      	pop	{r7, pc}

08001648 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	60f8      	str	r0, [r7, #12]
 8001650:	60b9      	str	r1, [r7, #8]
 8001652:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e00a      	b.n	8001670 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800165a:	f3af 8000 	nop.w
 800165e:	4601      	mov	r1, r0
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	60ba      	str	r2, [r7, #8]
 8001666:	b2ca      	uxtb	r2, r1
 8001668:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	429a      	cmp	r2, r3
 8001676:	dbf0      	blt.n	800165a <_read+0x12>
	}

return len;
 8001678:	687b      	ldr	r3, [r7, #4]
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
	return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016aa:	605a      	str	r2, [r3, #4]
	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <_isatty>:

int _isatty(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return 1;
 80016c2:	2301      	movs	r3, #1
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
	return 0;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f4:	4a14      	ldr	r2, [pc, #80]	; (8001748 <_sbrk+0x5c>)
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <_sbrk+0x60>)
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <_sbrk+0x64>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001708:	4b11      	ldr	r3, [pc, #68]	; (8001750 <_sbrk+0x64>)
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <_sbrk+0x68>)
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170e:	4b10      	ldr	r3, [pc, #64]	; (8001750 <_sbrk+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	429a      	cmp	r2, r3
 800171a:	d207      	bcs.n	800172c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800171c:	f004 fca0 	bl	8006060 <__errno>
 8001720:	4602      	mov	r2, r0
 8001722:	230c      	movs	r3, #12
 8001724:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172a:	e009      	b.n	8001740 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001732:	4b07      	ldr	r3, [pc, #28]	; (8001750 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <_sbrk+0x64>)
 800173c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173e:	68fb      	ldr	r3, [r7, #12]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20018000 	.word	0x20018000
 800174c:	00000800 	.word	0x00000800
 8001750:	20000eb8 	.word	0x20000eb8
 8001754:	200013a8 	.word	0x200013a8

08001758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800175c:	4b08      	ldr	r3, [pc, #32]	; (8001780 <SystemInit+0x28>)
 800175e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001762:	4a07      	ldr	r2, [pc, #28]	; (8001780 <SystemInit+0x28>)
 8001764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SystemInit+0x28>)
 800176e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001772:	609a      	str	r2, [r3, #8]
#endif
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000ed00 	.word	0xe000ed00

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001788:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800178a:	e003      	b.n	8001794 <LoopCopyDataInit>

0800178c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800178e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001790:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001792:	3104      	adds	r1, #4

08001794 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001794:	480b      	ldr	r0, [pc, #44]	; (80017c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001796:	4b0c      	ldr	r3, [pc, #48]	; (80017c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001798:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800179a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800179c:	d3f6      	bcc.n	800178c <CopyDataInit>
  ldr  r2, =_sbss
 800179e:	4a0b      	ldr	r2, [pc, #44]	; (80017cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80017a0:	e002      	b.n	80017a8 <LoopFillZerobss>

080017a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80017a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80017a4:	f842 3b04 	str.w	r3, [r2], #4

080017a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80017aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80017ac:	d3f9      	bcc.n	80017a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017ae:	f7ff ffd3 	bl	8001758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b2:	f004 fdd5 	bl	8006360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff fb7f 	bl	8000eb8 <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80017bc:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80017c0:	08038088 	.word	0x08038088
  ldr  r0, =_sdata
 80017c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80017c8:	20000b9c 	.word	0x20000b9c
  ldr  r2, =_sbss
 80017cc:	20000b9c 	.word	0x20000b9c
  ldr  r3, = _ebss
 80017d0:	200013a4 	.word	0x200013a4

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f953 	bl	8001aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fe60 	bl	80014d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f95d 	bl	8001afa <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f000 f933 	bl	8001ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000030 	.word	0x20000030
 8001874:	20000038 	.word	0x20000038
 8001878:	20000034 	.word	0x20000034

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000038 	.word	0x20000038
 80018a0:	20001354 	.word	0x20001354

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	20001354 	.word	0x20001354

080018bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff ffee 	bl	80018a4 <HAL_GetTick>
 80018c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80018d4:	d005      	beq.n	80018e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_Delay+0x40>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018e2:	bf00      	nop
 80018e4:	f7ff ffde 	bl	80018a4 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	68fa      	ldr	r2, [r7, #12]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d8f7      	bhi.n	80018e4 <HAL_Delay+0x28>
  {
  }
}
 80018f4:	bf00      	nop
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000038 	.word	0x20000038

08001900 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return __STM32F4xx_HAL_VERSION;
 8001904:	4b02      	ldr	r3, [pc, #8]	; (8001910 <HAL_GetHalVersion+0x10>)
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	01070a00 	.word	0x01070a00

08001914 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetREVID+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0c1b      	lsrs	r3, r3, #16
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	e0042000 	.word	0xe0042000

0800192c <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001930:	4b04      	ldr	r3, [pc, #16]	; (8001944 <HAL_GetDEVID+0x18>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e0042000 	.word	0xe0042000

08001948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001964:	4013      	ands	r3, r2
 8001966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197a:	4a04      	ldr	r2, [pc, #16]	; (800198c <__NVIC_SetPriorityGrouping+0x44>)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	60d3      	str	r3, [r2, #12]
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	f003 0307 	and.w	r3, r3, #7
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4603      	mov	r3, r0
 80019b4:	6039      	str	r1, [r7, #0]
 80019b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db0a      	blt.n	80019d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	490c      	ldr	r1, [pc, #48]	; (80019f8 <__NVIC_SetPriority+0x4c>)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	0112      	lsls	r2, r2, #4
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	440b      	add	r3, r1
 80019d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019d4:	e00a      	b.n	80019ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4908      	ldr	r1, [pc, #32]	; (80019fc <__NVIC_SetPriority+0x50>)
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	f003 030f 	and.w	r3, r3, #15
 80019e2:	3b04      	subs	r3, #4
 80019e4:	0112      	lsls	r2, r2, #4
 80019e6:	b2d2      	uxtb	r2, r2
 80019e8:	440b      	add	r3, r1
 80019ea:	761a      	strb	r2, [r3, #24]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f1c3 0307 	rsb	r3, r3, #7
 8001a1a:	2b04      	cmp	r3, #4
 8001a1c:	bf28      	it	cs
 8001a1e:	2304      	movcs	r3, #4
 8001a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	3304      	adds	r3, #4
 8001a26:	2b06      	cmp	r3, #6
 8001a28:	d902      	bls.n	8001a30 <NVIC_EncodePriority+0x30>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3b03      	subs	r3, #3
 8001a2e:	e000      	b.n	8001a32 <NVIC_EncodePriority+0x32>
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	43d9      	mvns	r1, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a58:	4313      	orrs	r3, r2
         );
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3724      	adds	r7, #36	; 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3b01      	subs	r3, #1
 8001a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a78:	d301      	bcc.n	8001a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e00f      	b.n	8001a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a7e:	4a0a      	ldr	r2, [pc, #40]	; (8001aa8 <SysTick_Config+0x40>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3b01      	subs	r3, #1
 8001a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a86:	210f      	movs	r1, #15
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a8c:	f7ff ff8e 	bl	80019ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <SysTick_Config+0x40>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a96:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <SysTick_Config+0x40>)
 8001a98:	2207      	movs	r2, #7
 8001a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	e000e010 	.word	0xe000e010

08001aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ff47 	bl	8001948 <__NVIC_SetPriorityGrouping>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	4603      	mov	r3, r0
 8001aca:	60b9      	str	r1, [r7, #8]
 8001acc:	607a      	str	r2, [r7, #4]
 8001ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad4:	f7ff ff5c 	bl	8001990 <__NVIC_GetPriorityGrouping>
 8001ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	6978      	ldr	r0, [r7, #20]
 8001ae0:	f7ff ff8e 	bl	8001a00 <NVIC_EncodePriority>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aea:	4611      	mov	r1, r2
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff5d 	bl	80019ac <__NVIC_SetPriority>
}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff ffb0 	bl	8001a68 <SysTick_Config>
 8001b08:	4603      	mov	r3, r0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e00e      	b.n	8001b42 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	795b      	ldrb	r3, [r3, #5]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff fcf3 	bl	8001520 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b089      	sub	sp, #36	; 0x24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e159      	b.n	8001e1c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8148 	bne.w	8001e16 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_GPIO_Init+0x5a>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9a:	2b11      	cmp	r3, #17
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b12      	cmp	r3, #18
 8001ba4:	d130      	bne.n	8001c08 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0201 	and.w	r2, r3, #1
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	2203      	movs	r2, #3
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0xfc>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b12      	cmp	r3, #18
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80a2 	beq.w	8001e16 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b56      	ldr	r3, [pc, #344]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cda:	4a55      	ldr	r2, [pc, #340]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce2:	4b53      	ldr	r3, [pc, #332]	; (8001e30 <HAL_GPIO_Init+0x2e4>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cee:	4a51      	ldr	r2, [pc, #324]	; (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	3302      	adds	r3, #2
 8001cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a48      	ldr	r2, [pc, #288]	; (8001e38 <HAL_GPIO_Init+0x2ec>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d019      	beq.n	8001d4e <HAL_GPIO_Init+0x202>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a47      	ldr	r2, [pc, #284]	; (8001e3c <HAL_GPIO_Init+0x2f0>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d013      	beq.n	8001d4a <HAL_GPIO_Init+0x1fe>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a46      	ldr	r2, [pc, #280]	; (8001e40 <HAL_GPIO_Init+0x2f4>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d00d      	beq.n	8001d46 <HAL_GPIO_Init+0x1fa>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a45      	ldr	r2, [pc, #276]	; (8001e44 <HAL_GPIO_Init+0x2f8>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d007      	beq.n	8001d42 <HAL_GPIO_Init+0x1f6>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a44      	ldr	r2, [pc, #272]	; (8001e48 <HAL_GPIO_Init+0x2fc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d101      	bne.n	8001d3e <HAL_GPIO_Init+0x1f2>
 8001d3a:	2304      	movs	r3, #4
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d3e:	2307      	movs	r3, #7
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x204>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d60:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_GPIO_Init+0x2e8>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d92:	4a2e      	ldr	r2, [pc, #184]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dbc:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a0e      	ldr	r2, [pc, #56]	; (8001e4c <HAL_GPIO_Init+0x300>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	f67f aea2 	bls.w	8001b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40013c00 	.word	0x40013c00

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e60:	787b      	ldrb	r3, [r7, #1]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e6c:	e003      	b.n	8001e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e6e:	887b      	ldrh	r3, [r7, #2]
 8001e70:	041a      	lsls	r2, r3, #16
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	619a      	str	r2, [r3, #24]
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e25b      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d075      	beq.n	8001f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ea2:	4ba3      	ldr	r3, [pc, #652]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 030c 	and.w	r3, r3, #12
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d00c      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eae:	4ba0      	ldr	r3, [pc, #640]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb6:	2b08      	cmp	r3, #8
 8001eb8:	d112      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eba:	4b9d      	ldr	r3, [pc, #628]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec6:	d10b      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	4b99      	ldr	r3, [pc, #612]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d05b      	beq.n	8001f8c <HAL_RCC_OscConfig+0x108>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d157      	bne.n	8001f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e236      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee8:	d106      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x74>
 8001eea:	4b91      	ldr	r3, [pc, #580]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a90      	ldr	r2, [pc, #576]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e01d      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b8b      	ldr	r3, [pc, #556]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a8a      	ldr	r2, [pc, #552]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b88      	ldr	r3, [pc, #544]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a87      	ldr	r2, [pc, #540]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e00b      	b.n	8001f34 <HAL_RCC_OscConfig+0xb0>
 8001f1c:	4b84      	ldr	r3, [pc, #528]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a83      	ldr	r2, [pc, #524]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	6013      	str	r3, [r2, #0]
 8001f28:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a80      	ldr	r2, [pc, #512]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d013      	beq.n	8001f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3c:	f7ff fcb2 	bl	80018a4 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f44:	f7ff fcae 	bl	80018a4 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b64      	cmp	r3, #100	; 0x64
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1fb      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0xc0>
 8001f62:	e014      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f64:	f7ff fc9e 	bl	80018a4 <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f6c:	f7ff fc9a 	bl	80018a4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e1e7      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7e:	4b6c      	ldr	r3, [pc, #432]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0xe8>
 8001f8a:	e000      	b.n	8001f8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d063      	beq.n	8002062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f9a:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa6:	4b62      	ldr	r3, [pc, #392]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d11c      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	4b5f      	ldr	r3, [pc, #380]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d116      	bne.n	8001fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fbe:	4b5c      	ldr	r3, [pc, #368]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e1bb      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b56      	ldr	r3, [pc, #344]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4952      	ldr	r1, [pc, #328]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fea:	e03a      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d020      	beq.n	8002036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <HAL_RCC_OscConfig+0x2b0>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffa:	f7ff fc53 	bl	80018a4 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002002:	f7ff fc4f 	bl	80018a4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e19c      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002014:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4940      	ldr	r1, [pc, #256]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002030:	4313      	orrs	r3, r2
 8002032:	600b      	str	r3, [r1, #0]
 8002034:	e015      	b.n	8002062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002036:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_OscConfig+0x2b0>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff fc32 	bl	80018a4 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002044:	f7ff fc2e 	bl	80018a4 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e17b      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002056:	4b36      	ldr	r3, [pc, #216]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1f0      	bne.n	8002044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d030      	beq.n	80020d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d016      	beq.n	80020a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <HAL_RCC_OscConfig+0x2b4>)
 8002078:	2201      	movs	r2, #1
 800207a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff fc12 	bl	80018a4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002084:	f7ff fc0e 	bl	80018a4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e15b      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x200>
 80020a2:	e015      	b.n	80020d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x2b4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fbfb 	bl	80018a4 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020b2:	f7ff fbf7 	bl	80018a4 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e144      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a0 	beq.w	800221e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10f      	bne.n	800210e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_OscConfig+0x2b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d121      	bne.n	800215e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_OscConfig+0x2b8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_RCC_OscConfig+0x2b8>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff fbbd 	bl	80018a4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e011      	b.n	8002152 <HAL_RCC_OscConfig+0x2ce>
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	42470000 	.word	0x42470000
 8002138:	42470e80 	.word	0x42470e80
 800213c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002140:	f7ff fbb0 	bl	80018a4 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e0fd      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002152:	4b81      	ldr	r3, [pc, #516]	; (8002358 <HAL_RCC_OscConfig+0x4d4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x2f0>
 8002166:	4b7d      	ldr	r3, [pc, #500]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 8002168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216a:	4a7c      	ldr	r2, [pc, #496]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800216c:	f043 0301 	orr.w	r3, r3, #1
 8002170:	6713      	str	r3, [r2, #112]	; 0x70
 8002172:	e01c      	b.n	80021ae <HAL_RCC_OscConfig+0x32a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x312>
 800217c:	4b77      	ldr	r3, [pc, #476]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800217e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002180:	4a76      	ldr	r2, [pc, #472]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6713      	str	r3, [r2, #112]	; 0x70
 8002188:	4b74      	ldr	r3, [pc, #464]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	4a73      	ldr	r2, [pc, #460]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6713      	str	r3, [r2, #112]	; 0x70
 8002194:	e00b      	b.n	80021ae <HAL_RCC_OscConfig+0x32a>
 8002196:	4b71      	ldr	r3, [pc, #452]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	4a70      	ldr	r2, [pc, #448]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	; 0x70
 80021a2:	4b6e      	ldr	r3, [pc, #440]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 80021a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a6:	4a6d      	ldr	r2, [pc, #436]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d015      	beq.n	80021e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b6:	f7ff fb75 	bl	80018a4 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff fb71 	bl	80018a4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0bc      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 80021d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ee      	beq.n	80021be <HAL_RCC_OscConfig+0x33a>
 80021e0:	e014      	b.n	800220c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fb5f 	bl	80018a4 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff fb5b 	bl	80018a4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0a6      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	4b56      	ldr	r3, [pc, #344]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 8002202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ee      	bne.n	80021ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	4b52      	ldr	r3, [pc, #328]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8092 	beq.w	800234c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002228:	4b4c      	ldr	r3, [pc, #304]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d05c      	beq.n	80022ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d141      	bne.n	80022c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b48      	ldr	r3, [pc, #288]	; (8002360 <HAL_RCC_OscConfig+0x4dc>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fb2f 	bl	80018a4 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff fb2b 	bl	80018a4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e078      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225c:	4b3f      	ldr	r3, [pc, #252]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69da      	ldr	r2, [r3, #28]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002276:	019b      	lsls	r3, r3, #6
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	3b01      	subs	r3, #1
 8002282:	041b      	lsls	r3, r3, #16
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	061b      	lsls	r3, r3, #24
 800228c:	4933      	ldr	r1, [pc, #204]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002292:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x4dc>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff fb04 	bl	80018a4 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a0:	f7ff fb00 	bl	80018a4 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e04d      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x41c>
 80022be:	e045      	b.n	800234c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_RCC_OscConfig+0x4dc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff faed 	bl	80018a4 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7ff fae9 	bl	80018a4 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e036      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x44a>
 80022ec:	e02e      	b.n	800234c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e029      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022fa:	4b18      	ldr	r3, [pc, #96]	; (800235c <HAL_RCC_OscConfig+0x4d8>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	429a      	cmp	r2, r3
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002318:	429a      	cmp	r2, r3
 800231a:	d115      	bne.n	8002348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002328:	4293      	cmp	r3, r2
 800232a:	d10d      	bne.n	8002348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002336:	429a      	cmp	r2, r3
 8002338:	d106      	bne.n	8002348 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40007000 	.word	0x40007000
 800235c:	40023800 	.word	0x40023800
 8002360:	42470060 	.word	0x42470060

08002364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0cc      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 030f 	and.w	r3, r3, #15
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d90c      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b65      	ldr	r3, [pc, #404]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	4a58      	ldr	r2, [pc, #352]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a52      	ldr	r2, [pc, #328]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d044      	beq.n	8002484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d119      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d003      	beq.n	8002422 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	2b03      	cmp	r3, #3
 8002420:	d107      	bne.n	8002432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d109      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e06f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e067      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f023 0203 	bic.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	4934      	ldr	r1, [pc, #208]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7ff fa26 	bl	80018a4 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	e00a      	b.n	8002472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800245c:	f7ff fa22 	bl	80018a4 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	; 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002472:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 020c 	and.w	r2, r3, #12
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	429a      	cmp	r2, r3
 8002482:	d1eb      	bne.n	800245c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 030f 	and.w	r3, r3, #15
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d20c      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002492:	4b22      	ldr	r3, [pc, #136]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	b2d2      	uxtb	r2, r2
 8002498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d6:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4601      	mov	r1, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	5cd3      	ldrb	r3, [r2, r3]
 80024fe:	fa21 f303 	lsr.w	r3, r1, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f986 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40023c00 	.word	0x40023c00
 8002520:	40023800 	.word	0x40023800
 8002524:	0800b4e0 	.word	0x0800b4e0
 8002528:	20000030 	.word	0x20000030
 800252c:	20000034 	.word	0x20000034

08002530 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002546:	4b63      	ldr	r3, [pc, #396]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 030c 	and.w	r3, r3, #12
 800254e:	2b04      	cmp	r3, #4
 8002550:	d007      	beq.n	8002562 <HAL_RCC_GetSysClockFreq+0x32>
 8002552:	2b08      	cmp	r3, #8
 8002554:	d008      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x38>
 8002556:	2b00      	cmp	r3, #0
 8002558:	f040 80b4 	bne.w	80026c4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b5e      	ldr	r3, [pc, #376]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800255e:	60bb      	str	r3, [r7, #8]
       break;
 8002560:	e0b3      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002562:	4b5e      	ldr	r3, [pc, #376]	; (80026dc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002564:	60bb      	str	r3, [r7, #8]
      break;
 8002566:	e0b0      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002568:	4b5a      	ldr	r3, [pc, #360]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002570:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002572:	4b58      	ldr	r3, [pc, #352]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d04a      	beq.n	8002614 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257e:	4b55      	ldr	r3, [pc, #340]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	099b      	lsrs	r3, r3, #6
 8002584:	f04f 0400 	mov.w	r4, #0
 8002588:	f240 11ff 	movw	r1, #511	; 0x1ff
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	ea03 0501 	and.w	r5, r3, r1
 8002594:	ea04 0602 	and.w	r6, r4, r2
 8002598:	4629      	mov	r1, r5
 800259a:	4632      	mov	r2, r6
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	f04f 0400 	mov.w	r4, #0
 80025a4:	0154      	lsls	r4, r2, #5
 80025a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025aa:	014b      	lsls	r3, r1, #5
 80025ac:	4619      	mov	r1, r3
 80025ae:	4622      	mov	r2, r4
 80025b0:	1b49      	subs	r1, r1, r5
 80025b2:	eb62 0206 	sbc.w	r2, r2, r6
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	f04f 0400 	mov.w	r4, #0
 80025be:	0194      	lsls	r4, r2, #6
 80025c0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025c4:	018b      	lsls	r3, r1, #6
 80025c6:	1a5b      	subs	r3, r3, r1
 80025c8:	eb64 0402 	sbc.w	r4, r4, r2
 80025cc:	f04f 0100 	mov.w	r1, #0
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	00e2      	lsls	r2, r4, #3
 80025d6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025da:	00d9      	lsls	r1, r3, #3
 80025dc:	460b      	mov	r3, r1
 80025de:	4614      	mov	r4, r2
 80025e0:	195b      	adds	r3, r3, r5
 80025e2:	eb44 0406 	adc.w	r4, r4, r6
 80025e6:	f04f 0100 	mov.w	r1, #0
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	0262      	lsls	r2, r4, #9
 80025f0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025f4:	0259      	lsls	r1, r3, #9
 80025f6:	460b      	mov	r3, r1
 80025f8:	4614      	mov	r4, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	4621      	mov	r1, r4
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f04f 0400 	mov.w	r4, #0
 8002604:	461a      	mov	r2, r3
 8002606:	4623      	mov	r3, r4
 8002608:	f7fe fad6 	bl	8000bb8 <__aeabi_uldivmod>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e049      	b.n	80026a8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002614:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	099b      	lsrs	r3, r3, #6
 800261a:	f04f 0400 	mov.w	r4, #0
 800261e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	ea03 0501 	and.w	r5, r3, r1
 800262a:	ea04 0602 	and.w	r6, r4, r2
 800262e:	4629      	mov	r1, r5
 8002630:	4632      	mov	r2, r6
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	f04f 0400 	mov.w	r4, #0
 800263a:	0154      	lsls	r4, r2, #5
 800263c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002640:	014b      	lsls	r3, r1, #5
 8002642:	4619      	mov	r1, r3
 8002644:	4622      	mov	r2, r4
 8002646:	1b49      	subs	r1, r1, r5
 8002648:	eb62 0206 	sbc.w	r2, r2, r6
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	f04f 0400 	mov.w	r4, #0
 8002654:	0194      	lsls	r4, r2, #6
 8002656:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800265a:	018b      	lsls	r3, r1, #6
 800265c:	1a5b      	subs	r3, r3, r1
 800265e:	eb64 0402 	sbc.w	r4, r4, r2
 8002662:	f04f 0100 	mov.w	r1, #0
 8002666:	f04f 0200 	mov.w	r2, #0
 800266a:	00e2      	lsls	r2, r4, #3
 800266c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002670:	00d9      	lsls	r1, r3, #3
 8002672:	460b      	mov	r3, r1
 8002674:	4614      	mov	r4, r2
 8002676:	195b      	adds	r3, r3, r5
 8002678:	eb44 0406 	adc.w	r4, r4, r6
 800267c:	f04f 0100 	mov.w	r1, #0
 8002680:	f04f 0200 	mov.w	r2, #0
 8002684:	02a2      	lsls	r2, r4, #10
 8002686:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800268a:	0299      	lsls	r1, r3, #10
 800268c:	460b      	mov	r3, r1
 800268e:	4614      	mov	r4, r2
 8002690:	4618      	mov	r0, r3
 8002692:	4621      	mov	r1, r4
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f04f 0400 	mov.w	r4, #0
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	f7fe fa8b 	bl	8000bb8 <__aeabi_uldivmod>
 80026a2:	4603      	mov	r3, r0
 80026a4:	460c      	mov	r4, r1
 80026a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a8:	4b0a      	ldr	r3, [pc, #40]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	3301      	adds	r3, #1
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	60bb      	str	r3, [r7, #8]
      break;
 80026c2:	e002      	b.n	80026ca <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80026c6:	60bb      	str	r3, [r7, #8]
      break;
 80026c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ca:	68bb      	ldr	r3, [r7, #8]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	007a1200 	.word	0x007a1200

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e4:	4b03      	ldr	r3, [pc, #12]	; (80026f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000030 	.word	0x20000030

080026f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026fc:	f7ff fff0 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002700:	4601      	mov	r1, r0
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	0a9b      	lsrs	r3, r3, #10
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4a03      	ldr	r2, [pc, #12]	; (800271c <HAL_RCC_GetPCLK1Freq+0x24>)
 800270e:	5cd3      	ldrb	r3, [r2, r3]
 8002710:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002714:	4618      	mov	r0, r3
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40023800 	.word	0x40023800
 800271c:	0800b4f0 	.word	0x0800b4f0

08002720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002724:	f7ff ffdc 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8002728:	4601      	mov	r1, r0
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x20>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	0b5b      	lsrs	r3, r3, #13
 8002730:	f003 0307 	and.w	r3, r3, #7
 8002734:	4a03      	ldr	r2, [pc, #12]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002736:	5cd3      	ldrb	r3, [r2, r3]
 8002738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40023800 	.word	0x40023800
 8002744:	0800b4f0 	.word	0x0800b4f0

08002748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e03f      	b.n	80027da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fef8 	bl	8001564 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800278a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f90b 	bl	80029a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3708      	adds	r7, #8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b088      	sub	sp, #32
 80027e6:	af02      	add	r7, sp, #8
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b20      	cmp	r3, #32
 8002800:	f040 8083 	bne.w	800290a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_UART_Transmit+0x2e>
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e07b      	b.n	800290c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_UART_Transmit+0x40>
 800281e:	2302      	movs	r3, #2
 8002820:	e074      	b.n	800290c <HAL_UART_Transmit+0x12a>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2221      	movs	r2, #33	; 0x21
 8002834:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002838:	f7ff f834 	bl	80018a4 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	88fa      	ldrh	r2, [r7, #6]
 8002848:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002852:	e042      	b.n	80028da <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800286a:	d122      	bne.n	80028b2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2200      	movs	r2, #0
 8002874:	2180      	movs	r1, #128	; 0x80
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 f84c 	bl	8002914 <UART_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e042      	b.n	800290c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	461a      	mov	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002898:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	3302      	adds	r3, #2
 80028a6:	60bb      	str	r3, [r7, #8]
 80028a8:	e017      	b.n	80028da <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3301      	adds	r3, #1
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	e013      	b.n	80028da <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f829 	bl	8002914 <UART_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e01f      	b.n	800290c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	1c5a      	adds	r2, r3, #1
 80028d0:	60ba      	str	r2, [r7, #8]
 80028d2:	781a      	ldrb	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1b7      	bne.n	8002854 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	2140      	movs	r1, #64	; 0x40
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f810 	bl	8002914 <UART_WaitOnFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e006      	b.n	800290c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2220      	movs	r2, #32
 8002902:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	4613      	mov	r3, r2
 8002922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002924:	e02c      	b.n	8002980 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800292c:	d028      	beq.n	8002980 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <UART_WaitOnFlagUntilTimeout+0x30>
 8002934:	f7fe ffb6 	bl	80018a4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	429a      	cmp	r2, r3
 8002942:	d21d      	bcs.n	8002980 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002952:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695a      	ldr	r2, [r3, #20]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f022 0201 	bic.w	r2, r2, #1
 8002962:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e00f      	b.n	80029a0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	4013      	ands	r3, r2
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	429a      	cmp	r2, r3
 800298e:	bf0c      	ite	eq
 8002990:	2301      	moveq	r3, #1
 8002992:	2300      	movne	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	461a      	mov	r2, r3
 8002998:	79fb      	ldrb	r3, [r7, #7]
 800299a:	429a      	cmp	r2, r3
 800299c:	d0c3      	beq.n	8002926 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ac:	b085      	sub	sp, #20
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	431a      	orrs	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	4313      	orrs	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80029ea:	f023 030c 	bic.w	r3, r3, #12
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	68f9      	ldr	r1, [r7, #12]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a16:	f040 818b 	bne.w	8002d30 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4ac1      	ldr	r2, [pc, #772]	; (8002d24 <UART_SetConfig+0x37c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d005      	beq.n	8002a30 <UART_SetConfig+0x88>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4abf      	ldr	r2, [pc, #764]	; (8002d28 <UART_SetConfig+0x380>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	f040 80bd 	bne.w	8002baa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a30:	f7ff fe76 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8002a34:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	461d      	mov	r5, r3
 8002a3a:	f04f 0600 	mov.w	r6, #0
 8002a3e:	46a8      	mov	r8, r5
 8002a40:	46b1      	mov	r9, r6
 8002a42:	eb18 0308 	adds.w	r3, r8, r8
 8002a46:	eb49 0409 	adc.w	r4, r9, r9
 8002a4a:	4698      	mov	r8, r3
 8002a4c:	46a1      	mov	r9, r4
 8002a4e:	eb18 0805 	adds.w	r8, r8, r5
 8002a52:	eb49 0906 	adc.w	r9, r9, r6
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a62:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a66:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a6a:	4688      	mov	r8, r1
 8002a6c:	4691      	mov	r9, r2
 8002a6e:	eb18 0005 	adds.w	r0, r8, r5
 8002a72:	eb49 0106 	adc.w	r1, r9, r6
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	461d      	mov	r5, r3
 8002a7c:	f04f 0600 	mov.w	r6, #0
 8002a80:	196b      	adds	r3, r5, r5
 8002a82:	eb46 0406 	adc.w	r4, r6, r6
 8002a86:	461a      	mov	r2, r3
 8002a88:	4623      	mov	r3, r4
 8002a8a:	f7fe f895 	bl	8000bb8 <__aeabi_uldivmod>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	460c      	mov	r4, r1
 8002a92:	461a      	mov	r2, r3
 8002a94:	4ba5      	ldr	r3, [pc, #660]	; (8002d2c <UART_SetConfig+0x384>)
 8002a96:	fba3 2302 	umull	r2, r3, r3, r2
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	461d      	mov	r5, r3
 8002aa4:	f04f 0600 	mov.w	r6, #0
 8002aa8:	46a9      	mov	r9, r5
 8002aaa:	46b2      	mov	sl, r6
 8002aac:	eb19 0309 	adds.w	r3, r9, r9
 8002ab0:	eb4a 040a 	adc.w	r4, sl, sl
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	46a2      	mov	sl, r4
 8002ab8:	eb19 0905 	adds.w	r9, r9, r5
 8002abc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002acc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ad0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ad4:	4689      	mov	r9, r1
 8002ad6:	4692      	mov	sl, r2
 8002ad8:	eb19 0005 	adds.w	r0, r9, r5
 8002adc:	eb4a 0106 	adc.w	r1, sl, r6
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	461d      	mov	r5, r3
 8002ae6:	f04f 0600 	mov.w	r6, #0
 8002aea:	196b      	adds	r3, r5, r5
 8002aec:	eb46 0406 	adc.w	r4, r6, r6
 8002af0:	461a      	mov	r2, r3
 8002af2:	4623      	mov	r3, r4
 8002af4:	f7fe f860 	bl	8000bb8 <__aeabi_uldivmod>
 8002af8:	4603      	mov	r3, r0
 8002afa:	460c      	mov	r4, r1
 8002afc:	461a      	mov	r2, r3
 8002afe:	4b8b      	ldr	r3, [pc, #556]	; (8002d2c <UART_SetConfig+0x384>)
 8002b00:	fba3 1302 	umull	r1, r3, r3, r2
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	2164      	movs	r1, #100	; 0x64
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	3332      	adds	r3, #50	; 0x32
 8002b12:	4a86      	ldr	r2, [pc, #536]	; (8002d2c <UART_SetConfig+0x384>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002b20:	4498      	add	r8, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	461d      	mov	r5, r3
 8002b26:	f04f 0600 	mov.w	r6, #0
 8002b2a:	46a9      	mov	r9, r5
 8002b2c:	46b2      	mov	sl, r6
 8002b2e:	eb19 0309 	adds.w	r3, r9, r9
 8002b32:	eb4a 040a 	adc.w	r4, sl, sl
 8002b36:	4699      	mov	r9, r3
 8002b38:	46a2      	mov	sl, r4
 8002b3a:	eb19 0905 	adds.w	r9, r9, r5
 8002b3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b56:	4689      	mov	r9, r1
 8002b58:	4692      	mov	sl, r2
 8002b5a:	eb19 0005 	adds.w	r0, r9, r5
 8002b5e:	eb4a 0106 	adc.w	r1, sl, r6
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	461d      	mov	r5, r3
 8002b68:	f04f 0600 	mov.w	r6, #0
 8002b6c:	196b      	adds	r3, r5, r5
 8002b6e:	eb46 0406 	adc.w	r4, r6, r6
 8002b72:	461a      	mov	r2, r3
 8002b74:	4623      	mov	r3, r4
 8002b76:	f7fe f81f 	bl	8000bb8 <__aeabi_uldivmod>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	460c      	mov	r4, r1
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b6a      	ldr	r3, [pc, #424]	; (8002d2c <UART_SetConfig+0x384>)
 8002b82:	fba3 1302 	umull	r1, r3, r3, r2
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2164      	movs	r1, #100	; 0x64
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	3332      	adds	r3, #50	; 0x32
 8002b94:	4a65      	ldr	r2, [pc, #404]	; (8002d2c <UART_SetConfig+0x384>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	f003 0207 	and.w	r2, r3, #7
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4442      	add	r2, r8
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	e26f      	b.n	800308a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002baa:	f7ff fda5 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8002bae:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	f04f 0600 	mov.w	r6, #0
 8002bb8:	46a8      	mov	r8, r5
 8002bba:	46b1      	mov	r9, r6
 8002bbc:	eb18 0308 	adds.w	r3, r8, r8
 8002bc0:	eb49 0409 	adc.w	r4, r9, r9
 8002bc4:	4698      	mov	r8, r3
 8002bc6:	46a1      	mov	r9, r4
 8002bc8:	eb18 0805 	adds.w	r8, r8, r5
 8002bcc:	eb49 0906 	adc.w	r9, r9, r6
 8002bd0:	f04f 0100 	mov.w	r1, #0
 8002bd4:	f04f 0200 	mov.w	r2, #0
 8002bd8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002bdc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002be0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002be4:	4688      	mov	r8, r1
 8002be6:	4691      	mov	r9, r2
 8002be8:	eb18 0005 	adds.w	r0, r8, r5
 8002bec:	eb49 0106 	adc.w	r1, r9, r6
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	461d      	mov	r5, r3
 8002bf6:	f04f 0600 	mov.w	r6, #0
 8002bfa:	196b      	adds	r3, r5, r5
 8002bfc:	eb46 0406 	adc.w	r4, r6, r6
 8002c00:	461a      	mov	r2, r3
 8002c02:	4623      	mov	r3, r4
 8002c04:	f7fd ffd8 	bl	8000bb8 <__aeabi_uldivmod>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b47      	ldr	r3, [pc, #284]	; (8002d2c <UART_SetConfig+0x384>)
 8002c10:	fba3 2302 	umull	r2, r3, r3, r2
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	461d      	mov	r5, r3
 8002c1e:	f04f 0600 	mov.w	r6, #0
 8002c22:	46a9      	mov	r9, r5
 8002c24:	46b2      	mov	sl, r6
 8002c26:	eb19 0309 	adds.w	r3, r9, r9
 8002c2a:	eb4a 040a 	adc.w	r4, sl, sl
 8002c2e:	4699      	mov	r9, r3
 8002c30:	46a2      	mov	sl, r4
 8002c32:	eb19 0905 	adds.w	r9, r9, r5
 8002c36:	eb4a 0a06 	adc.w	sl, sl, r6
 8002c3a:	f04f 0100 	mov.w	r1, #0
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c46:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002c4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002c4e:	4689      	mov	r9, r1
 8002c50:	4692      	mov	sl, r2
 8002c52:	eb19 0005 	adds.w	r0, r9, r5
 8002c56:	eb4a 0106 	adc.w	r1, sl, r6
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	461d      	mov	r5, r3
 8002c60:	f04f 0600 	mov.w	r6, #0
 8002c64:	196b      	adds	r3, r5, r5
 8002c66:	eb46 0406 	adc.w	r4, r6, r6
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4623      	mov	r3, r4
 8002c6e:	f7fd ffa3 	bl	8000bb8 <__aeabi_uldivmod>
 8002c72:	4603      	mov	r3, r0
 8002c74:	460c      	mov	r4, r1
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <UART_SetConfig+0x384>)
 8002c7a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	2164      	movs	r1, #100	; 0x64
 8002c82:	fb01 f303 	mul.w	r3, r1, r3
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	3332      	adds	r3, #50	; 0x32
 8002c8c:	4a27      	ldr	r2, [pc, #156]	; (8002d2c <UART_SetConfig+0x384>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	095b      	lsrs	r3, r3, #5
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c9a:	4498      	add	r8, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	f04f 0600 	mov.w	r6, #0
 8002ca4:	46a9      	mov	r9, r5
 8002ca6:	46b2      	mov	sl, r6
 8002ca8:	eb19 0309 	adds.w	r3, r9, r9
 8002cac:	eb4a 040a 	adc.w	r4, sl, sl
 8002cb0:	4699      	mov	r9, r3
 8002cb2:	46a2      	mov	sl, r4
 8002cb4:	eb19 0905 	adds.w	r9, r9, r5
 8002cb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	f04f 0200 	mov.w	r2, #0
 8002cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ccc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cd0:	4689      	mov	r9, r1
 8002cd2:	4692      	mov	sl, r2
 8002cd4:	eb19 0005 	adds.w	r0, r9, r5
 8002cd8:	eb4a 0106 	adc.w	r1, sl, r6
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	461d      	mov	r5, r3
 8002ce2:	f04f 0600 	mov.w	r6, #0
 8002ce6:	196b      	adds	r3, r5, r5
 8002ce8:	eb46 0406 	adc.w	r4, r6, r6
 8002cec:	461a      	mov	r2, r3
 8002cee:	4623      	mov	r3, r4
 8002cf0:	f7fd ff62 	bl	8000bb8 <__aeabi_uldivmod>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	460c      	mov	r4, r1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <UART_SetConfig+0x384>)
 8002cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	2164      	movs	r1, #100	; 0x64
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	3332      	adds	r3, #50	; 0x32
 8002d0e:	4a07      	ldr	r2, [pc, #28]	; (8002d2c <UART_SetConfig+0x384>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	f003 0207 	and.w	r2, r3, #7
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4442      	add	r2, r8
 8002d20:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002d22:	e1b2      	b.n	800308a <UART_SetConfig+0x6e2>
 8002d24:	40011000 	.word	0x40011000
 8002d28:	40011400 	.word	0x40011400
 8002d2c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4ad7      	ldr	r2, [pc, #860]	; (8003094 <UART_SetConfig+0x6ec>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d005      	beq.n	8002d46 <UART_SetConfig+0x39e>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4ad6      	ldr	r2, [pc, #856]	; (8003098 <UART_SetConfig+0x6f0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	f040 80d1 	bne.w	8002ee8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d46:	f7ff fceb 	bl	8002720 <HAL_RCC_GetPCLK2Freq>
 8002d4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	469a      	mov	sl, r3
 8002d50:	f04f 0b00 	mov.w	fp, #0
 8002d54:	46d0      	mov	r8, sl
 8002d56:	46d9      	mov	r9, fp
 8002d58:	eb18 0308 	adds.w	r3, r8, r8
 8002d5c:	eb49 0409 	adc.w	r4, r9, r9
 8002d60:	4698      	mov	r8, r3
 8002d62:	46a1      	mov	r9, r4
 8002d64:	eb18 080a 	adds.w	r8, r8, sl
 8002d68:	eb49 090b 	adc.w	r9, r9, fp
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002d78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002d7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002d80:	4688      	mov	r8, r1
 8002d82:	4691      	mov	r9, r2
 8002d84:	eb1a 0508 	adds.w	r5, sl, r8
 8002d88:	eb4b 0609 	adc.w	r6, fp, r9
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4619      	mov	r1, r3
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f04f 0400 	mov.w	r4, #0
 8002d9e:	0094      	lsls	r4, r2, #2
 8002da0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002da4:	008b      	lsls	r3, r1, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	4623      	mov	r3, r4
 8002daa:	4628      	mov	r0, r5
 8002dac:	4631      	mov	r1, r6
 8002dae:	f7fd ff03 	bl	8000bb8 <__aeabi_uldivmod>
 8002db2:	4603      	mov	r3, r0
 8002db4:	460c      	mov	r4, r1
 8002db6:	461a      	mov	r2, r3
 8002db8:	4bb8      	ldr	r3, [pc, #736]	; (800309c <UART_SetConfig+0x6f4>)
 8002dba:	fba3 2302 	umull	r2, r3, r3, r2
 8002dbe:	095b      	lsrs	r3, r3, #5
 8002dc0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	469b      	mov	fp, r3
 8002dc8:	f04f 0c00 	mov.w	ip, #0
 8002dcc:	46d9      	mov	r9, fp
 8002dce:	46e2      	mov	sl, ip
 8002dd0:	eb19 0309 	adds.w	r3, r9, r9
 8002dd4:	eb4a 040a 	adc.w	r4, sl, sl
 8002dd8:	4699      	mov	r9, r3
 8002dda:	46a2      	mov	sl, r4
 8002ddc:	eb19 090b 	adds.w	r9, r9, fp
 8002de0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002de4:	f04f 0100 	mov.w	r1, #0
 8002de8:	f04f 0200 	mov.w	r2, #0
 8002dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002df4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002df8:	4689      	mov	r9, r1
 8002dfa:	4692      	mov	sl, r2
 8002dfc:	eb1b 0509 	adds.w	r5, fp, r9
 8002e00:	eb4c 060a 	adc.w	r6, ip, sl
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	f04f 0400 	mov.w	r4, #0
 8002e16:	0094      	lsls	r4, r2, #2
 8002e18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e1c:	008b      	lsls	r3, r1, #2
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4623      	mov	r3, r4
 8002e22:	4628      	mov	r0, r5
 8002e24:	4631      	mov	r1, r6
 8002e26:	f7fd fec7 	bl	8000bb8 <__aeabi_uldivmod>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	461a      	mov	r2, r3
 8002e30:	4b9a      	ldr	r3, [pc, #616]	; (800309c <UART_SetConfig+0x6f4>)
 8002e32:	fba3 1302 	umull	r1, r3, r3, r2
 8002e36:	095b      	lsrs	r3, r3, #5
 8002e38:	2164      	movs	r1, #100	; 0x64
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	3332      	adds	r3, #50	; 0x32
 8002e44:	4a95      	ldr	r2, [pc, #596]	; (800309c <UART_SetConfig+0x6f4>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e50:	4498      	add	r8, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	469b      	mov	fp, r3
 8002e56:	f04f 0c00 	mov.w	ip, #0
 8002e5a:	46d9      	mov	r9, fp
 8002e5c:	46e2      	mov	sl, ip
 8002e5e:	eb19 0309 	adds.w	r3, r9, r9
 8002e62:	eb4a 040a 	adc.w	r4, sl, sl
 8002e66:	4699      	mov	r9, r3
 8002e68:	46a2      	mov	sl, r4
 8002e6a:	eb19 090b 	adds.w	r9, r9, fp
 8002e6e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002e72:	f04f 0100 	mov.w	r1, #0
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002e82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002e86:	4689      	mov	r9, r1
 8002e88:	4692      	mov	sl, r2
 8002e8a:	eb1b 0509 	adds.w	r5, fp, r9
 8002e8e:	eb4c 060a 	adc.w	r6, ip, sl
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	f04f 0400 	mov.w	r4, #0
 8002ea4:	0094      	lsls	r4, r2, #2
 8002ea6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002eaa:	008b      	lsls	r3, r1, #2
 8002eac:	461a      	mov	r2, r3
 8002eae:	4623      	mov	r3, r4
 8002eb0:	4628      	mov	r0, r5
 8002eb2:	4631      	mov	r1, r6
 8002eb4:	f7fd fe80 	bl	8000bb8 <__aeabi_uldivmod>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	460c      	mov	r4, r1
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b77      	ldr	r3, [pc, #476]	; (800309c <UART_SetConfig+0x6f4>)
 8002ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec4:	095b      	lsrs	r3, r3, #5
 8002ec6:	2164      	movs	r1, #100	; 0x64
 8002ec8:	fb01 f303 	mul.w	r3, r1, r3
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	3332      	adds	r3, #50	; 0x32
 8002ed2:	4a72      	ldr	r2, [pc, #456]	; (800309c <UART_SetConfig+0x6f4>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	095b      	lsrs	r3, r3, #5
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4442      	add	r2, r8
 8002ee4:	609a      	str	r2, [r3, #8]
 8002ee6:	e0d0      	b.n	800308a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f7ff fc06 	bl	80026f8 <HAL_RCC_GetPCLK1Freq>
 8002eec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	469a      	mov	sl, r3
 8002ef2:	f04f 0b00 	mov.w	fp, #0
 8002ef6:	46d0      	mov	r8, sl
 8002ef8:	46d9      	mov	r9, fp
 8002efa:	eb18 0308 	adds.w	r3, r8, r8
 8002efe:	eb49 0409 	adc.w	r4, r9, r9
 8002f02:	4698      	mov	r8, r3
 8002f04:	46a1      	mov	r9, r4
 8002f06:	eb18 080a 	adds.w	r8, r8, sl
 8002f0a:	eb49 090b 	adc.w	r9, r9, fp
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f1a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f1e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f22:	4688      	mov	r8, r1
 8002f24:	4691      	mov	r9, r2
 8002f26:	eb1a 0508 	adds.w	r5, sl, r8
 8002f2a:	eb4b 0609 	adc.w	r6, fp, r9
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	4619      	mov	r1, r3
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f04f 0400 	mov.w	r4, #0
 8002f40:	0094      	lsls	r4, r2, #2
 8002f42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f46:	008b      	lsls	r3, r1, #2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	4628      	mov	r0, r5
 8002f4e:	4631      	mov	r1, r6
 8002f50:	f7fd fe32 	bl	8000bb8 <__aeabi_uldivmod>
 8002f54:	4603      	mov	r3, r0
 8002f56:	460c      	mov	r4, r1
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b50      	ldr	r3, [pc, #320]	; (800309c <UART_SetConfig+0x6f4>)
 8002f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	469b      	mov	fp, r3
 8002f6a:	f04f 0c00 	mov.w	ip, #0
 8002f6e:	46d9      	mov	r9, fp
 8002f70:	46e2      	mov	sl, ip
 8002f72:	eb19 0309 	adds.w	r3, r9, r9
 8002f76:	eb4a 040a 	adc.w	r4, sl, sl
 8002f7a:	4699      	mov	r9, r3
 8002f7c:	46a2      	mov	sl, r4
 8002f7e:	eb19 090b 	adds.w	r9, r9, fp
 8002f82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f86:	f04f 0100 	mov.w	r1, #0
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f9a:	4689      	mov	r9, r1
 8002f9c:	4692      	mov	sl, r2
 8002f9e:	eb1b 0509 	adds.w	r5, fp, r9
 8002fa2:	eb4c 060a 	adc.w	r6, ip, sl
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4619      	mov	r1, r3
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	f04f 0400 	mov.w	r4, #0
 8002fb8:	0094      	lsls	r4, r2, #2
 8002fba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002fbe:	008b      	lsls	r3, r1, #2
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	4623      	mov	r3, r4
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	4631      	mov	r1, r6
 8002fc8:	f7fd fdf6 	bl	8000bb8 <__aeabi_uldivmod>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	460c      	mov	r4, r1
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	4b32      	ldr	r3, [pc, #200]	; (800309c <UART_SetConfig+0x6f4>)
 8002fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	2164      	movs	r1, #100	; 0x64
 8002fdc:	fb01 f303 	mul.w	r3, r1, r3
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	3332      	adds	r3, #50	; 0x32
 8002fe6:	4a2d      	ldr	r2, [pc, #180]	; (800309c <UART_SetConfig+0x6f4>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ff2:	4498      	add	r8, r3
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	469b      	mov	fp, r3
 8002ff8:	f04f 0c00 	mov.w	ip, #0
 8002ffc:	46d9      	mov	r9, fp
 8002ffe:	46e2      	mov	sl, ip
 8003000:	eb19 0309 	adds.w	r3, r9, r9
 8003004:	eb4a 040a 	adc.w	r4, sl, sl
 8003008:	4699      	mov	r9, r3
 800300a:	46a2      	mov	sl, r4
 800300c:	eb19 090b 	adds.w	r9, r9, fp
 8003010:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	f04f 0200 	mov.w	r2, #0
 800301c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003020:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003024:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003028:	4689      	mov	r9, r1
 800302a:	4692      	mov	sl, r2
 800302c:	eb1b 0509 	adds.w	r5, fp, r9
 8003030:	eb4c 060a 	adc.w	r6, ip, sl
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 0200 	mov.w	r2, #0
 800303e:	f04f 0300 	mov.w	r3, #0
 8003042:	f04f 0400 	mov.w	r4, #0
 8003046:	0094      	lsls	r4, r2, #2
 8003048:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800304c:	008b      	lsls	r3, r1, #2
 800304e:	461a      	mov	r2, r3
 8003050:	4623      	mov	r3, r4
 8003052:	4628      	mov	r0, r5
 8003054:	4631      	mov	r1, r6
 8003056:	f7fd fdaf 	bl	8000bb8 <__aeabi_uldivmod>
 800305a:	4603      	mov	r3, r0
 800305c:	460c      	mov	r4, r1
 800305e:	461a      	mov	r2, r3
 8003060:	4b0e      	ldr	r3, [pc, #56]	; (800309c <UART_SetConfig+0x6f4>)
 8003062:	fba3 1302 	umull	r1, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2164      	movs	r1, #100	; 0x64
 800306a:	fb01 f303 	mul.w	r3, r1, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a09      	ldr	r2, [pc, #36]	; (800309c <UART_SetConfig+0x6f4>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4442      	add	r2, r8
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	e7ff      	b.n	800308a <UART_SetConfig+0x6e2>
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003094:	40011000 	.word	0x40011000
 8003098:	40011400 	.word	0x40011400
 800309c:	51eb851f 	.word	0x51eb851f

080030a0 <dwtReset>:
  int us;
};

void dwtIpInit(void);

__STATIC_INLINE void dwtReset(void) {
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <dwtReset+0x14>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	605a      	str	r2, [r3, #4]
}
 80030aa:	bf00      	nop
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e0001000 	.word	0xe0001000

080030b8 <cyclesCounterInit>:
};

extern struct cyclesCount cyclesCount;

__STATIC_INLINE void cyclesCounterInit(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
  struct dwtTime t;
  dwtCyclesToTime(UINT32_MAX, &t);
 80030be:	463b      	mov	r3, r7
 80030c0:	461a      	mov	r2, r3
 80030c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	f000 fcd2 	bl	8003a72 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80030d4:	fb02 f203 	mul.w	r2, r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	4413      	add	r3, r2
 80030dc:	461a      	mov	r2, r3
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <cyclesCounterInit+0x38>)
 80030e0:	601a      	str	r2, [r3, #0]
  dwtIpInit();
 80030e2:	f000 fca3 	bl	8003a2c <dwtIpInit>
}
 80030e6:	bf00      	nop
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20001358 	.word	0x20001358

080030f4 <aiBootstrap>:
AI_ALIGNED(4)
static ai_u8 activations[AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE];
#endif

static int aiBootstrap(struct ai_network_exec_ctx *ctx, const char *nn_name)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b092      	sub	sp, #72	; 0x48
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  ai_error err;
  ai_u32 ext_addr;
  ai_u32 sz;

  /* Creating the instance of the  network ------------------------- */
  printf("Creating the network \"%s\"..\r\n", nn_name);
 80030fe:	6839      	ldr	r1, [r7, #0]
 8003100:	484c      	ldr	r0, [pc, #304]	; (8003234 <aiBootstrap+0x140>)
 8003102:	f003 fe71 	bl	8006de8 <iprintf>

  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	4619      	mov	r1, r3
 800310c:	6838      	ldr	r0, [r7, #0]
 800310e:	f001 faf9 	bl	8004704 <ai_mnetwork_create>
 8003112:	4603      	mov	r3, r0
 8003114:	647b      	str	r3, [r7, #68]	; 0x44
  if (err.type) {
 8003116:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800311a:	2b00      	cmp	r3, #0
 800311c:	d006      	beq.n	800312c <aiBootstrap+0x38>
    aiLogErr(err, "ai_mnetwork_create");
 800311e:	4946      	ldr	r1, [pc, #280]	; (8003238 <aiBootstrap+0x144>)
 8003120:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003122:	f000 f91d 	bl	8003360 <aiLogErr>
    return -1;
 8003126:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800312a:	e07f      	b.n	800322c <aiBootstrap+0x138>
  }

  /* Initialize the instance --------------------------------------- */
  printf("Initializing the network\r\n");
 800312c:	4843      	ldr	r0, [pc, #268]	; (800323c <aiBootstrap+0x148>)
 800312e:	f003 fecf 	bl	8006ed0 <puts>
   *   located in the external memory (network dependent feature). For the last case,
   *   the address (hard-coded @) is defined by the X-CUBE-AI plug-in and stored in the
   *   multiple network structure (see app_x-cube-ai.c file, ai_network_entry_t definition).
   *   0xFFFFFFFF indicates that the local buffer should be used.
   */
  ai_network_params params = {
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	2230      	movs	r2, #48	; 0x30
 8003138:	2100      	movs	r1, #0
 800313a:	4618      	mov	r0, r3
 800313c:	f003 f947 	bl	80063ce <memset>
 8003140:	4b3f      	ldr	r3, [pc, #252]	; (8003240 <aiBootstrap+0x14c>)
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	4b3e      	ldr	r3, [pc, #248]	; (8003240 <aiBootstrap+0x14c>)
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
      AI_BUFFER_NULL(NULL),
      AI_BUFFER_NULL(NULL)
  };

  if (ai_mnetwork_get_ext_data_activations(ctx->handle, &ext_addr, &sz) == 0) {
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003150:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8003154:	4618      	mov	r0, r3
 8003156:	f001 fbef 	bl	8004938 <ai_mnetwork_get_ext_data_activations>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11a      	bne.n	8003196 <aiBootstrap+0xa2>
    if (ext_addr == 0xFFFFFFFF) {
 8003160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003166:	d114      	bne.n	8003192 <aiBootstrap+0x9e>
#if AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE != 0
      params.activations.data = (ai_handle)activations;
 8003168:	4b36      	ldr	r3, [pc, #216]	; (8003244 <aiBootstrap+0x150>)
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
      if (sz > AI_MNETWORK_DATA_ACTIVATIONS_INT_SIZE) {
 800316c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800316e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003172:	d910      	bls.n	8003196 <aiBootstrap+0xa2>
        printf("E: APP error (aiBootstrap for %s) - size of the local activations buffer is not enough\r\n",
 8003174:	6839      	ldr	r1, [r7, #0]
 8003176:	4834      	ldr	r0, [pc, #208]	; (8003248 <aiBootstrap+0x154>)
 8003178:	f003 fe36 	bl	8006de8 <iprintf>
            nn_name);
        ai_mnetwork_destroy(ctx->handle);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f001 fb2b 	bl	80047dc <ai_mnetwork_destroy>
        ctx->handle = AI_HANDLE_NULL;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
        return -5;
 800318c:	f06f 0304 	mvn.w	r3, #4
 8003190:	e04c      	b.n	800322c <aiBootstrap+0x138>
      ctx->handle = AI_HANDLE_NULL;
      return -5;
#endif
    }
    else {
      params.activations.data = (ai_handle)ext_addr;
 8003192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
    }
  }

  if (!ai_mnetwork_init(ctx->handle, &params)) {
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f107 020c 	add.w	r2, r7, #12
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f001 fb78 	bl	8004896 <ai_mnetwork_init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f083 0301 	eor.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d015      	beq.n	80031de <aiBootstrap+0xea>
    err = ai_mnetwork_get_error(ctx->handle);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fb4d 	bl	8004856 <ai_mnetwork_get_error>
 80031bc:	4603      	mov	r3, r0
 80031be:	647b      	str	r3, [r7, #68]	; 0x44
    aiLogErr(err, "ai_mnetwork_init");
 80031c0:	4922      	ldr	r1, [pc, #136]	; (800324c <aiBootstrap+0x158>)
 80031c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80031c4:	f000 f8cc 	bl	8003360 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f001 fb05 	bl	80047dc <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
    return -4;
 80031d8:	f06f 0303 	mvn.w	r3, #3
 80031dc:	e026      	b.n	800322c <aiBootstrap+0x138>
  }

  /* Display the network info -------------------------------------- */
  if (ai_mnetwork_get_info(ctx->handle,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3304      	adds	r3, #4
 80031e6:	4619      	mov	r1, r3
 80031e8:	4610      	mov	r0, r2
 80031ea:	f001 fb19 	bl	8004820 <ai_mnetwork_get_info>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d006      	beq.n	8003202 <aiBootstrap+0x10e>
      &ctx->report)) {
    aiPrintNetworkInfo(&ctx->report);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	3304      	adds	r3, #4
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 facb 	bl	8003794 <aiPrintNetworkInfo>
    ai_mnetwork_destroy(ctx->handle);
    ctx->handle = AI_HANDLE_NULL;
    return -2;
  }

  return 0;
 80031fe:	2300      	movs	r3, #0
 8003200:	e014      	b.n	800322c <aiBootstrap+0x138>
    err = ai_mnetwork_get_error(ctx->handle);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f001 fb25 	bl	8004856 <ai_mnetwork_get_error>
 800320c:	4603      	mov	r3, r0
 800320e:	647b      	str	r3, [r7, #68]	; 0x44
    aiLogErr(err, "ai_mnetwork_get_info");
 8003210:	490f      	ldr	r1, [pc, #60]	; (8003250 <aiBootstrap+0x15c>)
 8003212:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003214:	f000 f8a4 	bl	8003360 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4618      	mov	r0, r3
 800321e:	f001 fadd 	bl	80047dc <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]
    return -2;
 8003228:	f06f 0301 	mvn.w	r3, #1
}
 800322c:	4618      	mov	r0, r3
 800322e:	3748      	adds	r7, #72	; 0x48
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	08008d6c 	.word	0x08008d6c
 8003238:	08008d8c 	.word	0x08008d8c
 800323c:	08008da0 	.word	0x08008da0
 8003240:	40000040 	.word	0x40000040
 8003244:	20000f34 	.word	0x20000f34
 8003248:	08008dbc 	.word	0x08008dbc
 800324c:	08008e18 	.word	0x08008e18
 8003250:	08008e2c 	.word	0x08008e2c

08003254 <aiInit>:

static int aiInit(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
  int res = -1;
 800325a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800325e:	60fb      	str	r3, [r7, #12]
  const char *nn_name;
  int idx;

  aiPlatformVersion();
 8003260:	f000 f86a 	bl	8003338 <aiPlatformVersion>

  /* Reset the contexts -------------------------------------------- */
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 8003264:	2300      	movs	r3, #0
 8003266:	607b      	str	r3, [r7, #4]
 8003268:	e00b      	b.n	8003282 <aiInit+0x2e>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 800326a:	491e      	ldr	r1, [pc, #120]	; (80032e4 <aiInit+0x90>)
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	440b      	add	r3, r1
 8003278:	2200      	movs	r2, #0
 800327a:	601a      	str	r2, [r3, #0]
  for (idx=0; idx < AI_MNETWORK_NUMBER; idx++) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3301      	adds	r3, #1
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	ddf0      	ble.n	800326a <aiInit+0x16>
  }

  /* Discover and initialize the network(s) ------------------------ */
  printf("Discovering the network(s)...\r\n");
 8003288:	4817      	ldr	r0, [pc, #92]	; (80032e8 <aiInit+0x94>)
 800328a:	f003 fe21 	bl	8006ed0 <puts>

  idx = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
  do {
    nn_name = ai_mnetwork_find(NULL, idx);
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	2000      	movs	r0, #0
 8003296:	f001 fa05 	bl	80046a4 <ai_mnetwork_find>
 800329a:	60b8      	str	r0, [r7, #8]
    if (nn_name) {
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d014      	beq.n	80032cc <aiInit+0x78>
      printf("\r\nFound network \"%s\"\r\n", nn_name);
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	4811      	ldr	r0, [pc, #68]	; (80032ec <aiInit+0x98>)
 80032a6:	f003 fd9f 	bl	8006de8 <iprintf>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4a0b      	ldr	r2, [pc, #44]	; (80032e4 <aiInit+0x90>)
 80032b6:	4413      	add	r3, r2
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7ff ff1a 	bl	80030f4 <aiBootstrap>
 80032c0:	60f8      	str	r0, [r7, #12]
      if (res)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <aiInit+0x78>
        nn_name = NULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60bb      	str	r3, [r7, #8]
    }
    idx++;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3301      	adds	r3, #1
 80032d0:	607b      	str	r3, [r7, #4]
  } while (nn_name);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1dc      	bne.n	8003292 <aiInit+0x3e>

  return res;
 80032d8:	68fb      	ldr	r3, [r7, #12]
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000ebc 	.word	0x20000ebc
 80032e8:	08008e44 	.word	0x08008e44
 80032ec:	08008e64 	.word	0x08008e64

080032f0 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  printf("\r\n#\r\n");
 80032f4:	480c      	ldr	r0, [pc, #48]	; (8003328 <aiSystemPerformanceInit+0x38>)
 80032f6:	f003 fdeb 	bl	8006ed0 <puts>
  printf("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 80032fa:	2301      	movs	r3, #1
 80032fc:	2205      	movs	r2, #5
 80032fe:	490b      	ldr	r1, [pc, #44]	; (800332c <aiSystemPerformanceInit+0x3c>)
 8003300:	480b      	ldr	r0, [pc, #44]	; (8003330 <aiSystemPerformanceInit+0x40>)
 8003302:	f003 fd71 	bl	8006de8 <iprintf>
      _APP_VERSION_MINOR_ );
  printf("#\r\n");
 8003306:	480b      	ldr	r0, [pc, #44]	; (8003334 <aiSystemPerformanceInit+0x44>)
 8003308:	f003 fde2 	bl	8006ed0 <puts>

  systemSettingLog();
 800330c:	f000 fe14 	bl	8003f38 <systemSettingLog>

  cyclesCounterInit();
 8003310:	f7ff fed2 	bl	80030b8 <cyclesCounterInit>

  aiInit();
 8003314:	f7ff ff9e 	bl	8003254 <aiInit>

  srand(3); /* deterministic outcome */
 8003318:	2003      	movs	r0, #3
 800331a:	f003 fde1 	bl	8006ee0 <srand>

  dwtReset();
 800331e:	f7ff febf 	bl	80030a0 <dwtReset>
  return 0;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	080093c4 	.word	0x080093c4
 800332c:	080093cc 	.word	0x080093cc
 8003330:	080093f0 	.word	0x080093f0
 8003334:	08009400 	.word	0x08009400

08003338 <aiPlatformVersion>:
#include <aiTestHelper.h>

#include <ai_platform_interface.h>

void aiPlatformVersion(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af04      	add	r7, sp, #16
  printf("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 800333e:	2300      	movs	r3, #0
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	2302      	movs	r3, #2
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2305      	movs	r3, #5
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	2201      	movs	r2, #1
 800334e:	2101      	movs	r1, #1
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <aiPlatformVersion+0x24>)
 8003352:	f003 fd49 	bl	8006de8 <iprintf>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      AI_PLATFORM_RUNTIME_MAJOR,
      AI_PLATFORM_RUNTIME_MINOR,
      AI_PLATFORM_RUNTIME_MICRO);
}
 8003356:	bf00      	nop
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	08009564 	.word	0x08009564

08003360 <aiLogErr>:
{
  return buffer->height * buffer->width * buffer->channels;
}

void aiLogErr(const ai_error err, const char *fct)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  if (fct)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d009      	beq.n	8003384 <aiLogErr+0x24>
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8003370:	793b      	ldrb	r3, [r7, #4]
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8003372:	461a      	mov	r2, r3
        err.type, err.code);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 800337a:	6839      	ldr	r1, [r7, #0]
 800337c:	4808      	ldr	r0, [pc, #32]	; (80033a0 <aiLogErr+0x40>)
 800337e:	f003 fd33 	bl	8006de8 <iprintf>
  else
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8003382:	e008      	b.n	8003396 <aiLogErr+0x36>
    printf("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003384:	793b      	ldrb	r3, [r7, #4]
 8003386:	4619      	mov	r1, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800338e:	461a      	mov	r2, r3
 8003390:	4804      	ldr	r0, [pc, #16]	; (80033a4 <aiLogErr+0x44>)
 8003392:	f003 fd29 	bl	8006de8 <iprintf>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	08009598 	.word	0x08009598
 80033a4:	080095c8 	.word	0x080095c8

080033a8 <aiPrintLayoutBuffer>:


void aiPrintLayoutBuffer(const char *msg, int idx,
    const ai_buffer* buffer)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08a      	sub	sp, #40	; 0x28
 80033ac:	af02      	add	r7, sp, #8
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t type_id = AI_BUFFER_FMT_GET_TYPE(buffer->format);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	145b      	asrs	r3, r3, #17
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	61fb      	str	r3, [r7, #28]
  printf("%s[%d] ",msg, idx);
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	4897      	ldr	r0, [pc, #604]	; (8003624 <aiPrintLayoutBuffer+0x27c>)
 80033c6:	f003 fd0f 	bl	8006de8 <iprintf>
  if (type_id == AI_BUFFER_FMT_TYPE_Q) {
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	f040 818d 	bne.w	80036ec <aiPrintLayoutBuffer+0x344>
    printf(" %s%d,",
        AI_BUFFER_FMT_GET_SIGN(buffer->format)?"s":"u",
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    printf(" %s%d,",
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <aiPrintLayoutBuffer+0x3a>
 80033de:	4992      	ldr	r1, [pc, #584]	; (8003628 <aiPrintLayoutBuffer+0x280>)
 80033e0:	e000      	b.n	80033e4 <aiPrintLayoutBuffer+0x3c>
 80033e2:	4992      	ldr	r1, [pc, #584]	; (800362c <aiPrintLayoutBuffer+0x284>)
            (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	11db      	asrs	r3, r3, #7
    printf(" %s%d,",
 80033ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ee:	461a      	mov	r2, r3
 80033f0:	488f      	ldr	r0, [pc, #572]	; (8003630 <aiPrintLayoutBuffer+0x288>)
 80033f2:	f003 fcf9 	bl	8006de8 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8158 	beq.w	80036b0 <aiPrintLayoutBuffer+0x308>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b00      	cmp	r3, #0
 800340c:	f000 8150 	beq.w	80036b0 <aiPrintLayoutBuffer+0x308>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 814a 	beq.w	80036b0 <aiPrintLayoutBuffer+0x308>
      ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, 0);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d058      	beq.n	80034d6 <aiPrintLayoutBuffer+0x12e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d051      	beq.n	80034d6 <aiPrintLayoutBuffer+0x12e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d04c      	beq.n	80034d6 <aiPrintLayoutBuffer+0x12e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	695b      	ldr	r3, [r3, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d045      	beq.n	80034d0 <aiPrintLayoutBuffer+0x128>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b00      	cmp	r3, #0
 8003450:	d03e      	beq.n	80034d0 <aiPrintLayoutBuffer+0x128>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d039      	beq.n	80034d0 <aiPrintLayoutBuffer+0x128>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <aiPrintLayoutBuffer+0xd2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <aiPrintLayoutBuffer+0xd2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	e000      	b.n	800347c <aiPrintLayoutBuffer+0xd4>
 800347a:	2300      	movs	r3, #0
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d026      	beq.n	80034d0 <aiPrintLayoutBuffer+0x128>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d00a      	beq.n	80034a0 <aiPrintLayoutBuffer+0xf8>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <aiPrintLayoutBuffer+0xf8>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	e000      	b.n	80034a2 <aiPrintLayoutBuffer+0xfa>
 80034a0:	2300      	movs	r3, #0
 80034a2:	885b      	ldrh	r3, [r3, #2]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <aiPrintLayoutBuffer+0x128>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	695b      	ldr	r3, [r3, #20]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <aiPrintLayoutBuffer+0x11e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <aiPrintLayoutBuffer+0x11e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	e000      	b.n	80034c8 <aiPrintLayoutBuffer+0x120>
 80034c6:	2300      	movs	r3, #0
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	e004      	b.n	80034da <aiPrintLayoutBuffer+0x132>
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	e001      	b.n	80034da <aiPrintLayoutBuffer+0x132>
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
      int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, 0);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 80d6 	beq.w	8003692 <aiPrintLayoutBuffer+0x2ea>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80ce 	beq.w	8003692 <aiPrintLayoutBuffer+0x2ea>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80c8 	beq.w	8003692 <aiPrintLayoutBuffer+0x2ea>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d06c      	beq.n	80035e4 <aiPrintLayoutBuffer+0x23c>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d065      	beq.n	80035e4 <aiPrintLayoutBuffer+0x23c>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d060      	beq.n	80035e4 <aiPrintLayoutBuffer+0x23c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <aiPrintLayoutBuffer+0x198>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d003      	beq.n	8003540 <aiPrintLayoutBuffer+0x198>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	e000      	b.n	8003542 <aiPrintLayoutBuffer+0x19a>
 8003540:	2300      	movs	r3, #0
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d04b      	beq.n	80035e4 <aiPrintLayoutBuffer+0x23c>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d045      	beq.n	80035e0 <aiPrintLayoutBuffer+0x238>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03e      	beq.n	80035e0 <aiPrintLayoutBuffer+0x238>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d039      	beq.n	80035e0 <aiPrintLayoutBuffer+0x238>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <aiPrintLayoutBuffer+0x1e2>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <aiPrintLayoutBuffer+0x1e2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	e000      	b.n	800358c <aiPrintLayoutBuffer+0x1e4>
 800358a:	2300      	movs	r3, #0
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d026      	beq.n	80035e0 <aiPrintLayoutBuffer+0x238>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <aiPrintLayoutBuffer+0x208>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <aiPrintLayoutBuffer+0x208>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	e000      	b.n	80035b2 <aiPrintLayoutBuffer+0x20a>
 80035b0:	2300      	movs	r3, #0
 80035b2:	885b      	ldrh	r3, [r3, #2]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d013      	beq.n	80035e0 <aiPrintLayoutBuffer+0x238>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <aiPrintLayoutBuffer+0x22e>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <aiPrintLayoutBuffer+0x22e>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	e000      	b.n	80035d8 <aiPrintLayoutBuffer+0x230>
 80035d6:	2300      	movs	r3, #0
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	e057      	b.n	8003690 <aiPrintLayoutBuffer+0x2e8>
 80035e0:	2300      	movs	r3, #0
 80035e2:	e055      	b.n	8003690 <aiPrintLayoutBuffer+0x2e8>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d04f      	beq.n	800368c <aiPrintLayoutBuffer+0x2e4>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d048      	beq.n	800368c <aiPrintLayoutBuffer+0x2e4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d043      	beq.n	800368c <aiPrintLayoutBuffer+0x2e4>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <aiPrintLayoutBuffer+0x28c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00c      	beq.n	8003634 <aiPrintLayoutBuffer+0x28c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	e009      	b.n	8003636 <aiPrintLayoutBuffer+0x28e>
 8003622:	bf00      	nop
 8003624:	080095f0 	.word	0x080095f0
 8003628:	080095f8 	.word	0x080095f8
 800362c:	080095fc 	.word	0x080095fc
 8003630:	08009600 	.word	0x08009600
 8003634:	2300      	movs	r3, #0
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d027      	beq.n	800368c <aiPrintLayoutBuffer+0x2e4>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <aiPrintLayoutBuffer+0x2b2>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <aiPrintLayoutBuffer+0x2b2>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	e000      	b.n	800365c <aiPrintLayoutBuffer+0x2b4>
 800365a:	2300      	movs	r3, #0
 800365c:	885b      	ldrh	r3, [r3, #2]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <aiPrintLayoutBuffer+0x2e4>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <aiPrintLayoutBuffer+0x2d8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <aiPrintLayoutBuffer+0x2d8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	e000      	b.n	8003682 <aiPrintLayoutBuffer+0x2da>
 8003680:	2300      	movs	r3, #0
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f993 3000 	ldrsb.w	r3, [r3]
 800368a:	e001      	b.n	8003690 <aiPrintLayoutBuffer+0x2e8>
 800368c:	2300      	movs	r3, #0
 800368e:	e001      	b.n	8003694 <aiPrintLayoutBuffer+0x2ec>
 8003690:	e000      	b.n	8003694 <aiPrintLayoutBuffer+0x2ec>
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
      printf(" scale=%f, zero=%d,", scale, zero_point);
 8003696:	69b8      	ldr	r0, [r7, #24]
 8003698:	f7fc ff5e 	bl	8000558 <__aeabi_f2d>
 800369c:	460a      	mov	r2, r1
 800369e:	4601      	mov	r1, r0
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	460a      	mov	r2, r1
 80036a8:	4833      	ldr	r0, [pc, #204]	; (8003778 <aiPrintLayoutBuffer+0x3d0>)
 80036aa:	f003 fb9d 	bl	8006de8 <iprintf>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80036ae:	e02d      	b.n	800370c <aiPrintLayoutBuffer+0x364>
    } else {
      printf("Q%d.%d,",
          (int)AI_BUFFER_FMT_GET_BITS(buffer->format)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	11db      	asrs	r3, r3, #7
 80036b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036c4:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
              (int)AI_BUFFER_FMT_GET_SIGN(buffer->format)),
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	15db      	asrs	r3, r3, #23
 80036ce:	f003 0301 	and.w	r3, r3, #1
          - ((int)AI_BUFFER_FMT_GET_FBITS(buffer->format) +
 80036d2:	440b      	add	r3, r1
      printf("Q%d.%d,",
 80036d4:	1ad1      	subs	r1, r2, r3
              AI_BUFFER_FMT_GET_FBITS(buffer->format));
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      printf("Q%d.%d,",
 80036e0:	3b40      	subs	r3, #64	; 0x40
 80036e2:	461a      	mov	r2, r3
 80036e4:	4825      	ldr	r0, [pc, #148]	; (800377c <aiPrintLayoutBuffer+0x3d4>)
 80036e6:	f003 fb7f 	bl	8006de8 <iprintf>
 80036ea:	e00f      	b.n	800370c <aiPrintLayoutBuffer+0x364>
    }
  }
  else if (type_id == AI_BUFFER_FMT_TYPE_FLOAT)
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d109      	bne.n	8003706 <aiPrintLayoutBuffer+0x35e>
    printf(" float%d,",
        (int)AI_BUFFER_FMT_GET_BITS(buffer->format));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	11db      	asrs	r3, r3, #7
    printf(" float%d,",
 80036f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036fc:	4619      	mov	r1, r3
 80036fe:	4820      	ldr	r0, [pc, #128]	; (8003780 <aiPrintLayoutBuffer+0x3d8>)
 8003700:	f003 fb72 	bl	8006de8 <iprintf>
 8003704:	e002      	b.n	800370c <aiPrintLayoutBuffer+0x364>
  else
    printf("NONE");
 8003706:	481f      	ldr	r0, [pc, #124]	; (8003784 <aiPrintLayoutBuffer+0x3dc>)
 8003708:	f003 fb6e 	bl	8006de8 <iprintf>
  printf(" %d bytes, shape=(%d,%d,%d)",
      (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), buffer->format),
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	891b      	ldrh	r3, [r3, #8]
 8003710:	461a      	mov	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	88db      	ldrh	r3, [r3, #6]
 8003716:	fb03 f302 	mul.w	r3, r3, r2
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	fb03 f302 	mul.w	r3, r3, r2
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6812      	ldr	r2, [r2, #0]
 8003728:	11d2      	asrs	r2, r2, #7
 800372a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800372e:	fb02 f303 	mul.w	r3, r2, r3
 8003732:	3304      	adds	r3, #4
 8003734:	08db      	lsrs	r3, r3, #3
  printf(" %d bytes, shape=(%d,%d,%d)",
 8003736:	4619      	mov	r1, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	88db      	ldrh	r3, [r3, #6]
  printf(" %d bytes, shape=(%d,%d,%d)",
 800373c:	461a      	mov	r2, r3
      buffer->height, buffer->width, (int)buffer->channels);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	891b      	ldrh	r3, [r3, #8]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8003742:	4618      	mov	r0, r3
      buffer->height, buffer->width, (int)buffer->channels);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
  printf(" %d bytes, shape=(%d,%d,%d)",
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	4603      	mov	r3, r0
 800374c:	480e      	ldr	r0, [pc, #56]	; (8003788 <aiPrintLayoutBuffer+0x3e0>)
 800374e:	f003 fb4b 	bl	8006de8 <iprintf>
  if (buffer->data)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d006      	beq.n	8003768 <aiPrintLayoutBuffer+0x3c0>
    printf(" (@0x%08x)\r\n", (int)buffer->data);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	4619      	mov	r1, r3
 8003760:	480a      	ldr	r0, [pc, #40]	; (800378c <aiPrintLayoutBuffer+0x3e4>)
 8003762:	f003 fb41 	bl	8006de8 <iprintf>
  else
    printf(" (USER domain)\r\n");
}
 8003766:	e002      	b.n	800376e <aiPrintLayoutBuffer+0x3c6>
    printf(" (USER domain)\r\n");
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <aiPrintLayoutBuffer+0x3e8>)
 800376a:	f003 fbb1 	bl	8006ed0 <puts>
}
 800376e:	bf00      	nop
 8003770:	3720      	adds	r7, #32
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	08009608 	.word	0x08009608
 800377c:	0800961c 	.word	0x0800961c
 8003780:	08009624 	.word	0x08009624
 8003784:	08009630 	.word	0x08009630
 8003788:	08009638 	.word	0x08009638
 800378c:	08009654 	.word	0x08009654
 8003790:	08009664 	.word	0x08009664

08003794 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  int i;
  printf("Network informations...\r\n");
 800379c:	485b      	ldr	r0, [pc, #364]	; (800390c <aiPrintNetworkInfo+0x178>)
 800379e:	f003 fb97 	bl	8006ed0 <puts>
  printf(" model name         : %s\r\n", report->model_name);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4619      	mov	r1, r3
 80037a8:	4859      	ldr	r0, [pc, #356]	; (8003910 <aiPrintNetworkInfo+0x17c>)
 80037aa:	f003 fb1d 	bl	8006de8 <iprintf>
  printf(" model signature    : %s\r\n", report->model_signature);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	4619      	mov	r1, r3
 80037b4:	4857      	ldr	r0, [pc, #348]	; (8003914 <aiPrintNetworkInfo+0x180>)
 80037b6:	f003 fb17 	bl	8006de8 <iprintf>
  printf(" model datetime     : %s\r\n", report->model_datetime);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4619      	mov	r1, r3
 80037c0:	4855      	ldr	r0, [pc, #340]	; (8003918 <aiPrintNetworkInfo+0x184>)
 80037c2:	f003 fb11 	bl	8006de8 <iprintf>
  printf(" compile datetime   : %s\r\n", report->compile_datetime);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	4619      	mov	r1, r3
 80037cc:	4853      	ldr	r0, [pc, #332]	; (800391c <aiPrintNetworkInfo+0x188>)
 80037ce:	f003 fb0b 	bl	8006de8 <iprintf>
  printf(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7d1b      	ldrb	r3, [r3, #20]
  printf(" runtime version    : %d.%d.%d\r\n",
 80037d6:	4619      	mov	r1, r3
      report->runtime_version.minor,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	7d5b      	ldrb	r3, [r3, #21]
  printf(" runtime version    : %d.%d.%d\r\n",
 80037dc:	461a      	mov	r2, r3
      report->runtime_version.micro);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7d9b      	ldrb	r3, [r3, #22]
  printf(" runtime version    : %d.%d.%d\r\n",
 80037e2:	484f      	ldr	r0, [pc, #316]	; (8003920 <aiPrintNetworkInfo+0x18c>)
 80037e4:	f003 fb00 	bl	8006de8 <iprintf>
  if (report->tool_revision[0])
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00c      	beq.n	800380c <aiPrintNetworkInfo+0x78>
    printf(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <aiPrintNetworkInfo+0x6e>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	e000      	b.n	8003804 <aiPrintNetworkInfo+0x70>
 8003802:	4b48      	ldr	r3, [pc, #288]	; (8003924 <aiPrintNetworkInfo+0x190>)
 8003804:	4619      	mov	r1, r3
 8003806:	4848      	ldr	r0, [pc, #288]	; (8003928 <aiPrintNetworkInfo+0x194>)
 8003808:	f003 faee 	bl	8006de8 <iprintf>
  printf(" tools version      : %d.%d.%d\r\n",
      report->tool_version.major,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7f1b      	ldrb	r3, [r3, #28]
  printf(" tools version      : %d.%d.%d\r\n",
 8003810:	4619      	mov	r1, r3
      report->tool_version.minor,
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	7f5b      	ldrb	r3, [r3, #29]
  printf(" tools version      : %d.%d.%d\r\n",
 8003816:	461a      	mov	r2, r3
      report->tool_version.micro);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	7f9b      	ldrb	r3, [r3, #30]
  printf(" tools version      : %d.%d.%d\r\n",
 800381c:	4843      	ldr	r0, [pc, #268]	; (800392c <aiPrintNetworkInfo+0x198>)
 800381e:	f003 fae3 	bl	8006de8 <iprintf>
  printf(" complexity         : %d MACC\r\n", (int)report->n_macc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003826:	4619      	mov	r1, r3
 8003828:	4841      	ldr	r0, [pc, #260]	; (8003930 <aiPrintNetworkInfo+0x19c>)
 800382a:	f003 fadd 	bl	8006de8 <iprintf>
  printf(" c-nodes            : %d\r\n", (int)report->n_nodes);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003832:	4619      	mov	r1, r3
 8003834:	483f      	ldr	r0, [pc, #252]	; (8003934 <aiPrintNetworkInfo+0x1a0>)
 8003836:	f003 fad7 	bl	8006de8 <iprintf>
  printf(" activations        : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003848:	fb03 f302 	mul.w	r3, r3, r2
 800384c:	461a      	mov	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003852:	fb03 f302 	mul.w	r3, r3, r2
  printf(" activations        : %d bytes (0x%08x)\r\n",
 8003856:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->activations), (int)report->activations.data);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  printf(" activations        : %d bytes (0x%08x)\r\n",
 800385c:	461a      	mov	r2, r3
 800385e:	4836      	ldr	r0, [pc, #216]	; (8003938 <aiPrintNetworkInfo+0x1a4>)
 8003860:	f003 fac2 	bl	8006de8 <iprintf>
  printf(" weights            : %d bytes (0x%08x)\r\n",
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800386a:	461a      	mov	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003872:	fb03 f302 	mul.w	r3, r3, r2
 8003876:	461a      	mov	r2, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	fb03 f302 	mul.w	r3, r3, r2
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8003880:	4619      	mov	r1, r3
      (int)AI_BUFFER_SIZE(&report->params), (int)report->params.data);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  printf(" weights            : %d bytes (0x%08x)\r\n",
 8003886:	461a      	mov	r2, r3
 8003888:	482c      	ldr	r0, [pc, #176]	; (800393c <aiPrintNetworkInfo+0x1a8>)
 800388a:	f003 faad 	bl	8006de8 <iprintf>
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003892:	4619      	mov	r1, r3
      report->n_outputs);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
  printf(" inputs/outputs     : %u/%u\r\n", report->n_inputs,
 8003898:	461a      	mov	r2, r3
 800389a:	4829      	ldr	r0, [pc, #164]	; (8003940 <aiPrintNetworkInfo+0x1ac>)
 800389c:	f003 faa4 	bl	8006de8 <iprintf>
  for (i=0; i<report->n_inputs; i++)
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	e00f      	b.n	80038c6 <aiPrintNetworkInfo+0x132>
    aiPrintLayoutBuffer("  I", i, &report->inputs[i]);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	461a      	mov	r2, r3
 80038b8:	68f9      	ldr	r1, [r7, #12]
 80038ba:	4822      	ldr	r0, [pc, #136]	; (8003944 <aiPrintNetworkInfo+0x1b0>)
 80038bc:	f7ff fd74 	bl	80033a8 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_inputs; i++)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4293      	cmp	r3, r2
 80038d0:	dbe9      	blt.n	80038a6 <aiPrintNetworkInfo+0x112>
  for (i=0; i<report->n_outputs; i++)
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	e00f      	b.n	80038f8 <aiPrintNetworkInfo+0x164>
    aiPrintLayoutBuffer("  O", i, &report->outputs[i]);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4613      	mov	r3, r2
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	461a      	mov	r2, r3
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	4816      	ldr	r0, [pc, #88]	; (8003948 <aiPrintNetworkInfo+0x1b4>)
 80038ee:	f7ff fd5b 	bl	80033a8 <aiPrintLayoutBuffer>
  for (i=0; i<report->n_outputs; i++)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	3301      	adds	r3, #1
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038fc:	461a      	mov	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4293      	cmp	r3, r2
 8003902:	dbe9      	blt.n	80038d8 <aiPrintNetworkInfo+0x144>
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	08009674 	.word	0x08009674
 8003910:	08009690 	.word	0x08009690
 8003914:	080096ac 	.word	0x080096ac
 8003918:	080096c8 	.word	0x080096c8
 800391c:	080096e4 	.word	0x080096e4
 8003920:	08009700 	.word	0x08009700
 8003924:	08009724 	.word	0x08009724
 8003928:	08009728 	.word	0x08009728
 800392c:	08009744 	.word	0x08009744
 8003930:	08009768 	.word	0x08009768
 8003934:	08009788 	.word	0x08009788
 8003938:	080097a4 	.word	0x080097a4
 800393c:	080097d0 	.word	0x080097d0
 8003940:	080097fc 	.word	0x080097fc
 8003944:	0800981c 	.word	0x0800981c
 8003948:	08009820 	.word	0x08009820

0800394c <dwtReset>:
__STATIC_INLINE void dwtReset(void) {
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear DWT cycle counter */
 8003950:	4b03      	ldr	r3, [pc, #12]	; (8003960 <dwtReset+0x14>)
 8003952:	2200      	movs	r2, #0
 8003954:	605a      	str	r2, [r3, #4]
}
 8003956:	bf00      	nop
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e0001000 	.word	0xe0001000

08003964 <dwtGetCycles>:
__STATIC_INLINE  uint32_t dwtGetCycles(void) {
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return DWT->CYCCNT;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <dwtGetCycles+0x14>)
 800396a:	685b      	ldr	r3, [r3, #4]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	e0001000 	.word	0xe0001000

0800397c <_write>:
#if defined(__GNUC__) && !defined(__ARMCC_VERSION)

int _write(int fd, const void *buff, int count);

int _write(int fd, const void *buff, int count)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;

  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	da0d      	bge.n	80039aa <_write+0x2e>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d00a      	beq.n	80039aa <_write+0x2e>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b02      	cmp	r3, #2
 8003998:	d007      	beq.n	80039aa <_write+0x2e>
    errno = EBADF;
 800399a:	f002 fb61 	bl	8006060 <__errno>
 800399e:	4602      	mov	r2, r0
 80039a0:	2309      	movs	r3, #9
 80039a2:	6013      	str	r3, [r2, #0]
    return -1;
 80039a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039a8:	e016      	b.n	80039d8 <_write+0x5c>
  }

  if (_ioWriteAllowed)
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <_write+0x64>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <_write+0x4c>
    status = HAL_UART_Transmit(&UartHandle, (uint8_t *)buff, count,
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	4809      	ldr	r0, [pc, #36]	; (80039e4 <_write+0x68>)
 80039be:	f7fe ff10 	bl	80027e2 <HAL_UART_Transmit>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]
 80039c6:	e001      	b.n	80039cc <_write+0x50>
        HAL_MAX_DELAY);
  else
    status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	75fb      	strb	r3, [r7, #23]

  return (status == HAL_OK ? count : 0);
 80039cc:	7dfb      	ldrb	r3, [r7, #23]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <_write+0x5a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	e000      	b.n	80039d8 <_write+0x5c>
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	20000039 	.word	0x20000039
 80039e4:	20001314 	.word	0x20001314

080039e8 <crcIpInit>:
 */

struct cyclesCount cyclesCount;

__STATIC_INLINE void crcIpInit(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  if (!__HAL_RCC_CRC_IS_CLK_ENABLED())
 80039ee:	4b0d      	ldr	r3, [pc, #52]	; (8003a24 <crcIpInit+0x3c>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <crcIpInit+0x18>
    printf("W: CRC IP clock is NOT enabled\r\n");
 80039fa:	480b      	ldr	r0, [pc, #44]	; (8003a28 <crcIpInit+0x40>)
 80039fc:	f003 fa68 	bl	8006ed0 <puts>

  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003a00:	2300      	movs	r3, #0
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	4b07      	ldr	r3, [pc, #28]	; (8003a24 <crcIpInit+0x3c>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <crcIpInit+0x3c>)
 8003a0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a10:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <crcIpInit+0x3c>)
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
#endif
}
 8003a1c:	bf00      	nop
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40023800 	.word	0x40023800
 8003a28:	0800988c 	.word	0x0800988c

08003a2c <dwtIpInit>:

void dwtIpInit(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <dwtIpInit+0x30>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <dwtIpInit+0x30>)
 8003a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a3a:	60d3      	str	r3, [r2, #12]

#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
#endif

  DWT->CYCCNT = 0;
 8003a3c:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <dwtIpInit+0x34>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk | DWT_CTRL_CPIEVTENA_Msk;
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <dwtIpInit+0x34>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a06      	ldr	r2, [pc, #24]	; (8003a60 <dwtIpInit+0x34>)
 8003a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6013      	str	r3, [r2, #0]

}
 8003a52:	bf00      	nop
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000edf0 	.word	0xe000edf0
 8003a60:	e0001000 	.word	0xe0001000

08003a64 <systemCoreClock>:

uint32_t systemCoreClock(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
#if defined(STM32MP1)
  return HAL_RCC_GetSystemCoreClockFreq();
#elif !defined(STM32H7)
  return HAL_RCC_GetHCLKFreq();
 8003a68:	f7fe fe3a 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4603      	mov	r3, r0
#else
  return HAL_RCC_GetSysClockFreq();
#endif
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <dwtCyclesToTime>:

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003a72:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a76:	b08d      	sub	sp, #52	; 0x34
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  if (!t)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d102      	bne.n	8003a8c <dwtCyclesToTime+0x1a>
    return -1;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a8a:	e120      	b.n	8003cce <dwtCyclesToTime+0x25c>
  uint32_t fcpu = systemCoreClock();
 8003a8c:	f7ff ffea 	bl	8003a64 <systemCoreClock>
 8003a90:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint64_t s  = clks / fcpu;
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	461a      	mov	r2, r3
 8003a9a:	4623      	mov	r3, r4
 8003a9c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003aa0:	f7fd f88a 	bl	8000bb8 <__aeabi_uldivmod>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  uint64_t ms = (clks * 1000) / fcpu;
 8003aac:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	4634      	mov	r4, r6
 8003ab4:	f04f 0100 	mov.w	r1, #0
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	0162      	lsls	r2, r4, #5
 8003abe:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003ac2:	0159      	lsls	r1, r3, #5
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	4614      	mov	r4, r2
 8003ac8:	1b5b      	subs	r3, r3, r5
 8003aca:	eb64 0406 	sbc.w	r4, r4, r6
 8003ace:	f04f 0100 	mov.w	r1, #0
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	00a2      	lsls	r2, r4, #2
 8003ad8:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003adc:	0099      	lsls	r1, r3, #2
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	195b      	adds	r3, r3, r5
 8003ae4:	eb44 0406 	adc.w	r4, r4, r6
 8003ae8:	f04f 0100 	mov.w	r1, #0
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	00e2      	lsls	r2, r4, #3
 8003af2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003af6:	00d9      	lsls	r1, r3, #3
 8003af8:	460b      	mov	r3, r1
 8003afa:	4614      	mov	r4, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	4621      	mov	r1, r4
 8003b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b02:	f04f 0400 	mov.w	r4, #0
 8003b06:	461a      	mov	r2, r3
 8003b08:	4623      	mov	r3, r4
 8003b0a:	f7fd f855 	bl	8000bb8 <__aeabi_uldivmod>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	e9c7 3406 	strd	r3, r4, [r7, #24]
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003b16:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	4634      	mov	r4, r6
 8003b1e:	f04f 0100 	mov.w	r1, #0
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	0162      	lsls	r2, r4, #5
 8003b28:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003b2c:	0159      	lsls	r1, r3, #5
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4614      	mov	r4, r2
 8003b32:	1b5b      	subs	r3, r3, r5
 8003b34:	eb64 0406 	sbc.w	r4, r4, r6
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	0262      	lsls	r2, r4, #9
 8003b42:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003b46:	0259      	lsls	r1, r3, #9
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	195b      	adds	r3, r3, r5
 8003b4e:	eb44 0406 	adc.w	r4, r4, r6
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	01a2      	lsls	r2, r4, #6
 8003b5c:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8003b60:	0199      	lsls	r1, r3, #6
 8003b62:	1ac9      	subs	r1, r1, r3
 8003b64:	eb62 0204 	sbc.w	r2, r2, r4
 8003b68:	194b      	adds	r3, r1, r5
 8003b6a:	eb42 0406 	adc.w	r4, r2, r6
 8003b6e:	4618      	mov	r0, r3
 8003b70:	4621      	mov	r1, r4
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	f04f 0400 	mov.w	r4, #0
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	f7fd f81c 	bl	8000bb8 <__aeabi_uldivmod>
 8003b80:	4603      	mov	r3, r0
 8003b82:	460c      	mov	r4, r1
 8003b84:	e9c7 3404 	strd	r3, r4, [r7, #16]
  ms -= (s * 1000);
 8003b88:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8003b8c:	462b      	mov	r3, r5
 8003b8e:	4634      	mov	r4, r6
 8003b90:	f04f 0100 	mov.w	r1, #0
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	0162      	lsls	r2, r4, #5
 8003b9a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003b9e:	0159      	lsls	r1, r3, #5
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4614      	mov	r4, r2
 8003ba4:	1b5b      	subs	r3, r3, r5
 8003ba6:	eb64 0406 	sbc.w	r4, r4, r6
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	00a2      	lsls	r2, r4, #2
 8003bb4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003bb8:	0099      	lsls	r1, r3, #2
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4614      	mov	r4, r2
 8003bbe:	195b      	adds	r3, r3, r5
 8003bc0:	eb44 0406 	adc.w	r4, r4, r6
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	00e2      	lsls	r2, r4, #3
 8003bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bd2:	00d9      	lsls	r1, r3, #3
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4614      	mov	r4, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4622      	mov	r2, r4
 8003bdc:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003be0:	1a5b      	subs	r3, r3, r1
 8003be2:	eb64 0402 	sbc.w	r4, r4, r2
 8003be6:	461d      	mov	r5, r3
 8003be8:	4626      	mov	r6, r4
 8003bea:	e9c7 5606 	strd	r5, r6, [r7, #24]
  us -= (ms * 1000 + s * 1000000);
 8003bee:	e9d7 5606 	ldrd	r5, r6, [r7, #24]
 8003bf2:	462b      	mov	r3, r5
 8003bf4:	4634      	mov	r4, r6
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	0162      	lsls	r2, r4, #5
 8003c00:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c04:	0159      	lsls	r1, r3, #5
 8003c06:	460b      	mov	r3, r1
 8003c08:	4614      	mov	r4, r2
 8003c0a:	1b5b      	subs	r3, r3, r5
 8003c0c:	eb64 0406 	sbc.w	r4, r4, r6
 8003c10:	f04f 0100 	mov.w	r1, #0
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	00a2      	lsls	r2, r4, #2
 8003c1a:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8003c1e:	0099      	lsls	r1, r3, #2
 8003c20:	460b      	mov	r3, r1
 8003c22:	4614      	mov	r4, r2
 8003c24:	195b      	adds	r3, r3, r5
 8003c26:	eb44 0406 	adc.w	r4, r4, r6
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	00e2      	lsls	r2, r4, #3
 8003c34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c38:	00d9      	lsls	r1, r3, #3
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4614      	mov	r4, r2
 8003c3e:	4698      	mov	r8, r3
 8003c40:	46a1      	mov	r9, r4
 8003c42:	e9d7 5608 	ldrd	r5, r6, [r7, #32]
 8003c46:	462b      	mov	r3, r5
 8003c48:	4634      	mov	r4, r6
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	0162      	lsls	r2, r4, #5
 8003c54:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c58:	0159      	lsls	r1, r3, #5
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4614      	mov	r4, r2
 8003c5e:	1b5b      	subs	r3, r3, r5
 8003c60:	eb64 0406 	sbc.w	r4, r4, r6
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	0262      	lsls	r2, r4, #9
 8003c6e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003c72:	0259      	lsls	r1, r3, #9
 8003c74:	460b      	mov	r3, r1
 8003c76:	4614      	mov	r4, r2
 8003c78:	195b      	adds	r3, r3, r5
 8003c7a:	eb44 0406 	adc.w	r4, r4, r6
 8003c7e:	f04f 0100 	mov.w	r1, #0
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	01a2      	lsls	r2, r4, #6
 8003c88:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
 8003c8c:	0199      	lsls	r1, r3, #6
 8003c8e:	1ac9      	subs	r1, r1, r3
 8003c90:	eb62 0204 	sbc.w	r2, r2, r4
 8003c94:	194b      	adds	r3, r1, r5
 8003c96:	eb42 0406 	adc.w	r4, r2, r6
 8003c9a:	eb13 0508 	adds.w	r5, r3, r8
 8003c9e:	eb44 0609 	adc.w	r6, r4, r9
 8003ca2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4614      	mov	r4, r2
 8003caa:	1b5b      	subs	r3, r3, r5
 8003cac:	eb64 0406 	sbc.w	r4, r4, r6
 8003cb0:	e9c7 3404 	strd	r3, r4, [r7, #16]
  t->fcpu = fcpu;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb8:	601a      	str	r2, [r3, #0]
  t->s = s;
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	605a      	str	r2, [r3, #4]
  t->ms = ms;
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	609a      	str	r2, [r3, #8]
  t->us = us;
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	60da      	str	r2, [r3, #12]
  return 0;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3734      	adds	r7, #52	; 0x34
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003cd8 <devIdToStr>:
  res = ((float)clks * (float)1000.0) / fcpu;
  return res;
}

__STATIC_INLINE const char *devIdToStr(uint16_t dev_id)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	80fb      	strh	r3, [r7, #6]
  /* DEV_ID field from DBGMCU register */
  const char *str;
  switch (dev_id) {
 8003ce2:	88fb      	ldrh	r3, [r7, #6]
 8003ce4:	f2a3 4315 	subw	r3, r3, #1045	; 0x415
 8003ce8:	2b5d      	cmp	r3, #93	; 0x5d
 8003cea:	f200 80e9 	bhi.w	8003ec0 <devIdToStr+0x1e8>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <devIdToStr+0x1c>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003e9d 	.word	0x08003e9d
 8003cf8:	08003ec1 	.word	0x08003ec1
 8003cfc:	08003ec1 	.word	0x08003ec1
 8003d00:	08003ec1 	.word	0x08003ec1
 8003d04:	08003ec1 	.word	0x08003ec1
 8003d08:	08003ec1 	.word	0x08003ec1
 8003d0c:	08003ec1 	.word	0x08003ec1
 8003d10:	08003ec1 	.word	0x08003ec1
 8003d14:	08003ec1 	.word	0x08003ec1
 8003d18:	08003ec1 	.word	0x08003ec1
 8003d1c:	08003ec1 	.word	0x08003ec1
 8003d20:	08003ec1 	.word	0x08003ec1
 8003d24:	08003ec1 	.word	0x08003ec1
 8003d28:	08003e6d 	.word	0x08003e6d
 8003d2c:	08003e85 	.word	0x08003e85
 8003d30:	08003ec1 	.word	0x08003ec1
 8003d34:	08003ec1 	.word	0x08003ec1
 8003d38:	08003ec1 	.word	0x08003ec1
 8003d3c:	08003ec1 	.word	0x08003ec1
 8003d40:	08003ec1 	.word	0x08003ec1
 8003d44:	08003ec1 	.word	0x08003ec1
 8003d48:	08003ec1 	.word	0x08003ec1
 8003d4c:	08003ec1 	.word	0x08003ec1
 8003d50:	08003ec1 	.word	0x08003ec1
 8003d54:	08003ec1 	.word	0x08003ec1
 8003d58:	08003ec1 	.word	0x08003ec1
 8003d5c:	08003ec1 	.word	0x08003ec1
 8003d60:	08003ec1 	.word	0x08003ec1
 8003d64:	08003e7f 	.word	0x08003e7f
 8003d68:	08003ec1 	.word	0x08003ec1
 8003d6c:	08003e8b 	.word	0x08003e8b
 8003d70:	08003ec1 	.word	0x08003ec1
 8003d74:	08003e91 	.word	0x08003e91
 8003d78:	08003ec1 	.word	0x08003ec1
 8003d7c:	08003ec1 	.word	0x08003ec1
 8003d80:	08003e73 	.word	0x08003e73
 8003d84:	08003ec1 	.word	0x08003ec1
 8003d88:	08003ec1 	.word	0x08003ec1
 8003d8c:	08003ec1 	.word	0x08003ec1
 8003d90:	08003ec1 	.word	0x08003ec1
 8003d94:	08003ec1 	.word	0x08003ec1
 8003d98:	08003ec1 	.word	0x08003ec1
 8003d9c:	08003ec1 	.word	0x08003ec1
 8003da0:	08003ec1 	.word	0x08003ec1
 8003da4:	08003ec1 	.word	0x08003ec1
 8003da8:	08003ec1 	.word	0x08003ec1
 8003dac:	08003ec1 	.word	0x08003ec1
 8003db0:	08003ec1 	.word	0x08003ec1
 8003db4:	08003ec1 	.word	0x08003ec1
 8003db8:	08003e79 	.word	0x08003e79
 8003dbc:	08003ec1 	.word	0x08003ec1
 8003dc0:	08003ec1 	.word	0x08003ec1
 8003dc4:	08003eaf 	.word	0x08003eaf
 8003dc8:	08003ec1 	.word	0x08003ec1
 8003dcc:	08003ec1 	.word	0x08003ec1
 8003dd0:	08003ec1 	.word	0x08003ec1
 8003dd4:	08003ec1 	.word	0x08003ec1
 8003dd8:	08003ec1 	.word	0x08003ec1
 8003ddc:	08003ec1 	.word	0x08003ec1
 8003de0:	08003eb5 	.word	0x08003eb5
 8003de4:	08003ebb 	.word	0x08003ebb
 8003de8:	08003ec1 	.word	0x08003ec1
 8003dec:	08003ec1 	.word	0x08003ec1
 8003df0:	08003ec1 	.word	0x08003ec1
 8003df4:	08003ec1 	.word	0x08003ec1
 8003df8:	08003ec1 	.word	0x08003ec1
 8003dfc:	08003ec1 	.word	0x08003ec1
 8003e00:	08003ec1 	.word	0x08003ec1
 8003e04:	08003ec1 	.word	0x08003ec1
 8003e08:	08003ec1 	.word	0x08003ec1
 8003e0c:	08003ec1 	.word	0x08003ec1
 8003e10:	08003ec1 	.word	0x08003ec1
 8003e14:	08003ec1 	.word	0x08003ec1
 8003e18:	08003ec1 	.word	0x08003ec1
 8003e1c:	08003ec1 	.word	0x08003ec1
 8003e20:	08003ec1 	.word	0x08003ec1
 8003e24:	08003ec1 	.word	0x08003ec1
 8003e28:	08003e97 	.word	0x08003e97
 8003e2c:	08003ec1 	.word	0x08003ec1
 8003e30:	08003ec1 	.word	0x08003ec1
 8003e34:	08003ec1 	.word	0x08003ec1
 8003e38:	08003ec1 	.word	0x08003ec1
 8003e3c:	08003ec1 	.word	0x08003ec1
 8003e40:	08003ec1 	.word	0x08003ec1
 8003e44:	08003ec1 	.word	0x08003ec1
 8003e48:	08003ec1 	.word	0x08003ec1
 8003e4c:	08003ec1 	.word	0x08003ec1
 8003e50:	08003ec1 	.word	0x08003ec1
 8003e54:	08003ec1 	.word	0x08003ec1
 8003e58:	08003ec1 	.word	0x08003ec1
 8003e5c:	08003ec1 	.word	0x08003ec1
 8003e60:	08003ea3 	.word	0x08003ea3
 8003e64:	08003ec1 	.word	0x08003ec1
 8003e68:	08003ea9 	.word	0x08003ea9
  case 0x422: str = "STM32F303xB/C"; break;
 8003e6c:	4b19      	ldr	r3, [pc, #100]	; (8003ed4 <devIdToStr+0x1fc>)
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	e028      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x438: str = "STM32F303x6/8"; break;
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <devIdToStr+0x200>)
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	e025      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x446: str = "STM32F303xD/E"; break;
 8003e78:	4b18      	ldr	r3, [pc, #96]	; (8003edc <devIdToStr+0x204>)
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e022      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x431: str = "STM32F411xC/E"; break;
 8003e7e:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <devIdToStr+0x208>)
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	e01f      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x423: str = "STM32F401xB/C"; break;
 8003e84:	4b17      	ldr	r3, [pc, #92]	; (8003ee4 <devIdToStr+0x20c>)
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	e01c      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x433: str = "STM32F401xD/E"; break;
 8003e8a:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <devIdToStr+0x210>)
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e019      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x435: str = "STM32L43xxx"; break;
 8003e90:	4b16      	ldr	r3, [pc, #88]	; (8003eec <devIdToStr+0x214>)
 8003e92:	60fb      	str	r3, [r7, #12]
 8003e94:	e016      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x462: str = "STM32L45xxx"; break;
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <devIdToStr+0x218>)
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e013      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x415: str = "STM32L4x6xx"; break;
 8003e9c:	4b15      	ldr	r3, [pc, #84]	; (8003ef4 <devIdToStr+0x21c>)
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	e010      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x470: str = "STM32L4Rxxx"; break;
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <devIdToStr+0x220>)
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	e00d      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x472: str = "STM32L5[5,6]2xx"; break;
 8003ea8:	4b14      	ldr	r3, [pc, #80]	; (8003efc <devIdToStr+0x224>)
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	e00a      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x449: str = "STM32F74xxx"; break;
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <devIdToStr+0x228>)
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	e007      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x450: str = "STM32H743/53/50xx and STM32H745/55/47/57xx"; break; /* see RM0433 & RM0399 */
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <devIdToStr+0x22c>)
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	e004      	b.n	8003ec4 <devIdToStr+0x1ec>
  case 0x451: str = "STM32F7[6,7]xxx"; break; /* see RM0410 */
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <devIdToStr+0x230>)
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e001      	b.n	8003ec4 <devIdToStr+0x1ec>
  default:    str = "UNKNOWN";
 8003ec0:	4b12      	ldr	r3, [pc, #72]	; (8003f0c <devIdToStr+0x234>)
 8003ec2:	60fb      	str	r3, [r7, #12]
  }
  return str;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	080098ac 	.word	0x080098ac
 8003ed8:	080098bc 	.word	0x080098bc
 8003edc:	080098cc 	.word	0x080098cc
 8003ee0:	080098dc 	.word	0x080098dc
 8003ee4:	080098ec 	.word	0x080098ec
 8003ee8:	080098fc 	.word	0x080098fc
 8003eec:	0800990c 	.word	0x0800990c
 8003ef0:	08009918 	.word	0x08009918
 8003ef4:	08009924 	.word	0x08009924
 8003ef8:	08009930 	.word	0x08009930
 8003efc:	0800993c 	.word	0x0800993c
 8003f00:	0800994c 	.word	0x0800994c
 8003f04:	08009958 	.word	0x08009958
 8003f08:	08009984 	.word	0x08009984
 8003f0c:	08009994 	.word	0x08009994

08003f10 <bitToStr>:

#if !defined(STM32F3) && !defined(STM32MP1)
__STATIC_INLINE const char* bitToStr(uint32_t val)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if (val)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <bitToStr+0x12>
    return "True";
 8003f1e:	4b04      	ldr	r3, [pc, #16]	; (8003f30 <bitToStr+0x20>)
 8003f20:	e000      	b.n	8003f24 <bitToStr+0x14>
  else
    return "False";
 8003f22:	4b04      	ldr	r3, [pc, #16]	; (8003f34 <bitToStr+0x24>)
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	0800999c 	.word	0x0800999c
 8003f34:	080099a4 	.word	0x080099a4

08003f38 <systemSettingLog>:
{
  return mconf;
}

void systemSettingLog(void)
{
 8003f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f3a:	b08b      	sub	sp, #44	; 0x2c
 8003f3c:	af02      	add	r7, sp, #8
  struct dwtTime t;
  uint32_t st;

#if !defined(STM32F3) && !defined(STM32L5)
  uint32_t acr = FLASH->ACR ;
 8003f3e:	4b5c      	ldr	r3, [pc, #368]	; (80040b0 <systemSettingLog+0x178>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	61fb      	str	r3, [r7, #28]
  /* Display ARM Complier version */

#if defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  printf("Compiled with MDK-ARM Keil (Arm Compiler 6) %d\r\n", __ARMCC_VERSION);
#elif defined(__GNUC__)
  printf("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003f44:	2301      	movs	r3, #1
 8003f46:	2203      	movs	r2, #3
 8003f48:	2107      	movs	r1, #7
 8003f4a:	485a      	ldr	r0, [pc, #360]	; (80040b4 <systemSettingLog+0x17c>)
 8003f4c:	f002 ff4c 	bl	8006de8 <iprintf>
#endif


  /* Display Device configuration */

  printf("STM32 Runtime configuration...\r\n");
 8003f50:	4859      	ldr	r0, [pc, #356]	; (80040b8 <systemSettingLog+0x180>)
 8003f52:	f002 ffbd 	bl	8006ed0 <puts>

  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
      (int)HAL_GetDEVID(),
 8003f56:	f7fd fce9 	bl	800192c <HAL_GetDEVID>
 8003f5a:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003f5c:	461c      	mov	r4, r3
      devIdToStr(HAL_GetDEVID()),
 8003f5e:	f7fd fce5 	bl	800192c <HAL_GetDEVID>
 8003f62:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff feb6 	bl	8003cd8 <devIdToStr>
 8003f6c:	4605      	mov	r5, r0
      (int)HAL_GetREVID()
 8003f6e:	f7fd fcd1 	bl	8001914 <HAL_GetREVID>
 8003f72:	4603      	mov	r3, r0
  printf(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003f74:	462a      	mov	r2, r5
 8003f76:	4621      	mov	r1, r4
 8003f78:	4850      	ldr	r0, [pc, #320]	; (80040bc <systemSettingLog+0x184>)
 8003f7a:	f002 ff35 	bl	8006de8 <iprintf>
  );

  printf(" Core Arch.   : M%d - %s %s\r\n",
 8003f7e:	4b50      	ldr	r3, [pc, #320]	; (80040c0 <systemSettingLog+0x188>)
 8003f80:	4a50      	ldr	r2, [pc, #320]	; (80040c4 <systemSettingLog+0x18c>)
 8003f82:	2104      	movs	r1, #4
 8003f84:	4850      	ldr	r0, [pc, #320]	; (80040c8 <systemSettingLog+0x190>)
 8003f86:	f002 ff2f 	bl	8006de8 <iprintf>
          ""
#endif
  );

#if (__FPU_PRESENT == 1) && __FPU_USED
  mconf = (1 << 16);  /* FPU present and used */
 8003f8a:	4b50      	ldr	r3, [pc, #320]	; (80040cc <systemSettingLog+0x194>)
 8003f8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f90:	601a      	str	r2, [r3, #0]
#endif

  printf(" HAL version  : 0x%08x\r\n", (int)HAL_GetHalVersion());
 8003f92:	f7fd fcb5 	bl	8001900 <HAL_GetHalVersion>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4619      	mov	r1, r3
 8003f9a:	484d      	ldr	r0, [pc, #308]	; (80040d0 <systemSettingLog+0x198>)
 8003f9c:	f002 ff24 	bl	8006de8 <iprintf>

  val = systemCoreClock()/1000000;
 8003fa0:	f7ff fd60 	bl	8003a64 <systemCoreClock>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b4b      	ldr	r3, [pc, #300]	; (80040d4 <systemSettingLog+0x19c>)
 8003fa8:	fba3 2302 	umull	r2, r3, r3, r2
 8003fac:	0c9b      	lsrs	r3, r3, #18
 8003fae:	61bb      	str	r3, [r7, #24]

#if !defined(STM32H7)
  printf(" system clock : %u MHz\r\n", (int)val);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4848      	ldr	r0, [pc, #288]	; (80040d8 <systemSettingLog+0x1a0>)
 8003fb6:	f002 ff17 	bl	8006de8 <iprintf>
      bitToStr(val & SCB_CCR_IC_Msk),
      bitToStr(val & SCB_CCR_DC_Msk));
#endif
#else
#if !defined(STM32F3) && !defined(STM32L5) && !defined(STM32MP1)
  mconf |= (1 << 24);  /* F4/L4 conf. */
 8003fba:	4b44      	ldr	r3, [pc, #272]	; (80040cc <systemSettingLog+0x194>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fc2:	4a42      	ldr	r2, [pc, #264]	; (80040cc <systemSettingLog+0x194>)
 8003fc4:	6013      	str	r3, [r2, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <systemSettingLog+0x194>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	4a3e      	ldr	r2, [pc, #248]	; (80040cc <systemSettingLog+0x194>)
 8003fd4:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d005      	beq.n	8003fec <systemSettingLog+0xb4>
    mconf |= (1 << 8);
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	; (80040cc <systemSettingLog+0x194>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe8:	4a38      	ldr	r2, [pc, #224]	; (80040cc <systemSettingLog+0x194>)
 8003fea:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos)
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <systemSettingLog+0xca>
    mconf |= (1 << 9);
 8003ff6:	4b35      	ldr	r3, [pc, #212]	; (80040cc <systemSettingLog+0x194>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ffe:	4a33      	ldr	r2, [pc, #204]	; (80040cc <systemSettingLog+0x194>)
 8004000:	6013      	str	r3, [r2, #0]
  if ((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos)
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <systemSettingLog+0xe0>
    mconf |= (1 << 10);
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <systemSettingLog+0x194>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004014:	4a2d      	ldr	r2, [pc, #180]	; (80040cc <systemSettingLog+0x194>)
 8004016:	6013      	str	r3, [r2, #0]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 8004018:	69fc      	ldr	r4, [r7, #28]
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	0a1b      	lsrs	r3, r3, #8
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff ff74 	bl	8003f10 <bitToStr>
 8004028:	4605      	mov	r5, r0
      bitToStr((acr & FLASH_ACR_ICEN_Msk) >> FLASH_ACR_ICEN_Pos),
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	0a5b      	lsrs	r3, r3, #9
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff ff6c 	bl	8003f10 <bitToStr>
 8004038:	4606      	mov	r6, r0
      bitToStr((acr & FLASH_ACR_DCEN_Msk) >> FLASH_ACR_DCEN_Pos),
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	0a9b      	lsrs	r3, r3, #10
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff64 	bl	8003f10 <bitToStr>
 8004048:	4602      	mov	r2, r0
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
 800404a:	69fb      	ldr	r3, [r7, #28]
  printf(" FLASH conf.  : ACR=0x%08x - Prefetch=%s $I/$D=(%s,%s) latency=%d\r\n",
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	9301      	str	r3, [sp, #4]
 8004052:	9200      	str	r2, [sp, #0]
 8004054:	4633      	mov	r3, r6
 8004056:	462a      	mov	r2, r5
 8004058:	4621      	mov	r1, r4
 800405a:	4820      	ldr	r0, [pc, #128]	; (80040dc <systemSettingLog+0x1a4>)
 800405c:	f002 fec4 	bl	8006de8 <iprintf>
  printf(" ICACHE       : %s\r\n", bitToStr(READ_BIT(ICACHE->CR, ICACHE_CR_EN)));
#endif
#endif

  /* Init CRC and DWT */
  crcIpInit();
 8004060:	f7ff fcc2 	bl	80039e8 <crcIpInit>
  dwtIpInit();
 8004064:	f7ff fce2 	bl	8003a2c <dwtIpInit>

  /* Display HAL tick Calibration */
  dwtReset();
 8004068:	f7ff fc70 	bl	800394c <dwtReset>
  HAL_Delay(100);
 800406c:	2064      	movs	r0, #100	; 0x64
 800406e:	f7fd fc25 	bl	80018bc <HAL_Delay>
  st = dwtGetCycles();
 8004072:	f7ff fc77 	bl	8003964 <dwtGetCycles>
 8004076:	6178      	str	r0, [r7, #20]
  dwtCyclesToTime(st/100, &t);
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	4a19      	ldr	r2, [pc, #100]	; (80040e0 <systemSettingLog+0x1a8>)
 800407c:	fba2 2303 	umull	r2, r3, r2, r3
 8004080:	095b      	lsrs	r3, r3, #5
 8004082:	f04f 0400 	mov.w	r4, #0
 8004086:	1d3a      	adds	r2, r7, #4
 8004088:	4618      	mov	r0, r3
 800408a:	4621      	mov	r1, r4
 800408c:	f7ff fcf1 	bl	8003a72 <dwtCyclesToTime>

  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
      t.s * 100 + t.ms, t.us);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2264      	movs	r2, #100	; 0x64
 8004094:	fb02 f203 	mul.w	r2, r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
  printf(" Calibration  : HAL_Delay(1)=%d.%03d ms\r\n",
 800409a:	4413      	add	r3, r2
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4619      	mov	r1, r3
 80040a0:	4810      	ldr	r0, [pc, #64]	; (80040e4 <systemSettingLog+0x1ac>)
 80040a2:	f002 fea1 	bl	8006de8 <iprintf>
}
 80040a6:	bf00      	nop
 80040a8:	3724      	adds	r7, #36	; 0x24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ae:	bf00      	nop
 80040b0:	40023c00 	.word	0x40023c00
 80040b4:	080099ac 	.word	0x080099ac
 80040b8:	080099cc 	.word	0x080099cc
 80040bc:	080099ec 	.word	0x080099ec
 80040c0:	08009a20 	.word	0x08009a20
 80040c4:	08009a2c 	.word	0x08009a2c
 80040c8:	08009a38 	.word	0x08009a38
 80040cc:	20001234 	.word	0x20001234
 80040d0:	08009a58 	.word	0x08009a58
 80040d4:	431bde83 	.word	0x431bde83
 80040d8:	08009a74 	.word	0x08009a74
 80040dc:	08009a90 	.word	0x08009a90
 80040e0:	51eb851f 	.word	0x51eb851f
 80040e4:	08009ad4 	.word	0x08009ad4

080040e8 <anomaly_detection_configure_activations>:


AI_DECLARE_STATIC
ai_bool anomaly_detection_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, AI_ANOMALY_DETECTION_ACTIVATIONS_ALIGNMENT));
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	3303      	adds	r3, #3
 80040f8:	f023 0303 	bic.w	r3, r3, #3
 80040fc:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    input_0_output_array.data = AI_PTR(NULL);
 80040fe:	4b26      	ldr	r3, [pc, #152]	; (8004198 <anomaly_detection_configure_activations+0xb0>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <anomaly_detection_configure_activations+0xb0>)
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
    dense_output_array.data = AI_PTR(activations + 0);
 800410a:	4a24      	ldr	r2, [pc, #144]	; (800419c <anomaly_detection_configure_activations+0xb4>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(activations + 0);
 8004110:	4a22      	ldr	r2, [pc, #136]	; (800419c <anomaly_detection_configure_activations+0xb4>)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	60d3      	str	r3, [r2, #12]
    dense_nl_output_array.data = AI_PTR(activations + 0);
 8004116:	4a22      	ldr	r2, [pc, #136]	; (80041a0 <anomaly_detection_configure_activations+0xb8>)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6093      	str	r3, [r2, #8]
    dense_nl_output_array.data_start = AI_PTR(activations + 0);
 800411c:	4a20      	ldr	r2, [pc, #128]	; (80041a0 <anomaly_detection_configure_activations+0xb8>)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(activations + 512);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004128:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <anomaly_detection_configure_activations+0xbc>)
 800412a:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(activations + 512);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004132:	4a1c      	ldr	r2, [pc, #112]	; (80041a4 <anomaly_detection_configure_activations+0xbc>)
 8004134:	60d3      	str	r3, [r2, #12]
    dense_1_nl_output_array.data = AI_PTR(activations + 0);
 8004136:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <anomaly_detection_configure_activations+0xc0>)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6093      	str	r3, [r2, #8]
    dense_1_nl_output_array.data_start = AI_PTR(activations + 0);
 800413c:	4a1a      	ldr	r2, [pc, #104]	; (80041a8 <anomaly_detection_configure_activations+0xc0>)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	60d3      	str	r3, [r2, #12]
    dense_2_output_array.data = AI_PTR(activations + 256);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <anomaly_detection_configure_activations+0xc4>)
 800414a:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(activations + 256);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004152:	4a16      	ldr	r2, [pc, #88]	; (80041ac <anomaly_detection_configure_activations+0xc4>)
 8004154:	60d3      	str	r3, [r2, #12]
    dense_2_nl_output_array.data = AI_PTR(activations + 0);
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <anomaly_detection_configure_activations+0xc8>)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6093      	str	r3, [r2, #8]
    dense_2_nl_output_array.data_start = AI_PTR(activations + 0);
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <anomaly_detection_configure_activations+0xc8>)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 128);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3380      	adds	r3, #128	; 0x80
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <anomaly_detection_configure_activations+0xcc>)
 8004168:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 128);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3380      	adds	r3, #128	; 0x80
 800416e:	4a11      	ldr	r2, [pc, #68]	; (80041b4 <anomaly_detection_configure_activations+0xcc>)
 8004170:	60d3      	str	r3, [r2, #12]
    dense_3_nl_output_array.data = AI_PTR(activations + 0);
 8004172:	4a11      	ldr	r2, [pc, #68]	; (80041b8 <anomaly_detection_configure_activations+0xd0>)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6093      	str	r3, [r2, #8]
    dense_3_nl_output_array.data_start = AI_PTR(activations + 0);
 8004178:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <anomaly_detection_configure_activations+0xd0>)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(NULL);
 800417e:	4b0f      	ldr	r3, [pc, #60]	; (80041bc <anomaly_detection_configure_activations+0xd4>)
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
    dense_4_output_array.data_start = AI_PTR(NULL);
 8004184:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <anomaly_detection_configure_activations+0xd4>)
 8004186:	2200      	movs	r2, #0
 8004188:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800418a:	2301      	movs	r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	2000013c 	.word	0x2000013c
 800419c:	2000014c 	.word	0x2000014c
 80041a0:	2000015c 	.word	0x2000015c
 80041a4:	2000016c 	.word	0x2000016c
 80041a8:	2000017c 	.word	0x2000017c
 80041ac:	2000018c 	.word	0x2000018c
 80041b0:	2000019c 	.word	0x2000019c
 80041b4:	200001ac 	.word	0x200001ac
 80041b8:	200001bc 	.word	0x200001bc
 80041bc:	200001cc 	.word	0x200001cc

080041c0 <anomaly_detection_configure_weights>:


AI_DECLARE_STATIC
ai_bool anomaly_detection_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80041d0:	4b5f      	ldr	r3, [pc, #380]	; (8004350 <anomaly_detection_configure_weights+0x190>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041d8:	4a5d      	ldr	r2, [pc, #372]	; (8004350 <anomaly_detection_configure_weights+0x190>)
 80041da:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 182272);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f503 3332 	add.w	r3, r3, #182272	; 0x2c800
 80041e2:	4a5b      	ldr	r2, [pc, #364]	; (8004350 <anomaly_detection_configure_weights+0x190>)
 80041e4:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 182272);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f503 3332 	add.w	r3, r3, #182272	; 0x2c800
 80041ec:	4a58      	ldr	r2, [pc, #352]	; (8004350 <anomaly_detection_configure_weights+0x190>)
 80041ee:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80041f0:	4b58      	ldr	r3, [pc, #352]	; (8004354 <anomaly_detection_configure_weights+0x194>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041f8:	4a56      	ldr	r2, [pc, #344]	; (8004354 <anomaly_detection_configure_weights+0x194>)
 80041fa:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 182208);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 3331 	add.w	r3, r3, #181248	; 0x2c400
 8004202:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8004206:	4a53      	ldr	r2, [pc, #332]	; (8004354 <anomaly_detection_configure_weights+0x194>)
 8004208:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 182208);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f503 3331 	add.w	r3, r3, #181248	; 0x2c400
 8004210:	f503 7370 	add.w	r3, r3, #960	; 0x3c0
 8004214:	4a4f      	ldr	r2, [pc, #316]	; (8004354 <anomaly_detection_configure_weights+0x194>)
 8004216:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8004218:	4b4f      	ldr	r3, [pc, #316]	; (8004358 <anomaly_detection_configure_weights+0x198>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004220:	4a4d      	ldr	r2, [pc, #308]	; (8004358 <anomaly_detection_configure_weights+0x198>)
 8004222:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 182144);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 3331 	add.w	r3, r3, #181248	; 0x2c400
 800422a:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800422e:	4a4a      	ldr	r2, [pc, #296]	; (8004358 <anomaly_detection_configure_weights+0x198>)
 8004230:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 182144);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f503 3331 	add.w	r3, r3, #181248	; 0x2c400
 8004238:	f503 7360 	add.w	r3, r3, #896	; 0x380
 800423c:	4a46      	ldr	r2, [pc, #280]	; (8004358 <anomaly_detection_configure_weights+0x198>)
 800423e:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8004240:	4b46      	ldr	r3, [pc, #280]	; (800435c <anomaly_detection_configure_weights+0x19c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004248:	4a44      	ldr	r2, [pc, #272]	; (800435c <anomaly_detection_configure_weights+0x19c>)
 800424a:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 180096);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8004252:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8004256:	4a41      	ldr	r2, [pc, #260]	; (800435c <anomaly_detection_configure_weights+0x19c>)
 8004258:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 180096);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8004260:	f503 7360 	add.w	r3, r3, #896	; 0x380
 8004264:	4a3d      	ldr	r2, [pc, #244]	; (800435c <anomaly_detection_configure_weights+0x19c>)
 8004266:	60d3      	str	r3, [r2, #12]
    dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004268:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <anomaly_detection_configure_weights+0x1a0>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004270:	4a3b      	ldr	r2, [pc, #236]	; (8004360 <anomaly_detection_configure_weights+0x1a0>)
 8004272:	6013      	str	r3, [r2, #0]
    dense_2_bias_array.data = AI_PTR(weights + 179968);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 800427a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800427e:	4a38      	ldr	r2, [pc, #224]	; (8004360 <anomaly_detection_configure_weights+0x1a0>)
 8004280:	6093      	str	r3, [r2, #8]
    dense_2_bias_array.data_start = AI_PTR(weights + 179968);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8004288:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800428c:	4a34      	ldr	r2, [pc, #208]	; (8004360 <anomaly_detection_configure_weights+0x1a0>)
 800428e:	60d3      	str	r3, [r2, #12]
    dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004290:	4b34      	ldr	r3, [pc, #208]	; (8004364 <anomaly_detection_configure_weights+0x1a4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004298:	4a32      	ldr	r2, [pc, #200]	; (8004364 <anomaly_detection_configure_weights+0x1a4>)
 800429a:	6013      	str	r3, [r2, #0]
    dense_2_weights_array.data = AI_PTR(weights + 171776);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 3327 	add.w	r3, r3, #171008	; 0x29c00
 80042a2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80042a6:	4a2f      	ldr	r2, [pc, #188]	; (8004364 <anomaly_detection_configure_weights+0x1a4>)
 80042a8:	6093      	str	r3, [r2, #8]
    dense_2_weights_array.data_start = AI_PTR(weights + 171776);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 3327 	add.w	r3, r3, #171008	; 0x29c00
 80042b0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80042b4:	4a2b      	ldr	r2, [pc, #172]	; (8004364 <anomaly_detection_configure_weights+0x1a4>)
 80042b6:	60d3      	str	r3, [r2, #12]
    dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80042b8:	4b2b      	ldr	r3, [pc, #172]	; (8004368 <anomaly_detection_configure_weights+0x1a8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042c0:	4a29      	ldr	r2, [pc, #164]	; (8004368 <anomaly_detection_configure_weights+0x1a8>)
 80042c2:	6013      	str	r3, [r2, #0]
    dense_1_bias_array.data = AI_PTR(weights + 171520);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f503 3327 	add.w	r3, r3, #171008	; 0x29c00
 80042ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042ce:	4a26      	ldr	r2, [pc, #152]	; (8004368 <anomaly_detection_configure_weights+0x1a8>)
 80042d0:	6093      	str	r3, [r2, #8]
    dense_1_bias_array.data_start = AI_PTR(weights + 171520);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f503 3327 	add.w	r3, r3, #171008	; 0x29c00
 80042d8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <anomaly_detection_configure_weights+0x1a8>)
 80042de:	60d3      	str	r3, [r2, #12]
    dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80042e0:	4b22      	ldr	r3, [pc, #136]	; (800436c <anomaly_detection_configure_weights+0x1ac>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042e8:	4a20      	ldr	r2, [pc, #128]	; (800436c <anomaly_detection_configure_weights+0x1ac>)
 80042ea:	6013      	str	r3, [r2, #0]
    dense_1_weights_array.data = AI_PTR(weights + 138752);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80042f2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80042f6:	4a1d      	ldr	r2, [pc, #116]	; (800436c <anomaly_detection_configure_weights+0x1ac>)
 80042f8:	6093      	str	r3, [r2, #8]
    dense_1_weights_array.data_start = AI_PTR(weights + 138752);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 8004300:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8004304:	4a19      	ldr	r2, [pc, #100]	; (800436c <anomaly_detection_configure_weights+0x1ac>)
 8004306:	60d3      	str	r3, [r2, #12]
    dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <anomaly_detection_configure_weights+0x1b0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004310:	4a17      	ldr	r2, [pc, #92]	; (8004370 <anomaly_detection_configure_weights+0x1b0>)
 8004312:	6013      	str	r3, [r2, #0]
    dense_bias_array.data = AI_PTR(weights + 138240);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 800431a:	4a15      	ldr	r2, [pc, #84]	; (8004370 <anomaly_detection_configure_weights+0x1b0>)
 800431c:	6093      	str	r3, [r2, #8]
    dense_bias_array.data_start = AI_PTR(weights + 138240);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 8004324:	4a12      	ldr	r2, [pc, #72]	; (8004370 <anomaly_detection_configure_weights+0x1b0>)
 8004326:	60d3      	str	r3, [r2, #12]
    dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8004328:	4b12      	ldr	r3, [pc, #72]	; (8004374 <anomaly_detection_configure_weights+0x1b4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004330:	4a10      	ldr	r2, [pc, #64]	; (8004374 <anomaly_detection_configure_weights+0x1b4>)
 8004332:	6013      	str	r3, [r2, #0]
    dense_weights_array.data = AI_PTR(weights + 0);
 8004334:	4a0f      	ldr	r2, [pc, #60]	; (8004374 <anomaly_detection_configure_weights+0x1b4>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6093      	str	r3, [r2, #8]
    dense_weights_array.data_start = AI_PTR(weights + 0);
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <anomaly_detection_configure_weights+0x1b4>)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 8004340:	2301      	movs	r3, #1
}
 8004342:	4618      	mov	r0, r3
 8004344:	3714      	adds	r7, #20
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	2000009c 	.word	0x2000009c
 8004354:	200000ac 	.word	0x200000ac
 8004358:	200000bc 	.word	0x200000bc
 800435c:	200000cc 	.word	0x200000cc
 8004360:	200000dc 	.word	0x200000dc
 8004364:	200000ec 	.word	0x200000ec
 8004368:	200000fc 	.word	0x200000fc
 800436c:	2000010c 	.word	0x2000010c
 8004370:	2000011c 	.word	0x2000011c
 8004374:	2000012c 	.word	0x2000012c

08004378 <ai_anomaly_detection_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_anomaly_detection_get_info(
  ai_handle network, ai_network_report* report)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b0a0      	sub	sp, #128	; 0x80
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 fc28 	bl	8004bd8 <ai_platform_context_acquire>
 8004388:	67f8      	str	r0, [r7, #124]	; 0x7c

  if ( report && net_ctx )
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d04a      	beq.n	8004426 <ai_anomaly_detection_get_info+0xae>
 8004390:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004392:	2b00      	cmp	r3, #0
 8004394:	d047      	beq.n	8004426 <ai_anomaly_detection_get_info+0xae>
  {
    ai_network_report r = {
 8004396:	f107 0308 	add.w	r3, r7, #8
 800439a:	2274      	movs	r2, #116	; 0x74
 800439c:	2100      	movs	r1, #0
 800439e:	4618      	mov	r0, r3
 80043a0:	f002 f815 	bl	80063ce <memset>
 80043a4:	4b22      	ldr	r3, [pc, #136]	; (8004430 <ai_anomaly_detection_get_info+0xb8>)
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <ai_anomaly_detection_get_info+0xbc>)
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	4b22      	ldr	r3, [pc, #136]	; (8004438 <ai_anomaly_detection_get_info+0xc0>)
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	4b22      	ldr	r3, [pc, #136]	; (800443c <ai_anomaly_detection_get_info+0xc4>)
 80043b2:	617b      	str	r3, [r7, #20]
      .model_signature   = AI_ANOMALY_DETECTION_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80043b4:	f000 fb52 	bl	8004a5c <ai_platform_runtime_get_revision>
 80043b8:	4603      	mov	r3, r0
    ai_network_report r = {
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	f000 fb70 	bl	8004aa0 <ai_platform_runtime_get_version>
 80043c0:	4603      	mov	r3, r0
 80043c2:	61fb      	str	r3, [r7, #28]
 80043c4:	4b1e      	ldr	r3, [pc, #120]	; (8004440 <ai_anomaly_detection_get_info+0xc8>)
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	2305      	movs	r3, #5
 80043ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80043ce:	2302      	movs	r3, #2
 80043d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80043d4:	2301      	movs	r3, #1
 80043d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80043da:	2303      	movs	r3, #3
 80043dc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80043e0:	f000 fb92 	bl	8004b08 <ai_platform_api_get_version>
 80043e4:	4603      	mov	r3, r0
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e8:	f000 fbc2 	bl	8004b70 <ai_platform_interface_api_get_version>
 80043ec:	4603      	mov	r3, r0
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
 80043f0:	f44f 4332 	mov.w	r3, #45568	; 0xb200
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
      .params            = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if ( !ai_platform_api_get_network_report(network, &r) ) return false;
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4619      	mov	r1, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fc47 	bl	8004c90 <ai_platform_api_get_network_report>
 8004402:	4603      	mov	r3, r0
 8004404:	f083 0301 	eor.w	r3, r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <ai_anomaly_detection_get_info+0x9a>
 800440e:	2300      	movs	r3, #0
 8004410:	e00a      	b.n	8004428 <ai_anomaly_detection_get_info+0xb0>

    *report = r;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	4618      	mov	r0, r3
 8004416:	f107 0308 	add.w	r3, r7, #8
 800441a:	2274      	movs	r2, #116	; 0x74
 800441c:	4619      	mov	r1, r3
 800441e:	f001 ffcb 	bl	80063b8 <memcpy>
    return true;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <ai_anomaly_detection_get_info+0xb0>
  }

  return false;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3780      	adds	r7, #128	; 0x80
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	08009b00 	.word	0x08009b00
 8004434:	08009b14 	.word	0x08009b14
 8004438:	08009b38 	.word	0x08009b38
 800443c:	08009b54 	.word	0x08009b54
 8004440:	08009b6c 	.word	0x08009b6c

08004444 <ai_anomaly_detection_get_error>:

AI_API_ENTRY
ai_error ai_anomaly_detection_get_error(ai_handle network)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fbed 	bl	8004c2c <ai_platform_network_get_error>
 8004452:	4603      	mov	r3, r0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <ai_anomaly_detection_create>:

AI_API_ENTRY
ai_error ai_anomaly_detection_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af02      	add	r7, sp, #8
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004466:	2300      	movs	r3, #0
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	2303      	movs	r3, #3
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	2301      	movs	r3, #1
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <ai_anomaly_detection_create+0x28>)
 8004472:	6839      	ldr	r1, [r7, #0]
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 fcf5 	bl	8004e64 <ai_platform_network_create>
 800447a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	2000003c 	.word	0x2000003c

08004488 <ai_anomaly_detection_destroy>:

AI_API_ENTRY
ai_handle ai_anomaly_detection_destroy(ai_handle network)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fd3f 	bl	8004f14 <ai_platform_network_destroy>
 8004496:	4603      	mov	r3, r0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <ai_anomaly_detection_init>:

AI_API_ENTRY
ai_bool ai_anomaly_detection_init(
  ai_handle network, const ai_network_params* params)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fd61 	bl	8004f74 <ai_platform_network_init>
 80044b2:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d101      	bne.n	80044be <ai_anomaly_detection_init+0x1e>
 80044ba:	2300      	movs	r3, #0
 80044bc:	e02b      	b.n	8004516 <ai_anomaly_detection_init+0x76>

  ai_bool ok = true;
 80044be:	2301      	movs	r3, #1
 80044c0:	72fb      	strb	r3, [r7, #11]
  ok &= anomaly_detection_configure_weights(net_ctx, &params->params);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	4619      	mov	r1, r3
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7ff fe7a 	bl	80041c0 <anomaly_detection_configure_weights>
 80044cc:	4603      	mov	r3, r0
 80044ce:	461a      	mov	r2, r3
 80044d0:	7afb      	ldrb	r3, [r7, #11]
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf14      	ite	ne
 80044d8:	2301      	movne	r3, #1
 80044da:	2300      	moveq	r3, #0
 80044dc:	72fb      	strb	r3, [r7, #11]
  ok &= anomaly_detection_configure_activations(net_ctx, &params->activations);
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	3318      	adds	r3, #24
 80044e2:	4619      	mov	r1, r3
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff fdff 	bl	80040e8 <anomaly_detection_configure_activations>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bf14      	ite	ne
 80044f6:	2301      	movne	r3, #1
 80044f8:	2300      	moveq	r3, #0
 80044fa:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fdb7 	bl	8005070 <ai_platform_network_post_init>
 8004502:	4603      	mov	r3, r0
 8004504:	461a      	mov	r2, r3
 8004506:	7afb      	ldrb	r3, [r7, #11]
 8004508:	4013      	ands	r3, r2
 800450a:	2b00      	cmp	r3, #0
 800450c:	bf14      	ite	ne
 800450e:	2301      	movne	r3, #1
 8004510:	2300      	moveq	r3, #0
 8004512:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004514:	7afb      	ldrb	r3, [r7, #11]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <ai_anomaly_detection_run>:


AI_API_ENTRY
ai_i32 ai_anomaly_detection_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fde6 	bl	8005100 <ai_platform_network_process>
 8004534:	4603      	mov	r3, r0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <ai_anomaly_detection_forward>:

AI_API_ENTRY
ai_i32 ai_anomaly_detection_forward(ai_handle network, const ai_buffer* input)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  return ai_platform_network_process(network, input, NULL);
 8004548:	2200      	movs	r2, #0
 800454a:	6839      	ldr	r1, [r7, #0]
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fdd7 	bl	8005100 <ai_platform_network_process>
 8004552:	4603      	mov	r3, r0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <ai_anomaly_detection_data_weights_get>:
#include "anomaly_detection_data.h"

ai_handle ai_anomaly_detection_data_weights_get(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
    0xfb, 0x7f, 0xbe, 0x6c, 0x0c, 0x5c, 0xbe, 0x3b, 0xf2,
    0xb0, 0x3e, 0xb1, 0xb6, 0x6c, 0xbb, 0x77, 0x2a, 0x02,
    0x3d, 0x0e, 0xcf, 0x06, 0xbe, 0xc0, 0xbb, 0x58, 0x3e
  };

  return AI_HANDLE_PTR(s_anomaly_detection_weights);
 8004560:	4b02      	ldr	r3, [pc, #8]	; (800456c <ai_anomaly_detection_data_weights_get+0x10>)

}
 8004562:	4618      	mov	r0, r3
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	0800b540 	.word	0x0800b540

08004570 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
    MX_UARTx_Init();
 8004574:	f7fc ff0e 	bl	8001394 <MX_USART2_UART_Init>
    aiSystemPerformanceInit();
 8004578:	f7fe feba 	bl	80032f0 <aiSystemPerformanceInit>
    /* USER CODE BEGIN 3 */
    /* USER CODE END 3 */
}
 800457c:	bf00      	nop
 800457e:	bd80      	pop	{r7, pc}

08004580 <ai_mnetwork_is_valid>:
AI_STATIC struct network_instance gnetworks[AI_MNETWORK_NUMBER] = {0};

AI_DECLARE_STATIC
ai_bool ai_mnetwork_is_valid(const char* name,
        const ai_network_entry_t *entry)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
    if (name && (strlen(entry->name) == strlen(name)) &&
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01d      	beq.n	80045cc <ai_mnetwork_is_valid+0x4c>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f7fb fe23 	bl	80001e0 <strlen>
 800459a:	4604      	mov	r4, r0
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fb fe1f 	bl	80001e0 <strlen>
 80045a2:	4603      	mov	r3, r0
 80045a4:	429c      	cmp	r4, r3
 80045a6:	d111      	bne.n	80045cc <ai_mnetwork_is_valid+0x4c>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681c      	ldr	r4, [r3, #0]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fb fe15 	bl	80001e0 <strlen>
 80045b6:	4603      	mov	r3, r0
 80045b8:	461a      	mov	r2, r3
 80045ba:	6879      	ldr	r1, [r7, #4]
 80045bc:	4620      	mov	r0, r4
 80045be:	f002 fd26 	bl	800700e <strncmp>
 80045c2:	4603      	mov	r3, r0
    if (name && (strlen(entry->name) == strlen(name)) &&
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <ai_mnetwork_is_valid+0x4c>
        return true;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <ai_mnetwork_is_valid+0x4e>
    return false;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	370c      	adds	r7, #12
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd90      	pop	{r4, r7, pc}
	...

080045d8 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80045e0:	2300      	movs	r3, #0
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e026      	b.n	8004634 <ai_mnetwork_handle+0x5c>
        if ((inst) && (&gnetworks[i] == inst))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00b      	beq.n	8004604 <ai_mnetwork_handle+0x2c>
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4613      	mov	r3, r2
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	1a9b      	subs	r3, r3, r2
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4a14      	ldr	r2, [pc, #80]	; (8004648 <ai_mnetwork_handle+0x70>)
 80045f8:	4413      	add	r3, r2
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d101      	bne.n	8004604 <ai_mnetwork_handle+0x2c>
            return inst;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	e01b      	b.n	800463c <ai_mnetwork_handle+0x64>
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d111      	bne.n	800462e <ai_mnetwork_handle+0x56>
 800460a:	490f      	ldr	r1, [pc, #60]	; (8004648 <ai_mnetwork_handle+0x70>)
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	1a9b      	subs	r3, r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	440b      	add	r3, r1
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d107      	bne.n	800462e <ai_mnetwork_handle+0x56>
            return &gnetworks[i];
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4613      	mov	r3, r2
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4a07      	ldr	r2, [pc, #28]	; (8004648 <ai_mnetwork_handle+0x70>)
 800462a:	4413      	add	r3, r2
 800462c:	e006      	b.n	800463c <ai_mnetwork_handle+0x64>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3301      	adds	r3, #1
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b00      	cmp	r3, #0
 8004638:	ddd5      	ble.n	80045e6 <ai_mnetwork_handle+0xe>
    }
    return NULL;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3714      	adds	r7, #20
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	200012cc 	.word	0x200012cc

0800464c <ai_mnetwork_release_handle>:

AI_DECLARE_STATIC
void ai_mnetwork_release_handle(struct network_instance *inst)
{
 800464c:	b480      	push	{r7}
 800464e:	b085      	sub	sp, #20
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
 8004658:	e019      	b.n	800468e <ai_mnetwork_release_handle+0x42>
        if ((inst) && (&gnetworks[i] == inst)) {
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d013      	beq.n	8004688 <ai_mnetwork_release_handle+0x3c>
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <ai_mnetwork_release_handle+0x54>)
 800466c:	4413      	add	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	d109      	bne.n	8004688 <ai_mnetwork_release_handle+0x3c>
            gnetworks[i].entry = NULL;
 8004674:	490a      	ldr	r1, [pc, #40]	; (80046a0 <ai_mnetwork_release_handle+0x54>)
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
            return;
 8004686:	e005      	b.n	8004694 <ai_mnetwork_release_handle+0x48>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3301      	adds	r3, #1
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	dde2      	ble.n	800465a <ai_mnetwork_release_handle+0xe>
        }
    }
}
 8004694:	3714      	adds	r7, #20
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	200012cc 	.word	0x200012cc

080046a4 <ai_mnetwork_find>:

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80046ae:	2300      	movs	r3, #0
 80046b0:	60fb      	str	r3, [r7, #12]
 80046b2:	e01c      	b.n	80046ee <ai_mnetwork_find+0x4a>
        entry = &networks[i];
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	4613      	mov	r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	4413      	add	r3, r2
 80046bc:	015b      	lsls	r3, r3, #5
 80046be:	4a10      	ldr	r2, [pc, #64]	; (8004700 <ai_mnetwork_find+0x5c>)
 80046c0:	4413      	add	r3, r2
 80046c2:	60bb      	str	r3, [r7, #8]
        if (ai_mnetwork_is_valid(name, entry))
 80046c4:	68b9      	ldr	r1, [r7, #8]
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f7ff ff5a 	bl	8004580 <ai_mnetwork_is_valid>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d002      	beq.n	80046d8 <ai_mnetwork_find+0x34>
            return entry->name;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	e00e      	b.n	80046f6 <ai_mnetwork_find+0x52>
        else {
            if (!idx--)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	1e5a      	subs	r2, r3, #1
 80046dc:	603a      	str	r2, [r7, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <ai_mnetwork_find+0x44>
                return entry->name;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	e006      	b.n	80046f6 <ai_mnetwork_find+0x52>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	dddf      	ble.n	80046b4 <ai_mnetwork_find+0x10>
        }
    }
    return NULL;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	08037d44 	.word	0x08037d44

08004704 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af00      	add	r7, sp, #0
 800470a:	60f8      	str	r0, [r7, #12]
 800470c:	60b9      	str	r1, [r7, #8]
 800470e:	607a      	str	r2, [r7, #4]
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8004714:	2000      	movs	r0, #0
 8004716:	f7ff ff5f 	bl	80045d8 <ai_mnetwork_handle>
 800471a:	61f8      	str	r0, [r7, #28]

    if (!inst) {
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d108      	bne.n	8004734 <ai_mnetwork_create+0x30>
        err.type = AI_ERROR_ALLOCATION_FAILED;
 8004722:	2331      	movs	r3, #49	; 0x31
 8004724:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2210      	movs	r2, #16
 800472a:	f362 231f 	bfi	r3, r2, #8, #24
 800472e:	617b      	str	r3, [r7, #20]
        return err;
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	e04d      	b.n	80047d0 <ai_mnetwork_create+0xcc>
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 8004734:	2300      	movs	r3, #0
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	e014      	b.n	8004764 <ai_mnetwork_create+0x60>
        entry = &networks[i];
 800473a:	6a3a      	ldr	r2, [r7, #32]
 800473c:	4613      	mov	r3, r2
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	4413      	add	r3, r2
 8004742:	015b      	lsls	r3, r3, #5
 8004744:	4a24      	ldr	r2, [pc, #144]	; (80047d8 <ai_mnetwork_create+0xd4>)
 8004746:	4413      	add	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        if (ai_mnetwork_is_valid(name, entry)) {
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f7ff ff17 	bl	8004580 <ai_mnetwork_is_valid>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <ai_mnetwork_create+0x5a>
            found = entry;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800475c:	e005      	b.n	800476a <ai_mnetwork_create+0x66>
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
 800475e:	6a3b      	ldr	r3, [r7, #32]
 8004760:	3301      	adds	r3, #1
 8004762:	623b      	str	r3, [r7, #32]
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	2b00      	cmp	r3, #0
 8004768:	dde7      	ble.n	800473a <ai_mnetwork_create+0x36>
        }
    }

    if (!found) {
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <ai_mnetwork_create+0x7e>
        err.type = AI_ERROR_INVALID_PARAM;
 8004770:	2314      	movs	r3, #20
 8004772:	753b      	strb	r3, [r7, #20]
        err.code = AI_ERROR_CODE_NETWORK;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2210      	movs	r2, #16
 8004778:	f362 231f 	bfi	r3, r2, #8, #24
 800477c:	617b      	str	r3, [r7, #20]
        return err;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	e026      	b.n	80047d0 <ai_mnetwork_create+0xcc>
    }

    if (network_config == NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d109      	bne.n	800479c <ai_mnetwork_create+0x98>
        err = found->ai_create(network, found->config);
 8004788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004790:	4611      	mov	r1, r2
 8004792:	68b8      	ldr	r0, [r7, #8]
 8004794:	4798      	blx	r3
 8004796:	4603      	mov	r3, r0
 8004798:	617b      	str	r3, [r7, #20]
 800479a:	e006      	b.n	80047aa <ai_mnetwork_create+0xa6>
    else
        err = found->ai_create(network, network_config);
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	68b8      	ldr	r0, [r7, #8]
 80047a4:	4798      	blx	r3
 80047a6:	4603      	mov	r3, r0
 80047a8:	617b      	str	r3, [r7, #20]
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10c      	bne.n	80047ce <ai_mnetwork_create+0xca>
 80047b4:	7d3b      	ldrb	r3, [r7, #20]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d109      	bne.n	80047ce <ai_mnetwork_create+0xca>
        inst->entry = found;
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047be:	601a      	str	r2, [r3, #0]
        inst->handle = *network;
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	605a      	str	r2, [r3, #4]
        *network = (ai_handle*)inst;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	601a      	str	r2, [r3, #0]
    }

    return err;
 80047ce:	697b      	ldr	r3, [r7, #20]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3728      	adds	r7, #40	; 0x28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	08037d44 	.word	0x08037d44

080047dc <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fef7 	bl	80045d8 <ai_mnetwork_handle>
 80047ea:	60f8      	str	r0, [r7, #12]
    if (inn) {
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d011      	beq.n	8004816 <ai_mnetwork_destroy+0x3a>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6852      	ldr	r2, [r2, #4]
 80047fc:	4610      	mov	r0, r2
 80047fe:	4798      	blx	r3
 8004800:	60b8      	str	r0, [r7, #8]
        if (hdl != inn->handle) {
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	429a      	cmp	r2, r3
 800480a:	d004      	beq.n	8004816 <ai_mnetwork_destroy+0x3a>
            ai_mnetwork_release_handle(inn);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff ff1d 	bl	800464c <ai_mnetwork_release_handle>
            network = AI_HANDLE_NULL;
 8004812:	2300      	movs	r3, #0
 8004814:	607b      	str	r3, [r7, #4]
        }
    }
    return network;
 8004816:	687b      	ldr	r3, [r7, #4]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <ai_mnetwork_get_info>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_info(ai_handle network, ai_network_report* report)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fed4 	bl	80045d8 <ai_mnetwork_handle>
 8004830:	60f8      	str	r0, [r7, #12]
    if (inn)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <ai_mnetwork_get_info+0x2c>
        return inn->entry->ai_get_info(inn->handle, report);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	6852      	ldr	r2, [r2, #4]
 8004842:	6839      	ldr	r1, [r7, #0]
 8004844:	4610      	mov	r0, r2
 8004846:	4798      	blx	r3
 8004848:	4603      	mov	r3, r0
 800484a:	e000      	b.n	800484e <ai_mnetwork_get_info+0x2e>
    else
        return false;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
 800485e:	2314      	movs	r3, #20
 8004860:	723b      	strb	r3, [r7, #8]
    err.code = AI_ERROR_CODE_NETWORK;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2210      	movs	r2, #16
 8004866:	f362 231f 	bfi	r3, r2, #8, #24
 800486a:	60bb      	str	r3, [r7, #8]

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff feb3 	bl	80045d8 <ai_mnetwork_handle>
 8004872:	60f8      	str	r0, [r7, #12]
    if (inn)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d008      	beq.n	800488c <ai_mnetwork_get_error+0x36>
        return inn->entry->ai_get_error(inn->handle);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	4610      	mov	r0, r2
 8004886:	4798      	blx	r3
 8004888:	4603      	mov	r3, r0
 800488a:	e000      	b.n	800488e <ai_mnetwork_get_error+0x38>
    else
        return err;
 800488c:	68bb      	ldr	r3, [r7, #8]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network, const ai_network_params* params)
{
 8004896:	b5b0      	push	{r4, r5, r7, lr}
 8004898:	b090      	sub	sp, #64	; 0x40
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
    struct network_instance *inn;
    ai_network_params par;

    /* TODO: adding check ai_buffer activations/weights shape coherence */

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f7ff fe99 	bl	80045d8 <ai_mnetwork_handle>
 80048a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (inn) {
 80048a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d03f      	beq.n	800492e <ai_mnetwork_init+0x98>
        par = inn->entry->params;
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f107 040c 	add.w	r4, r7, #12
 80048b6:	1d1d      	adds	r5, r3, #4
 80048b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80048c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (params->activations.n_batches)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	8b9b      	ldrh	r3, [r3, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <ai_mnetwork_init+0x52>
            par.activations = params->activations;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	f107 0424 	add.w	r4, r7, #36	; 0x24
 80048d6:	f103 0518 	add.w	r5, r3, #24
 80048da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80048dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80048de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80048e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80048e6:	e002      	b.n	80048ee <ai_mnetwork_init+0x58>
        else
            par.activations.data = params->activations.data;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
        if (params->params.n_batches)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	889b      	ldrh	r3, [r3, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <ai_mnetwork_init+0x76>
            par.params = params->params;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f107 040c 	add.w	r4, r7, #12
 80048fc:	461d      	mov	r5, r3
 80048fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004900:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004902:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004906:	e884 0003 	stmia.w	r4, {r0, r1}
 800490a:	e005      	b.n	8004918 <ai_mnetwork_init+0x82>
        else
            par.params.data = inn->entry->ai_data_weights_get_default();
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	4798      	blx	r3
 8004914:	4603      	mov	r3, r0
 8004916:	61fb      	str	r3, [r7, #28]
        return inn->entry->ai_init(inn->handle, &par);
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004920:	6852      	ldr	r2, [r2, #4]
 8004922:	f107 010c 	add.w	r1, r7, #12
 8004926:	4610      	mov	r0, r2
 8004928:	4798      	blx	r3
 800492a:	4603      	mov	r3, r0
 800492c:	e000      	b.n	8004930 <ai_mnetwork_init+0x9a>
    }
    else
        return false;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3740      	adds	r7, #64	; 0x40
 8004934:	46bd      	mov	sp, r7
 8004936:	bdb0      	pop	{r4, r5, r7, pc}

08004938 <ai_mnetwork_get_ext_data_activations>:

 AI_API_ENTRY
int ai_mnetwork_get_ext_data_activations(ai_handle network,
         ai_u32 *add,
         ai_u32 *size)
 {
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7ff fe47 	bl	80045d8 <ai_mnetwork_handle>
 800494a:	6178      	str	r0, [r7, #20]
     if (inn && add && size) {
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d011      	beq.n	8004976 <ai_mnetwork_get_ext_data_activations+0x3e>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00e      	beq.n	8004976 <ai_mnetwork_get_ext_data_activations+0x3e>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <ai_mnetwork_get_ext_data_activations+0x3e>
         *add = inn->entry->extActBufferStartAddr;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	601a      	str	r2, [r3, #0]
         *size = inn->entry->actBufferSize;
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
         return 0;
 8004972:	2300      	movs	r3, #0
 8004974:	e001      	b.n	800497a <ai_mnetwork_get_ext_data_activations+0x42>
     }
     else
         return -1;
 8004976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 }
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <_ai_platform_get_io_buffers_info>:
 8004982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004986:	2400      	movs	r4, #0
 8004988:	b083      	sub	sp, #12
 800498a:	4606      	mov	r6, r0
 800498c:	4688      	mov	r8, r1
 800498e:	46a3      	mov	fp, r4
 8004990:	f04f 0a18 	mov.w	sl, #24
 8004994:	f04f 0901 	mov.w	r9, #1
 8004998:	b2a0      	uxth	r0, r4
 800499a:	b936      	cbnz	r6, 80049aa <_ai_platform_get_io_buffers_info+0x28>
 800499c:	2800      	cmp	r0, #0
 800499e:	d03b      	beq.n	8004a18 <_ai_platform_get_io_buffers_info+0x96>
 80049a0:	68b3      	ldr	r3, [r6, #8]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f8c8 3000 	str.w	r3, [r8]
 80049a8:	e036      	b.n	8004a18 <_ai_platform_get_io_buffers_info+0x96>
 80049aa:	8833      	ldrh	r3, [r6, #0]
 80049ac:	429c      	cmp	r4, r3
 80049ae:	d2f5      	bcs.n	800499c <_ai_platform_get_io_buffers_info+0x1a>
 80049b0:	6873      	ldr	r3, [r6, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f2      	beq.n	800499c <_ai_platform_get_io_buffers_info+0x1a>
 80049b6:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80049ba:	2d00      	cmp	r5, #0
 80049bc:	d0ee      	beq.n	800499c <_ai_platform_get_io_buffers_info+0x1a>
 80049be:	68b3      	ldr	r3, [r6, #8]
 80049c0:	69aa      	ldr	r2, [r5, #24]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	6810      	ldr	r0, [r2, #0]
 80049c6:	689f      	ldr	r7, [r3, #8]
 80049c8:	9101      	str	r1, [sp, #4]
 80049ca:	f001 fadb 	bl	8005f84 <ai_array_to_buffer_fmt>
 80049ce:	9901      	ldr	r1, [sp, #4]
 80049d0:	fb0a f304 	mul.w	r3, sl, r4
 80049d4:	18ca      	adds	r2, r1, r3
 80049d6:	50c8      	str	r0, [r1, r3]
 80049d8:	f8a2 9004 	strh.w	r9, [r2, #4]
 80049dc:	68eb      	ldr	r3, [r5, #12]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	80d3      	strh	r3, [r2, #6]
 80049e2:	68eb      	ldr	r3, [r5, #12]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	8113      	strh	r3, [r2, #8]
 80049e8:	68eb      	ldr	r3, [r5, #12]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60d3      	str	r3, [r2, #12]
 80049ee:	69ab      	ldr	r3, [r5, #24]
 80049f0:	00e1      	lsls	r1, r4, #3
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	6113      	str	r3, [r2, #16]
 80049f6:	1878      	adds	r0, r7, r1
 80049f8:	b150      	cbz	r0, 8004a10 <_ai_platform_get_io_buffers_info+0x8e>
 80049fa:	f847 b034 	str.w	fp, [r7, r4, lsl #3]
 80049fe:	682b      	ldr	r3, [r5, #0]
 8004a00:	6043      	str	r3, [r0, #4]
 8004a02:	b11b      	cbz	r3, 8004a0c <_ai_platform_get_io_buffers_info+0x8a>
 8004a04:	885b      	ldrh	r3, [r3, #2]
 8004a06:	3300      	adds	r3, #0
 8004a08:	bf18      	it	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	507b      	str	r3, [r7, r1]
 8004a0e:	b903      	cbnz	r3, 8004a12 <_ai_platform_get_io_buffers_info+0x90>
 8004a10:	2000      	movs	r0, #0
 8004a12:	6150      	str	r0, [r2, #20]
 8004a14:	3401      	adds	r4, #1
 8004a16:	e7bf      	b.n	8004998 <_ai_platform_get_io_buffers_info+0x16>
 8004a18:	b003      	add	sp, #12
 8004a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a1e <_platform_network_state_setup.isra.1>:
 8004a1e:	b430      	push	{r4, r5}
 8004a20:	68dd      	ldr	r5, [r3, #12]
 8004a22:	695c      	ldr	r4, [r3, #20]
 8004a24:	68ed      	ldr	r5, [r5, #12]
 8004a26:	68e4      	ldr	r4, [r4, #12]
 8004a28:	fb04 f405 	mul.w	r4, r4, r5
 8004a2c:	6084      	str	r4, [r0, #8]
 8004a2e:	8809      	ldrh	r1, [r1, #0]
 8004a30:	fb04 f401 	mul.w	r4, r4, r1
 8004a34:	60c4      	str	r4, [r0, #12]
 8004a36:	6811      	ldr	r1, [r2, #0]
 8004a38:	6041      	str	r1, [r0, #4]
 8004a3a:	6812      	ldr	r2, [r2, #0]
 8004a3c:	4414      	add	r4, r2
 8004a3e:	6004      	str	r4, [r0, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	6814      	ldr	r4, [r2, #0]
 8004a44:	00a4      	lsls	r4, r4, #2
 8004a46:	d407      	bmi.n	8004a58 <_platform_network_state_setup.isra.1+0x3a>
 8004a48:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 8004a4c:	1b64      	subs	r4, r4, r5
 8004a4e:	4421      	add	r1, r4
 8004a50:	6091      	str	r1, [r2, #8]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	6842      	ldr	r2, [r0, #4]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	bc30      	pop	{r4, r5}
 8004a5a:	4770      	bx	lr

08004a5c <ai_platform_runtime_get_revision>:
 8004a5c:	490a      	ldr	r1, [pc, #40]	; (8004a88 <ai_platform_runtime_get_revision+0x2c>)
 8004a5e:	4a0b      	ldr	r2, [pc, #44]	; (8004a8c <ai_platform_runtime_get_revision+0x30>)
 8004a60:	680b      	ldr	r3, [r1, #0]
 8004a62:	2001      	movs	r0, #1
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	600b      	str	r3, [r1, #0]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	6010      	str	r0, [r2, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	2a00      	cmp	r2, #0
 8004a72:	d1fc      	bne.n	8004a6e <ai_platform_runtime_get_revision+0x12>
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <ai_platform_runtime_get_revision+0x34>)
 8004a76:	4a07      	ldr	r2, [pc, #28]	; (8004a94 <ai_platform_runtime_get_revision+0x38>)
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <ai_platform_runtime_get_revision+0x3c>)
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d000      	beq.n	8004a84 <ai_platform_runtime_get_revision+0x28>
 8004a82:	e7fe      	b.n	8004a82 <ai_platform_runtime_get_revision+0x26>
 8004a84:	4805      	ldr	r0, [pc, #20]	; (8004a9c <ai_platform_runtime_get_revision+0x40>)
 8004a86:	4770      	bx	lr
 8004a88:	e0002000 	.word	0xe0002000
 8004a8c:	40023008 	.word	0x40023008
 8004a90:	40023000 	.word	0x40023000
 8004a94:	f407a5c2 	.word	0xf407a5c2
 8004a98:	b5e8b5cd 	.word	0xb5e8b5cd
 8004a9c:	08037da4 	.word	0x08037da4

08004aa0 <ai_platform_runtime_get_version>:
 8004aa0:	4913      	ldr	r1, [pc, #76]	; (8004af0 <ai_platform_runtime_get_version+0x50>)
 8004aa2:	4a14      	ldr	r2, [pc, #80]	; (8004af4 <ai_platform_runtime_get_version+0x54>)
 8004aa4:	680b      	ldr	r3, [r1, #0]
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	600b      	str	r3, [r1, #0]
 8004aae:	b082      	sub	sp, #8
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	6010      	str	r0, [r2, #0]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	2800      	cmp	r0, #0
 8004ab8:	d1fc      	bne.n	8004ab4 <ai_platform_runtime_get_version+0x14>
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <ai_platform_runtime_get_version+0x58>)
 8004abc:	4a0f      	ldr	r2, [pc, #60]	; (8004afc <ai_platform_runtime_get_version+0x5c>)
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <ai_platform_runtime_get_version+0x60>)
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d000      	beq.n	8004aca <ai_platform_runtime_get_version+0x2a>
 8004ac8:	e7fe      	b.n	8004ac8 <ai_platform_runtime_get_version+0x28>
 8004aca:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <ai_platform_runtime_get_version+0x64>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	f362 0007 	bfi	r0, r2, #0, #8
 8004ad4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ad8:	f362 200f 	bfi	r0, r2, #8, #8
 8004adc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004ae0:	f362 4017 	bfi	r0, r2, #16, #8
 8004ae4:	0e1b      	lsrs	r3, r3, #24
 8004ae6:	f363 601f 	bfi	r0, r3, #24, #8
 8004aea:	b002      	add	sp, #8
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	e0002000 	.word	0xe0002000
 8004af4:	40023008 	.word	0x40023008
 8004af8:	40023000 	.word	0x40023000
 8004afc:	f407a5c2 	.word	0xf407a5c2
 8004b00:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b04:	08037da8 	.word	0x08037da8

08004b08 <ai_platform_api_get_version>:
 8004b08:	4913      	ldr	r1, [pc, #76]	; (8004b58 <ai_platform_api_get_version+0x50>)
 8004b0a:	4a14      	ldr	r2, [pc, #80]	; (8004b5c <ai_platform_api_get_version+0x54>)
 8004b0c:	680b      	ldr	r3, [r1, #0]
 8004b0e:	2001      	movs	r0, #1
 8004b10:	f023 0301 	bic.w	r3, r3, #1
 8004b14:	600b      	str	r3, [r1, #0]
 8004b16:	b082      	sub	sp, #8
 8004b18:	4613      	mov	r3, r2
 8004b1a:	6010      	str	r0, [r2, #0]
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d1fc      	bne.n	8004b1c <ai_platform_api_get_version+0x14>
 8004b22:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <ai_platform_api_get_version+0x58>)
 8004b24:	4a0f      	ldr	r2, [pc, #60]	; (8004b64 <ai_platform_api_get_version+0x5c>)
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <ai_platform_api_get_version+0x60>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d000      	beq.n	8004b32 <ai_platform_api_get_version+0x2a>
 8004b30:	e7fe      	b.n	8004b30 <ai_platform_api_get_version+0x28>
 8004b32:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <ai_platform_api_get_version+0x64>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	f362 0007 	bfi	r0, r2, #0, #8
 8004b3c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004b40:	f362 200f 	bfi	r0, r2, #8, #8
 8004b44:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004b48:	f362 4017 	bfi	r0, r2, #16, #8
 8004b4c:	0e1b      	lsrs	r3, r3, #24
 8004b4e:	f363 601f 	bfi	r0, r3, #24, #8
 8004b52:	b002      	add	sp, #8
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e0002000 	.word	0xe0002000
 8004b5c:	40023008 	.word	0x40023008
 8004b60:	40023000 	.word	0x40023000
 8004b64:	f407a5c2 	.word	0xf407a5c2
 8004b68:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b6c:	08037dac 	.word	0x08037dac

08004b70 <ai_platform_interface_api_get_version>:
 8004b70:	4913      	ldr	r1, [pc, #76]	; (8004bc0 <ai_platform_interface_api_get_version+0x50>)
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <ai_platform_interface_api_get_version+0x54>)
 8004b74:	680b      	ldr	r3, [r1, #0]
 8004b76:	2001      	movs	r0, #1
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	600b      	str	r3, [r1, #0]
 8004b7e:	b082      	sub	sp, #8
 8004b80:	4613      	mov	r3, r2
 8004b82:	6010      	str	r0, [r2, #0]
 8004b84:	6818      	ldr	r0, [r3, #0]
 8004b86:	2800      	cmp	r0, #0
 8004b88:	d1fc      	bne.n	8004b84 <ai_platform_interface_api_get_version+0x14>
 8004b8a:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <ai_platform_interface_api_get_version+0x58>)
 8004b8c:	4a0f      	ldr	r2, [pc, #60]	; (8004bcc <ai_platform_interface_api_get_version+0x5c>)
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <ai_platform_interface_api_get_version+0x60>)
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d000      	beq.n	8004b9a <ai_platform_interface_api_get_version+0x2a>
 8004b98:	e7fe      	b.n	8004b98 <ai_platform_interface_api_get_version+0x28>
 8004b9a:	4b0e      	ldr	r3, [pc, #56]	; (8004bd4 <ai_platform_interface_api_get_version+0x64>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	f362 0007 	bfi	r0, r2, #0, #8
 8004ba4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004ba8:	f362 200f 	bfi	r0, r2, #8, #8
 8004bac:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004bb0:	f362 4017 	bfi	r0, r2, #16, #8
 8004bb4:	0e1b      	lsrs	r3, r3, #24
 8004bb6:	f363 601f 	bfi	r0, r3, #24, #8
 8004bba:	b002      	add	sp, #8
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	e0002000 	.word	0xe0002000
 8004bc4:	40023008 	.word	0x40023008
 8004bc8:	40023000 	.word	0x40023000
 8004bcc:	f407a5c2 	.word	0xf407a5c2
 8004bd0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004bd4:	08037db0 	.word	0x08037db0

08004bd8 <ai_platform_context_acquire>:
 8004bd8:	b410      	push	{r4}
 8004bda:	b120      	cbz	r0, 8004be6 <ai_platform_context_acquire+0xe>
 8004bdc:	4b0d      	ldr	r3, [pc, #52]	; (8004c14 <ai_platform_context_acquire+0x3c>)
 8004bde:	6802      	ldr	r2, [r0, #0]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	bf18      	it	ne
 8004be4:	2000      	movne	r0, #0
 8004be6:	490c      	ldr	r1, [pc, #48]	; (8004c18 <ai_platform_context_acquire+0x40>)
 8004be8:	4a0c      	ldr	r2, [pc, #48]	; (8004c1c <ai_platform_context_acquire+0x44>)
 8004bea:	680b      	ldr	r3, [r1, #0]
 8004bec:	2401      	movs	r4, #1
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	6014      	str	r4, [r2, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	2a00      	cmp	r2, #0
 8004bfc:	d1fc      	bne.n	8004bf8 <ai_platform_context_acquire+0x20>
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <ai_platform_context_acquire+0x48>)
 8004c00:	4a08      	ldr	r2, [pc, #32]	; (8004c24 <ai_platform_context_acquire+0x4c>)
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <ai_platform_context_acquire+0x50>)
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d000      	beq.n	8004c0e <ai_platform_context_acquire+0x36>
 8004c0c:	e7fe      	b.n	8004c0c <ai_platform_context_acquire+0x34>
 8004c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	a1c00100 	.word	0xa1c00100
 8004c18:	e0002000 	.word	0xe0002000
 8004c1c:	40023008 	.word	0x40023008
 8004c20:	40023000 	.word	0x40023000
 8004c24:	f407a5c2 	.word	0xf407a5c2
 8004c28:	b5e8b5cd 	.word	0xb5e8b5cd

08004c2c <ai_platform_network_get_error>:
 8004c2c:	b410      	push	{r4}
 8004c2e:	b120      	cbz	r0, 8004c3a <ai_platform_network_get_error+0xe>
 8004c30:	4b11      	ldr	r3, [pc, #68]	; (8004c78 <ai_platform_network_get_error+0x4c>)
 8004c32:	6802      	ldr	r2, [r0, #0]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	bf18      	it	ne
 8004c38:	2000      	movne	r0, #0
 8004c3a:	4910      	ldr	r1, [pc, #64]	; (8004c7c <ai_platform_network_get_error+0x50>)
 8004c3c:	4a10      	ldr	r2, [pc, #64]	; (8004c80 <ai_platform_network_get_error+0x54>)
 8004c3e:	680b      	ldr	r3, [r1, #0]
 8004c40:	2401      	movs	r4, #1
 8004c42:	f023 0301 	bic.w	r3, r3, #1
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	6014      	str	r4, [r2, #0]
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	2a00      	cmp	r2, #0
 8004c50:	d1fc      	bne.n	8004c4c <ai_platform_network_get_error+0x20>
 8004c52:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <ai_platform_network_get_error+0x58>)
 8004c54:	4a0c      	ldr	r2, [pc, #48]	; (8004c88 <ai_platform_network_get_error+0x5c>)
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	4b0c      	ldr	r3, [pc, #48]	; (8004c8c <ai_platform_network_get_error+0x60>)
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d000      	beq.n	8004c62 <ai_platform_network_get_error+0x36>
 8004c60:	e7fe      	b.n	8004c60 <ai_platform_network_get_error+0x34>
 8004c62:	b120      	cbz	r0, 8004c6e <ai_platform_network_get_error+0x42>
 8004c64:	3010      	adds	r0, #16
 8004c66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c6a:	f000 bc55 	b.w	8005518 <core_get_error>
 8004c6e:	f241 0010 	movw	r0, #4112	; 0x1010
 8004c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	a1c00100 	.word	0xa1c00100
 8004c7c:	e0002000 	.word	0xe0002000
 8004c80:	40023008 	.word	0x40023008
 8004c84:	40023000 	.word	0x40023000
 8004c88:	f407a5c2 	.word	0xf407a5c2
 8004c8c:	b5e8b5cd 	.word	0xb5e8b5cd

08004c90 <ai_platform_api_get_network_report>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	460e      	mov	r6, r1
 8004c94:	4604      	mov	r4, r0
 8004c96:	b120      	cbz	r0, 8004ca2 <ai_platform_api_get_network_report+0x12>
 8004c98:	4b6b      	ldr	r3, [pc, #428]	; (8004e48 <ai_platform_api_get_network_report+0x1b8>)
 8004c9a:	6802      	ldr	r2, [r0, #0]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	bf18      	it	ne
 8004ca0:	2400      	movne	r4, #0
 8004ca2:	496a      	ldr	r1, [pc, #424]	; (8004e4c <ai_platform_api_get_network_report+0x1bc>)
 8004ca4:	4a6a      	ldr	r2, [pc, #424]	; (8004e50 <ai_platform_api_get_network_report+0x1c0>)
 8004ca6:	680b      	ldr	r3, [r1, #0]
 8004ca8:	2001      	movs	r0, #1
 8004caa:	f023 0301 	bic.w	r3, r3, #1
 8004cae:	600b      	str	r3, [r1, #0]
 8004cb0:	4611      	mov	r1, r2
 8004cb2:	6010      	str	r0, [r2, #0]
 8004cb4:	680b      	ldr	r3, [r1, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1fc      	bne.n	8004cb4 <ai_platform_api_get_network_report+0x24>
 8004cba:	4a66      	ldr	r2, [pc, #408]	; (8004e54 <ai_platform_api_get_network_report+0x1c4>)
 8004cbc:	4966      	ldr	r1, [pc, #408]	; (8004e58 <ai_platform_api_get_network_report+0x1c8>)
 8004cbe:	6011      	str	r1, [r2, #0]
 8004cc0:	6811      	ldr	r1, [r2, #0]
 8004cc2:	4a66      	ldr	r2, [pc, #408]	; (8004e5c <ai_platform_api_get_network_report+0x1cc>)
 8004cc4:	4291      	cmp	r1, r2
 8004cc6:	d000      	beq.n	8004cca <ai_platform_api_get_network_report+0x3a>
 8004cc8:	e7fe      	b.n	8004cc8 <ai_platform_api_get_network_report+0x38>
 8004cca:	2c00      	cmp	r4, #0
 8004ccc:	d061      	beq.n	8004d92 <ai_platform_api_get_network_report+0x102>
 8004cce:	2e00      	cmp	r6, #0
 8004cd0:	d061      	beq.n	8004d96 <ai_platform_api_get_network_report+0x106>
 8004cd2:	66f3      	str	r3, [r6, #108]	; 0x6c
 8004cd4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	d055      	beq.n	8004d86 <ai_platform_api_get_network_report+0xf6>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	66f3      	str	r3, [r6, #108]	; 0x6c
 8004cde:	68d3      	ldr	r3, [r2, #12]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d00c      	beq.n	8004cfe <ai_platform_api_get_network_report+0x6e>
 8004ce4:	b15b      	cbz	r3, 8004cfe <ai_platform_api_get_network_report+0x6e>
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	e003      	b.n	8004cf2 <ai_platform_api_get_network_report+0x62>
 8004cea:	1c50      	adds	r0, r2, #1
 8004cec:	460b      	mov	r3, r1
 8004cee:	b121      	cbz	r1, 8004cfa <ai_platform_api_get_network_report+0x6a>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	66f2      	str	r2, [r6, #108]	; 0x6c
 8004cf4:	68d9      	ldr	r1, [r3, #12]
 8004cf6:	4299      	cmp	r1, r3
 8004cf8:	d1f7      	bne.n	8004cea <ai_platform_api_get_network_report+0x5a>
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d043      	beq.n	8004d86 <ai_platform_api_get_network_report+0xf6>
 8004cfe:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8004d02:	b100      	cbz	r0, 8004d06 <ai_platform_api_get_network_report+0x76>
 8004d04:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004d06:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8004d0a:	f7ff fe3a 	bl	8004982 <_ai_platform_get_io_buffers_info>
 8004d0e:	4605      	mov	r5, r0
 8004d10:	8630      	strh	r0, [r6, #48]	; 0x30
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d05e      	beq.n	8004dd4 <ai_platform_api_get_network_report+0x144>
 8004d16:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	bf8a      	itet	hi
 8004d1e:	6ce0      	ldrhi	r0, [r4, #76]	; 0x4c
 8004d20:	2000      	movls	r0, #0
 8004d22:	300c      	addhi	r0, #12
 8004d24:	f106 0138 	add.w	r1, r6, #56	; 0x38
 8004d28:	f7ff fe2b 	bl	8004982 <_ai_platform_get_io_buffers_info>
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	8670      	strh	r0, [r6, #50]	; 0x32
 8004d30:	2800      	cmp	r0, #0
 8004d32:	d047      	beq.n	8004dc4 <ai_platform_api_get_network_report+0x134>
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	6733      	str	r3, [r6, #112]	; 0x70
 8004d38:	f104 0730 	add.w	r7, r4, #48	; 0x30
 8004d3c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004d3e:	f106 053c 	add.w	r5, r6, #60	; 0x3c
 8004d42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d44:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004d48:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d4c:	3418      	adds	r4, #24
 8004d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d50:	f106 0554 	add.w	r5, r6, #84	; 0x54
 8004d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d5e:	4a3b      	ldr	r2, [pc, #236]	; (8004e4c <ai_platform_api_get_network_report+0x1bc>)
 8004d60:	493b      	ldr	r1, [pc, #236]	; (8004e50 <ai_platform_api_get_network_report+0x1c0>)
 8004d62:	6813      	ldr	r3, [r2, #0]
 8004d64:	2001      	movs	r0, #1
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	460a      	mov	r2, r1
 8004d6e:	6008      	str	r0, [r1, #0]
 8004d70:	6813      	ldr	r3, [r2, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1fc      	bne.n	8004d70 <ai_platform_api_get_network_report+0xe0>
 8004d76:	4b37      	ldr	r3, [pc, #220]	; (8004e54 <ai_platform_api_get_network_report+0x1c4>)
 8004d78:	4937      	ldr	r1, [pc, #220]	; (8004e58 <ai_platform_api_get_network_report+0x1c8>)
 8004d7a:	6019      	str	r1, [r3, #0]
 8004d7c:	6819      	ldr	r1, [r3, #0]
 8004d7e:	4b37      	ldr	r3, [pc, #220]	; (8004e5c <ai_platform_api_get_network_report+0x1cc>)
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d00a      	beq.n	8004d9a <ai_platform_api_get_network_report+0x10a>
 8004d84:	e7fe      	b.n	8004d84 <ai_platform_api_get_network_report+0xf4>
 8004d86:	f104 0010 	add.w	r0, r4, #16
 8004d8a:	2218      	movs	r2, #24
 8004d8c:	2111      	movs	r1, #17
 8004d8e:	f000 fbc9 	bl	8005524 <core_set_error>
 8004d92:	2000      	movs	r0, #0
 8004d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d96:	4630      	mov	r0, r6
 8004d98:	e7fc      	b.n	8004d94 <ai_platform_api_get_network_report+0x104>
 8004d9a:	4b31      	ldr	r3, [pc, #196]	; (8004e60 <ai_platform_api_get_network_report+0x1d0>)
 8004d9c:	482b      	ldr	r0, [pc, #172]	; (8004e4c <ai_platform_api_get_network_report+0x1bc>)
 8004d9e:	6133      	str	r3, [r6, #16]
 8004da0:	6803      	ldr	r3, [r0, #0]
 8004da2:	492b      	ldr	r1, [pc, #172]	; (8004e50 <ai_platform_api_get_network_report+0x1c0>)
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	2401      	movs	r4, #1
 8004daa:	6003      	str	r3, [r0, #0]
 8004dac:	6014      	str	r4, [r2, #0]
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1fc      	bne.n	8004dae <ai_platform_api_get_network_report+0x11e>
 8004db4:	4b27      	ldr	r3, [pc, #156]	; (8004e54 <ai_platform_api_get_network_report+0x1c4>)
 8004db6:	4a28      	ldr	r2, [pc, #160]	; (8004e58 <ai_platform_api_get_network_report+0x1c8>)
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <ai_platform_api_get_network_report+0x1cc>)
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d010      	beq.n	8004de4 <ai_platform_api_get_network_report+0x154>
 8004dc2:	e7fe      	b.n	8004dc2 <ai_platform_api_get_network_report+0x132>
 8004dc4:	f104 0010 	add.w	r0, r4, #16
 8004dc8:	2218      	movs	r2, #24
 8004dca:	2113      	movs	r1, #19
 8004dcc:	f000 fbaa 	bl	8005524 <core_set_error>
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	e7df      	b.n	8004d94 <ai_platform_api_get_network_report+0x104>
 8004dd4:	f104 0010 	add.w	r0, r4, #16
 8004dd8:	2218      	movs	r2, #24
 8004dda:	2112      	movs	r1, #18
 8004ddc:	f000 fba2 	bl	8005524 <core_set_error>
 8004de0:	4628      	mov	r0, r5
 8004de2:	e7d7      	b.n	8004d94 <ai_platform_api_get_network_report+0x104>
 8004de4:	f240 2305 	movw	r3, #517	; 0x205
 8004de8:	4818      	ldr	r0, [pc, #96]	; (8004e4c <ai_platform_api_get_network_report+0x1bc>)
 8004dea:	6173      	str	r3, [r6, #20]
 8004dec:	6803      	ldr	r3, [r0, #0]
 8004dee:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <ai_platform_api_get_network_report+0x1c0>)
 8004df0:	f023 0301 	bic.w	r3, r3, #1
 8004df4:	2401      	movs	r4, #1
 8004df6:	6003      	str	r3, [r0, #0]
 8004df8:	600c      	str	r4, [r1, #0]
 8004dfa:	6813      	ldr	r3, [r2, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1fc      	bne.n	8004dfa <ai_platform_api_get_network_report+0x16a>
 8004e00:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <ai_platform_api_get_network_report+0x1c4>)
 8004e02:	4915      	ldr	r1, [pc, #84]	; (8004e58 <ai_platform_api_get_network_report+0x1c8>)
 8004e04:	6019      	str	r1, [r3, #0]
 8004e06:	6819      	ldr	r1, [r3, #0]
 8004e08:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <ai_platform_api_get_network_report+0x1cc>)
 8004e0a:	4299      	cmp	r1, r3
 8004e0c:	d000      	beq.n	8004e10 <ai_platform_api_get_network_report+0x180>
 8004e0e:	e7fe      	b.n	8004e0e <ai_platform_api_get_network_report+0x17e>
 8004e10:	f240 1301 	movw	r3, #257	; 0x101
 8004e14:	490d      	ldr	r1, [pc, #52]	; (8004e4c <ai_platform_api_get_network_report+0x1bc>)
 8004e16:	6273      	str	r3, [r6, #36]	; 0x24
 8004e18:	680b      	ldr	r3, [r1, #0]
 8004e1a:	4c0d      	ldr	r4, [pc, #52]	; (8004e50 <ai_platform_api_get_network_report+0x1c0>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	2001      	movs	r0, #1
 8004e22:	600b      	str	r3, [r1, #0]
 8004e24:	6010      	str	r0, [r2, #0]
 8004e26:	6823      	ldr	r3, [r4, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1fc      	bne.n	8004e26 <ai_platform_api_get_network_report+0x196>
 8004e2c:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <ai_platform_api_get_network_report+0x1c4>)
 8004e2e:	4a0a      	ldr	r2, [pc, #40]	; (8004e58 <ai_platform_api_get_network_report+0x1c8>)
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <ai_platform_api_get_network_report+0x1cc>)
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d000      	beq.n	8004e3c <ai_platform_api_get_network_report+0x1ac>
 8004e3a:	e7fe      	b.n	8004e3a <ai_platform_api_get_network_report+0x1aa>
 8004e3c:	f240 4301 	movw	r3, #1025	; 0x401
 8004e40:	62b3      	str	r3, [r6, #40]	; 0x28
 8004e42:	2001      	movs	r0, #1
 8004e44:	e7a6      	b.n	8004d94 <ai_platform_api_get_network_report+0x104>
 8004e46:	bf00      	nop
 8004e48:	a1c00100 	.word	0xa1c00100
 8004e4c:	e0002000 	.word	0xe0002000
 8004e50:	40023008 	.word	0x40023008
 8004e54:	40023000 	.word	0x40023000
 8004e58:	f407a5c2 	.word	0xf407a5c2
 8004e5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004e60:	08037da4 	.word	0x08037da4

08004e64 <ai_platform_network_create>:
 8004e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e68:	4e23      	ldr	r6, [pc, #140]	; (8004ef8 <ai_platform_network_create+0x94>)
 8004e6a:	4924      	ldr	r1, [pc, #144]	; (8004efc <ai_platform_network_create+0x98>)
 8004e6c:	6835      	ldr	r5, [r6, #0]
 8004e6e:	b082      	sub	sp, #8
 8004e70:	f025 0501 	bic.w	r5, r5, #1
 8004e74:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8004e78:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004e7c:	6035      	str	r5, [r6, #0]
 8004e7e:	2501      	movs	r5, #1
 8004e80:	600d      	str	r5, [r1, #0]
 8004e82:	680d      	ldr	r5, [r1, #0]
 8004e84:	2d00      	cmp	r5, #0
 8004e86:	d1fc      	bne.n	8004e82 <ai_platform_network_create+0x1e>
 8004e88:	491d      	ldr	r1, [pc, #116]	; (8004f00 <ai_platform_network_create+0x9c>)
 8004e8a:	4e1e      	ldr	r6, [pc, #120]	; (8004f04 <ai_platform_network_create+0xa0>)
 8004e8c:	600e      	str	r6, [r1, #0]
 8004e8e:	680e      	ldr	r6, [r1, #0]
 8004e90:	491d      	ldr	r1, [pc, #116]	; (8004f08 <ai_platform_network_create+0xa4>)
 8004e92:	428e      	cmp	r6, r1
 8004e94:	d000      	beq.n	8004e98 <ai_platform_network_create+0x34>
 8004e96:	e7fe      	b.n	8004e96 <ai_platform_network_create+0x32>
 8004e98:	b1d0      	cbz	r0, 8004ed0 <ai_platform_network_create+0x6c>
 8004e9a:	4698      	mov	r8, r3
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	4a1b      	ldr	r2, [pc, #108]	; (8004f0c <ai_platform_network_create+0xa8>)
 8004ea0:	601a      	str	r2, [r3, #0]
 8004ea2:	6003      	str	r3, [r0, #0]
 8004ea4:	4606      	mov	r6, r0
 8004ea6:	f000 fb35 	bl	8005514 <core_init>
 8004eaa:	b1b0      	cbz	r0, 8004eda <ai_platform_network_create+0x76>
 8004eac:	0223      	lsls	r3, r4, #8
 8004eae:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004eb2:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
 8004eb6:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 8004eba:	d910      	bls.n	8004ede <ai_platform_network_create+0x7a>
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	6033      	str	r3, [r6, #0]
 8004ec2:	2310      	movs	r3, #16
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	f362 0007 	bfi	r0, r2, #0, #8
 8004eca:	f363 201f 	bfi	r0, r3, #8, #24
 8004ece:	e001      	b.n	8004ed4 <ai_platform_network_create+0x70>
 8004ed0:	f241 0010 	movw	r0, #4112	; 0x1010
 8004ed4:	b002      	add	sp, #8
 8004ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eda:	2230      	movs	r2, #48	; 0x30
 8004edc:	e7ef      	b.n	8004ebe <ai_platform_network_create+0x5a>
 8004ede:	a802      	add	r0, sp, #8
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <ai_platform_network_create+0xac>)
 8004ee2:	f840 3d04 	str.w	r3, [r0, #-4]!
 8004ee6:	f000 ffe9 	bl	8005ebc <ai_check_custom_types>
 8004eea:	b110      	cbz	r0, 8004ef2 <ai_platform_network_create+0x8e>
 8004eec:	462b      	mov	r3, r5
 8004eee:	462a      	mov	r2, r5
 8004ef0:	e7e8      	b.n	8004ec4 <ai_platform_network_create+0x60>
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	e7e3      	b.n	8004ebe <ai_platform_network_create+0x5a>
 8004ef6:	bf00      	nop
 8004ef8:	e0002000 	.word	0xe0002000
 8004efc:	40023008 	.word	0x40023008
 8004f00:	40023000 	.word	0x40023000
 8004f04:	f407a5c2 	.word	0xf407a5c2
 8004f08:	b5e8b5cd 	.word	0xb5e8b5cd
 8004f0c:	a1c00100 	.word	0xa1c00100
 8004f10:	84048403 	.word	0x84048403

08004f14 <ai_platform_network_destroy>:
 8004f14:	b430      	push	{r4, r5}
 8004f16:	b1f0      	cbz	r0, 8004f56 <ai_platform_network_destroy+0x42>
 8004f18:	4a10      	ldr	r2, [pc, #64]	; (8004f5c <ai_platform_network_destroy+0x48>)
 8004f1a:	6803      	ldr	r3, [r0, #0]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	bf0c      	ite	eq
 8004f20:	4603      	moveq	r3, r0
 8004f22:	2300      	movne	r3, #0
 8004f24:	4c0e      	ldr	r4, [pc, #56]	; (8004f60 <ai_platform_network_destroy+0x4c>)
 8004f26:	490f      	ldr	r1, [pc, #60]	; (8004f64 <ai_platform_network_destroy+0x50>)
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	2501      	movs	r5, #1
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	460a      	mov	r2, r1
 8004f34:	600d      	str	r5, [r1, #0]
 8004f36:	6811      	ldr	r1, [r2, #0]
 8004f38:	2900      	cmp	r1, #0
 8004f3a:	d1fc      	bne.n	8004f36 <ai_platform_network_destroy+0x22>
 8004f3c:	4a0a      	ldr	r2, [pc, #40]	; (8004f68 <ai_platform_network_destroy+0x54>)
 8004f3e:	490b      	ldr	r1, [pc, #44]	; (8004f6c <ai_platform_network_destroy+0x58>)
 8004f40:	6011      	str	r1, [r2, #0]
 8004f42:	6811      	ldr	r1, [r2, #0]
 8004f44:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <ai_platform_network_destroy+0x5c>)
 8004f46:	4291      	cmp	r1, r2
 8004f48:	d000      	beq.n	8004f4c <ai_platform_network_destroy+0x38>
 8004f4a:	e7fe      	b.n	8004f4a <ai_platform_network_destroy+0x36>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf18      	it	ne
 8004f50:	2000      	movne	r0, #0
 8004f52:	bc30      	pop	{r4, r5}
 8004f54:	4770      	bx	lr
 8004f56:	4603      	mov	r3, r0
 8004f58:	e7e4      	b.n	8004f24 <ai_platform_network_destroy+0x10>
 8004f5a:	bf00      	nop
 8004f5c:	a1c00100 	.word	0xa1c00100
 8004f60:	e0002000 	.word	0xe0002000
 8004f64:	40023008 	.word	0x40023008
 8004f68:	40023000 	.word	0x40023000
 8004f6c:	f407a5c2 	.word	0xf407a5c2
 8004f70:	b5e8b5cd 	.word	0xb5e8b5cd

08004f74 <ai_platform_network_init>:
 8004f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f76:	460c      	mov	r4, r1
 8004f78:	4605      	mov	r5, r0
 8004f7a:	b120      	cbz	r0, 8004f86 <ai_platform_network_init+0x12>
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <ai_platform_network_init+0xe4>)
 8004f7e:	6802      	ldr	r2, [r0, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	bf18      	it	ne
 8004f84:	2500      	movne	r5, #0
 8004f86:	4935      	ldr	r1, [pc, #212]	; (800505c <ai_platform_network_init+0xe8>)
 8004f88:	4a35      	ldr	r2, [pc, #212]	; (8005060 <ai_platform_network_init+0xec>)
 8004f8a:	680b      	ldr	r3, [r1, #0]
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	600b      	str	r3, [r1, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	6010      	str	r0, [r2, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	2a00      	cmp	r2, #0
 8004f9c:	d1fc      	bne.n	8004f98 <ai_platform_network_init+0x24>
 8004f9e:	4b31      	ldr	r3, [pc, #196]	; (8005064 <ai_platform_network_init+0xf0>)
 8004fa0:	4a31      	ldr	r2, [pc, #196]	; (8005068 <ai_platform_network_init+0xf4>)
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b31      	ldr	r3, [pc, #196]	; (800506c <ai_platform_network_init+0xf8>)
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d000      	beq.n	8004fae <ai_platform_network_init+0x3a>
 8004fac:	e7fe      	b.n	8004fac <ai_platform_network_init+0x38>
 8004fae:	b33d      	cbz	r5, 8005000 <ai_platform_network_init+0x8c>
 8004fb0:	b344      	cbz	r4, 8005004 <ai_platform_network_init+0x90>
 8004fb2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004fb4:	6926      	ldr	r6, [r4, #16]
 8004fb6:	2f00      	cmp	r7, #0
 8004fb8:	d03d      	beq.n	8005036 <ai_platform_network_init+0xc2>
 8004fba:	b35e      	cbz	r6, 8005014 <ai_platform_network_init+0xa0>
 8004fbc:	4627      	mov	r7, r4
 8004fbe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004fc0:	f105 0618 	add.w	r6, r5, #24
 8004fc4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004fc6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8004fca:	e886 0003 	stmia.w	r6, {r0, r1}
 8004fce:	3418      	adds	r4, #24
 8004fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fd2:	f105 0630 	add.w	r6, r5, #48	; 0x30
 8004fd6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004fd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fdc:	e886 0003 	stmia.w	r6, {r0, r1}
 8004fe0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	60eb      	str	r3, [r5, #12]
 8004fe6:	b15a      	cbz	r2, 8005000 <ai_platform_network_init+0x8c>
 8004fe8:	68d3      	ldr	r3, [r2, #12]
 8004fea:	6095      	str	r5, [r2, #8]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d007      	beq.n	8005000 <ai_platform_network_init+0x8c>
 8004ff0:	b133      	cbz	r3, 8005000 <ai_platform_network_init+0x8c>
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	609d      	str	r5, [r3, #8]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d002      	beq.n	8005000 <ai_platform_network_init+0x8c>
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1f8      	bne.n	8004ff2 <ai_platform_network_init+0x7e>
 8005000:	4628      	mov	r0, r5
 8005002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005004:	f105 0010 	add.w	r0, r5, #16
 8005008:	2211      	movs	r2, #17
 800500a:	2110      	movs	r1, #16
 800500c:	f000 fa8a 	bl	8005524 <core_set_error>
 8005010:	4625      	mov	r5, r4
 8005012:	e7f5      	b.n	8005000 <ai_platform_network_init+0x8c>
 8005014:	8921      	ldrh	r1, [r4, #8]
 8005016:	88e2      	ldrh	r2, [r4, #6]
 8005018:	68e3      	ldr	r3, [r4, #12]
 800501a:	fb02 f201 	mul.w	r2, r2, r1
 800501e:	fb03 f302 	mul.w	r3, r3, r2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0ca      	beq.n	8004fbc <ai_platform_network_init+0x48>
 8005026:	f105 0010 	add.w	r0, r5, #16
 800502a:	2212      	movs	r2, #18
 800502c:	2110      	movs	r1, #16
 800502e:	f000 fa79 	bl	8005524 <core_set_error>
 8005032:	4635      	mov	r5, r6
 8005034:	e7e4      	b.n	8005000 <ai_platform_network_init+0x8c>
 8005036:	8c21      	ldrh	r1, [r4, #32]
 8005038:	8be2      	ldrh	r2, [r4, #30]
 800503a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800503c:	fb02 f201 	mul.w	r2, r2, r1
 8005040:	fb03 f302 	mul.w	r3, r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0b8      	beq.n	8004fba <ai_platform_network_init+0x46>
 8005048:	f105 0010 	add.w	r0, r5, #16
 800504c:	2213      	movs	r2, #19
 800504e:	2110      	movs	r1, #16
 8005050:	f000 fa68 	bl	8005524 <core_set_error>
 8005054:	463d      	mov	r5, r7
 8005056:	e7d3      	b.n	8005000 <ai_platform_network_init+0x8c>
 8005058:	a1c00100 	.word	0xa1c00100
 800505c:	e0002000 	.word	0xe0002000
 8005060:	40023008 	.word	0x40023008
 8005064:	40023000 	.word	0x40023000
 8005068:	f407a5c2 	.word	0xf407a5c2
 800506c:	b5e8b5cd 	.word	0xb5e8b5cd

08005070 <ai_platform_network_post_init>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4604      	mov	r4, r0
 8005074:	b120      	cbz	r0, 8005080 <ai_platform_network_post_init+0x10>
 8005076:	4b1c      	ldr	r3, [pc, #112]	; (80050e8 <ai_platform_network_post_init+0x78>)
 8005078:	6802      	ldr	r2, [r0, #0]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf18      	it	ne
 800507e:	2400      	movne	r4, #0
 8005080:	491a      	ldr	r1, [pc, #104]	; (80050ec <ai_platform_network_post_init+0x7c>)
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <ai_platform_network_post_init+0x80>)
 8005084:	680b      	ldr	r3, [r1, #0]
 8005086:	2001      	movs	r0, #1
 8005088:	f023 0301 	bic.w	r3, r3, #1
 800508c:	600b      	str	r3, [r1, #0]
 800508e:	4613      	mov	r3, r2
 8005090:	6010      	str	r0, [r2, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	2a00      	cmp	r2, #0
 8005096:	d1fc      	bne.n	8005092 <ai_platform_network_post_init+0x22>
 8005098:	4b16      	ldr	r3, [pc, #88]	; (80050f4 <ai_platform_network_post_init+0x84>)
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <ai_platform_network_post_init+0x88>)
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <ai_platform_network_post_init+0x8c>)
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d000      	beq.n	80050a8 <ai_platform_network_post_init+0x38>
 80050a6:	e7fe      	b.n	80050a6 <ai_platform_network_post_init+0x36>
 80050a8:	b1a4      	cbz	r4, 80050d4 <ai_platform_network_post_init+0x64>
 80050aa:	68e3      	ldr	r3, [r4, #12]
 80050ac:	f013 0502 	ands.w	r5, r3, #2
 80050b0:	d012      	beq.n	80050d8 <ai_platform_network_post_init+0x68>
 80050b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050b4:	b163      	cbz	r3, 80050d0 <ai_platform_network_post_init+0x60>
 80050b6:	6d25      	ldr	r5, [r4, #80]	; 0x50
 80050b8:	b91d      	cbnz	r5, 80050c2 <ai_platform_network_post_init+0x52>
 80050ba:	e009      	b.n	80050d0 <ai_platform_network_post_init+0x60>
 80050bc:	461d      	mov	r5, r3
 80050be:	b13b      	cbz	r3, 80050d0 <ai_platform_network_post_init+0x60>
 80050c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050c2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80050c4:	4629      	mov	r1, r5
 80050c6:	2000      	movs	r0, #0
 80050c8:	4798      	blx	r3
 80050ca:	68eb      	ldr	r3, [r5, #12]
 80050cc:	42ab      	cmp	r3, r5
 80050ce:	d1f5      	bne.n	80050bc <ai_platform_network_post_init+0x4c>
 80050d0:	2001      	movs	r0, #1
 80050d2:	bd38      	pop	{r3, r4, r5, pc}
 80050d4:	4620      	mov	r0, r4
 80050d6:	bd38      	pop	{r3, r4, r5, pc}
 80050d8:	f104 0010 	add.w	r0, r4, #16
 80050dc:	2210      	movs	r2, #16
 80050de:	2111      	movs	r1, #17
 80050e0:	f000 fa20 	bl	8005524 <core_set_error>
 80050e4:	4628      	mov	r0, r5
 80050e6:	bd38      	pop	{r3, r4, r5, pc}
 80050e8:	a1c00100 	.word	0xa1c00100
 80050ec:	e0002000 	.word	0xe0002000
 80050f0:	40023008 	.word	0x40023008
 80050f4:	40023000 	.word	0x40023000
 80050f8:	f407a5c2 	.word	0xf407a5c2
 80050fc:	b5e8b5cd 	.word	0xb5e8b5cd

08005100 <ai_platform_network_process>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	b083      	sub	sp, #12
 8005106:	4604      	mov	r4, r0
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	b120      	cbz	r0, 8005116 <ai_platform_network_process+0x16>
 800510c:	4ba5      	ldr	r3, [pc, #660]	; (80053a4 <ai_platform_network_process+0x2a4>)
 800510e:	6802      	ldr	r2, [r0, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	bf18      	it	ne
 8005114:	2400      	movne	r4, #0
 8005116:	48a4      	ldr	r0, [pc, #656]	; (80053a8 <ai_platform_network_process+0x2a8>)
 8005118:	4ba4      	ldr	r3, [pc, #656]	; (80053ac <ai_platform_network_process+0x2ac>)
 800511a:	6802      	ldr	r2, [r0, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	6002      	str	r2, [r0, #0]
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	2a00      	cmp	r2, #0
 800512a:	d1fc      	bne.n	8005126 <ai_platform_network_process+0x26>
 800512c:	4ba0      	ldr	r3, [pc, #640]	; (80053b0 <ai_platform_network_process+0x2b0>)
 800512e:	4aa1      	ldr	r2, [pc, #644]	; (80053b4 <ai_platform_network_process+0x2b4>)
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4ba0      	ldr	r3, [pc, #640]	; (80053b8 <ai_platform_network_process+0x2b8>)
 8005136:	429a      	cmp	r2, r3
 8005138:	d000      	beq.n	800513c <ai_platform_network_process+0x3c>
 800513a:	e7fe      	b.n	800513a <ai_platform_network_process+0x3a>
 800513c:	2c00      	cmp	r4, #0
 800513e:	d066      	beq.n	800520e <ai_platform_network_process+0x10e>
 8005140:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 8005144:	b107      	cbz	r7, 8005148 <ai_platform_network_process+0x48>
 8005146:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 8005148:	68e3      	ldr	r3, [r4, #12]
 800514a:	f003 0303 	and.w	r3, r3, #3
 800514e:	2600      	movs	r6, #0
 8005150:	2b03      	cmp	r3, #3
 8005152:	6166      	str	r6, [r4, #20]
 8005154:	f040 80fe 	bne.w	8005354 <ai_platform_network_process+0x254>
 8005158:	2900      	cmp	r1, #0
 800515a:	d07f      	beq.n	800525c <ai_platform_network_process+0x15c>
 800515c:	2f00      	cmp	r7, #0
 800515e:	d07d      	beq.n	800525c <ai_platform_network_process+0x15c>
 8005160:	883b      	ldrh	r3, [r7, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d07a      	beq.n	800525c <ai_platform_network_process+0x15c>
 8005166:	460d      	mov	r5, r1
 8005168:	46a0      	mov	r8, r4
 800516a:	f835 9f04 	ldrh.w	r9, [r5, #4]!
 800516e:	429e      	cmp	r6, r3
 8005170:	d27d      	bcs.n	800526e <ai_platform_network_process+0x16e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d07a      	beq.n	800526e <ai_platform_network_process+0x16e>
 8005178:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 800517c:	2c00      	cmp	r4, #0
 800517e:	d076      	beq.n	800526e <ai_platform_network_process+0x16e>
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	eb13 1a06 	adds.w	sl, r3, r6, lsl #4
 8005188:	d067      	beq.n	800525a <ai_platform_network_process+0x15a>
 800518a:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 800518e:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 8005192:	69a0      	ldr	r0, [r4, #24]
 8005194:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8005198:	6841      	ldr	r1, [r0, #4]
 800519a:	fb0b f30e 	mul.w	r3, fp, lr
 800519e:	fb0c f303 	mul.w	r3, ip, r3
 80051a2:	4299      	cmp	r1, r3
 80051a4:	d350      	bcc.n	8005248 <ai_platform_network_process+0x148>
 80051a6:	68e3      	ldr	r3, [r4, #12]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	455a      	cmp	r2, fp
 80051ac:	d14c      	bne.n	8005248 <ai_platform_network_process+0x148>
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	4572      	cmp	r2, lr
 80051b2:	d149      	bne.n	8005248 <ai_platform_network_process+0x148>
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	459c      	cmp	ip, r3
 80051b8:	d146      	bne.n	8005248 <ai_platform_network_process+0x148>
 80051ba:	6800      	ldr	r0, [r0, #0]
 80051bc:	f000 ff2e 	bl	800601c <ai_array_get_byte_size>
 80051c0:	68e2      	ldr	r2, [r4, #12]
 80051c2:	6963      	ldr	r3, [r4, #20]
 80051c4:	68d2      	ldr	r2, [r2, #12]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	fb03 f302 	mul.w	r3, r3, r2
 80051cc:	4298      	cmp	r0, r3
 80051ce:	d33b      	bcc.n	8005248 <ai_platform_network_process+0x148>
 80051d0:	69a3      	ldr	r3, [r4, #24]
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	f000 fed6 	bl	8005f84 <ai_array_to_buffer_fmt>
 80051d8:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80051dc:	4043      	eors	r3, r0
 80051de:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 80051e2:	d128      	bne.n	8005236 <ai_platform_network_process+0x136>
 80051e4:	68eb      	ldr	r3, [r5, #12]
 80051e6:	b1f3      	cbz	r3, 8005226 <ai_platform_network_process+0x126>
 80051e8:	f8b5 b000 	ldrh.w	fp, [r5]
 80051ec:	f1bb 0f00 	cmp.w	fp, #0
 80051f0:	d012      	beq.n	8005218 <ai_platform_network_process+0x118>
 80051f2:	4623      	mov	r3, r4
 80051f4:	f105 020c 	add.w	r2, r5, #12
 80051f8:	4629      	mov	r1, r5
 80051fa:	4650      	mov	r0, sl
 80051fc:	f7ff fc0f 	bl	8004a1e <_platform_network_state_setup.isra.1>
 8005200:	45d9      	cmp	r9, fp
 8005202:	883b      	ldrh	r3, [r7, #0]
 8005204:	bf38      	it	cc
 8005206:	46d9      	movcc	r9, fp
 8005208:	3601      	adds	r6, #1
 800520a:	3518      	adds	r5, #24
 800520c:	e7af      	b.n	800516e <ai_platform_network_process+0x6e>
 800520e:	46a3      	mov	fp, r4
 8005210:	4658      	mov	r0, fp
 8005212:	b003      	add	sp, #12
 8005214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005218:	f108 0010 	add.w	r0, r8, #16
 800521c:	2221      	movs	r2, #33	; 0x21
 800521e:	2112      	movs	r1, #18
 8005220:	f000 f980 	bl	8005524 <core_set_error>
 8005224:	e7f4      	b.n	8005210 <ai_platform_network_process+0x110>
 8005226:	f108 0010 	add.w	r0, r8, #16
 800522a:	2217      	movs	r2, #23
 800522c:	2112      	movs	r1, #18
 800522e:	469b      	mov	fp, r3
 8005230:	f000 f978 	bl	8005524 <core_set_error>
 8005234:	e7ec      	b.n	8005210 <ai_platform_network_process+0x110>
 8005236:	f108 0010 	add.w	r0, r8, #16
 800523a:	2219      	movs	r2, #25
 800523c:	2112      	movs	r1, #18
 800523e:	f000 f971 	bl	8005524 <core_set_error>
 8005242:	f04f 0b00 	mov.w	fp, #0
 8005246:	e7e3      	b.n	8005210 <ai_platform_network_process+0x110>
 8005248:	f108 0010 	add.w	r0, r8, #16
 800524c:	2218      	movs	r2, #24
 800524e:	2112      	movs	r1, #18
 8005250:	f000 f968 	bl	8005524 <core_set_error>
 8005254:	f04f 0b00 	mov.w	fp, #0
 8005258:	e7da      	b.n	8005210 <ai_platform_network_process+0x110>
 800525a:	4644      	mov	r4, r8
 800525c:	f104 0010 	add.w	r0, r4, #16
 8005260:	2217      	movs	r2, #23
 8005262:	2112      	movs	r1, #18
 8005264:	f000 f95e 	bl	8005524 <core_set_error>
 8005268:	f04f 0b00 	mov.w	fp, #0
 800526c:	e7d0      	b.n	8005210 <ai_platform_network_process+0x110>
 800526e:	9a01      	ldr	r2, [sp, #4]
 8005270:	f8b8 3048 	ldrh.w	r3, [r8, #72]	; 0x48
 8005274:	4644      	mov	r4, r8
 8005276:	2a00      	cmp	r2, #0
 8005278:	f000 80a4 	beq.w	80053c4 <ai_platform_network_process+0x2c4>
 800527c:	2b01      	cmp	r3, #1
 800527e:	f240 8140 	bls.w	8005502 <ai_platform_network_process+0x402>
 8005282:	f8d8 804c 	ldr.w	r8, [r8, #76]	; 0x4c
 8005286:	f118 0f0c 	cmn.w	r8, #12
 800528a:	f000 813a 	beq.w	8005502 <ai_platform_network_process+0x402>
 800528e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8135 	beq.w	8005502 <ai_platform_network_process+0x402>
 8005298:	3204      	adds	r2, #4
 800529a:	4615      	mov	r5, r2
 800529c:	2700      	movs	r7, #0
 800529e:	429f      	cmp	r7, r3
 80052a0:	f080 808c 	bcs.w	80053bc <ai_platform_network_process+0x2bc>
 80052a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 8087 	beq.w	80053bc <ai_platform_network_process+0x2bc>
 80052ae:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 80052b2:	2e00      	cmp	r6, #0
 80052b4:	f000 8082 	beq.w	80053bc <ai_platform_network_process+0x2bc>
 80052b8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	eb13 1a07 	adds.w	sl, r3, r7, lsl #4
 80052c2:	d067      	beq.n	8005394 <ai_platform_network_process+0x294>
 80052c4:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 80052c8:	f8b5 b002 	ldrh.w	fp, [r5, #2]
 80052cc:	69b0      	ldr	r0, [r6, #24]
 80052ce:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80052d2:	6841      	ldr	r1, [r0, #4]
 80052d4:	fb0b f30e 	mul.w	r3, fp, lr
 80052d8:	fb0c f303 	mul.w	r3, ip, r3
 80052dc:	4299      	cmp	r1, r3
 80052de:	f0c0 8110 	bcc.w	8005502 <ai_platform_network_process+0x402>
 80052e2:	68f3      	ldr	r3, [r6, #12]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	455a      	cmp	r2, fp
 80052e8:	f040 810b 	bne.w	8005502 <ai_platform_network_process+0x402>
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	4572      	cmp	r2, lr
 80052f0:	f040 8107 	bne.w	8005502 <ai_platform_network_process+0x402>
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	459c      	cmp	ip, r3
 80052f8:	f040 8103 	bne.w	8005502 <ai_platform_network_process+0x402>
 80052fc:	6800      	ldr	r0, [r0, #0]
 80052fe:	f000 fe8d 	bl	800601c <ai_array_get_byte_size>
 8005302:	68f2      	ldr	r2, [r6, #12]
 8005304:	6973      	ldr	r3, [r6, #20]
 8005306:	68d2      	ldr	r2, [r2, #12]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	fb03 f302 	mul.w	r3, r3, r2
 800530e:	4298      	cmp	r0, r3
 8005310:	f0c0 80f7 	bcc.w	8005502 <ai_platform_network_process+0x402>
 8005314:	69b3      	ldr	r3, [r6, #24]
 8005316:	6818      	ldr	r0, [r3, #0]
 8005318:	f000 fe34 	bl	8005f84 <ai_array_to_buffer_fmt>
 800531c:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005320:	4043      	eors	r3, r0
 8005322:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 8005326:	d12c      	bne.n	8005382 <ai_platform_network_process+0x282>
 8005328:	68eb      	ldr	r3, [r5, #12]
 800532a:	b313      	cbz	r3, 8005372 <ai_platform_network_process+0x272>
 800532c:	f8b5 b000 	ldrh.w	fp, [r5]
 8005330:	f1bb 0f00 	cmp.w	fp, #0
 8005334:	d016      	beq.n	8005364 <ai_platform_network_process+0x264>
 8005336:	4633      	mov	r3, r6
 8005338:	f105 020c 	add.w	r2, r5, #12
 800533c:	4629      	mov	r1, r5
 800533e:	4650      	mov	r0, sl
 8005340:	f7ff fb6d 	bl	8004a1e <_platform_network_state_setup.isra.1>
 8005344:	45d9      	cmp	r9, fp
 8005346:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800534a:	bf38      	it	cc
 800534c:	46d9      	movcc	r9, fp
 800534e:	3701      	adds	r7, #1
 8005350:	3518      	adds	r5, #24
 8005352:	e7a4      	b.n	800529e <ai_platform_network_process+0x19e>
 8005354:	f104 0010 	add.w	r0, r4, #16
 8005358:	2230      	movs	r2, #48	; 0x30
 800535a:	2111      	movs	r1, #17
 800535c:	f000 f8e2 	bl	8005524 <core_set_error>
 8005360:	46b3      	mov	fp, r6
 8005362:	e755      	b.n	8005210 <ai_platform_network_process+0x110>
 8005364:	f104 0010 	add.w	r0, r4, #16
 8005368:	2221      	movs	r2, #33	; 0x21
 800536a:	2113      	movs	r1, #19
 800536c:	f000 f8da 	bl	8005524 <core_set_error>
 8005370:	e74e      	b.n	8005210 <ai_platform_network_process+0x110>
 8005372:	f104 0010 	add.w	r0, r4, #16
 8005376:	2217      	movs	r2, #23
 8005378:	2113      	movs	r1, #19
 800537a:	469b      	mov	fp, r3
 800537c:	f000 f8d2 	bl	8005524 <core_set_error>
 8005380:	e746      	b.n	8005210 <ai_platform_network_process+0x110>
 8005382:	f104 0010 	add.w	r0, r4, #16
 8005386:	2219      	movs	r2, #25
 8005388:	2113      	movs	r1, #19
 800538a:	f000 f8cb 	bl	8005524 <core_set_error>
 800538e:	f04f 0b00 	mov.w	fp, #0
 8005392:	e73d      	b.n	8005210 <ai_platform_network_process+0x110>
 8005394:	f104 0010 	add.w	r0, r4, #16
 8005398:	2217      	movs	r2, #23
 800539a:	2113      	movs	r1, #19
 800539c:	f000 f8c2 	bl	8005524 <core_set_error>
 80053a0:	46d3      	mov	fp, sl
 80053a2:	e735      	b.n	8005210 <ai_platform_network_process+0x110>
 80053a4:	a1c00100 	.word	0xa1c00100
 80053a8:	e0002000 	.word	0xe0002000
 80053ac:	40023008 	.word	0x40023008
 80053b0:	40023000 	.word	0x40023000
 80053b4:	f407a5c2 	.word	0xf407a5c2
 80053b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80053bc:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 80053c0:	f8a4 9014 	strh.w	r9, [r4, #20]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8099 	beq.w	80054fc <ai_platform_network_process+0x3fc>
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80053ce:	f240 8093 	bls.w	80054f8 <ai_platform_network_process+0x3f8>
 80053d2:	f105 070c 	add.w	r7, r5, #12
 80053d6:	8ae0      	ldrh	r0, [r4, #22]
 80053d8:	8aa3      	ldrh	r3, [r4, #20]
 80053da:	4283      	cmp	r3, r0
 80053dc:	d977      	bls.n	80054ce <ai_platform_network_process+0x3ce>
 80053de:	46a3      	mov	fp, r4
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	d032      	beq.n	800544a <ai_platform_network_process+0x34a>
 80053e4:	882b      	ldrh	r3, [r5, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02f      	beq.n	800544a <ai_platform_network_process+0x34a>
 80053ea:	686b      	ldr	r3, [r5, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02c      	beq.n	800544a <ai_platform_network_process+0x34a>
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	b343      	cbz	r3, 800544a <ai_platform_network_process+0x34a>
 80053f8:	68a9      	ldr	r1, [r5, #8]
 80053fa:	699a      	ldr	r2, [r3, #24]
 80053fc:	f8d1 a000 	ldr.w	sl, [r1]
 8005400:	6814      	ldr	r4, [r2, #0]
 8005402:	6890      	ldr	r0, [r2, #8]
 8005404:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005408:	eb0a 0609 	add.w	r6, sl, r9
 800540c:	00a4      	lsls	r4, r4, #2
 800540e:	6871      	ldr	r1, [r6, #4]
 8005410:	d45f      	bmi.n	80054d2 <ai_platform_network_process+0x3d2>
 8005412:	68d4      	ldr	r4, [r2, #12]
 8005414:	1b00      	subs	r0, r0, r4
 8005416:	4401      	add	r1, r0
 8005418:	6091      	str	r1, [r2, #8]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	6872      	ldr	r2, [r6, #4]
 800541e:	60da      	str	r2, [r3, #12]
 8005420:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 8005424:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005428:	440b      	add	r3, r1
 800542a:	4293      	cmp	r3, r2
 800542c:	bf24      	itt	cs
 800542e:	68f3      	ldrcs	r3, [r6, #12]
 8005430:	1ad3      	subcs	r3, r2, r3
 8005432:	6073      	str	r3, [r6, #4]
 8005434:	882b      	ldrh	r3, [r5, #0]
 8005436:	f108 0801 	add.w	r8, r8, #1
 800543a:	4598      	cmp	r8, r3
 800543c:	d205      	bcs.n	800544a <ai_platform_network_process+0x34a>
 800543e:	686b      	ldr	r3, [r5, #4]
 8005440:	b11b      	cbz	r3, 800544a <ai_platform_network_process+0x34a>
 8005442:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1d6      	bne.n	80053f8 <ai_platform_network_process+0x2f8>
 800544a:	4658      	mov	r0, fp
 800544c:	f000 fd60 	bl	8005f10 <ai_layers_forward_all>
 8005450:	2f00      	cmp	r7, #0
 8005452:	d032      	beq.n	80054ba <ai_platform_network_process+0x3ba>
 8005454:	883b      	ldrh	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d02f      	beq.n	80054ba <ai_platform_network_process+0x3ba>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	b36b      	cbz	r3, 80054ba <ai_platform_network_process+0x3ba>
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	b358      	cbz	r0, 80054ba <ai_platform_network_process+0x3ba>
 8005462:	f04f 0800 	mov.w	r8, #0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	6981      	ldr	r1, [r0, #24]
 800546a:	f8d3 a000 	ldr.w	sl, [r3]
 800546e:	680c      	ldr	r4, [r1, #0]
 8005470:	ea4f 1908 	mov.w	r9, r8, lsl #4
 8005474:	eb0a 0609 	add.w	r6, sl, r9
 8005478:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800547c:	00a4      	lsls	r4, r4, #2
 800547e:	eb0c 0302 	add.w	r3, ip, r2
 8005482:	d42a      	bmi.n	80054da <ai_platform_network_process+0x3da>
 8005484:	f85a 2009 	ldr.w	r2, [sl, r9]
 8005488:	4293      	cmp	r3, r2
 800548a:	bf24      	itt	cs
 800548c:	68f3      	ldrcs	r3, [r6, #12]
 800548e:	1ad3      	subcs	r3, r2, r3
 8005490:	6073      	str	r3, [r6, #4]
 8005492:	6981      	ldr	r1, [r0, #24]
 8005494:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8005498:	1b12      	subs	r2, r2, r4
 800549a:	4413      	add	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
 800549e:	6983      	ldr	r3, [r0, #24]
 80054a0:	6872      	ldr	r2, [r6, #4]
 80054a2:	60da      	str	r2, [r3, #12]
 80054a4:	883b      	ldrh	r3, [r7, #0]
 80054a6:	f108 0801 	add.w	r8, r8, #1
 80054aa:	4598      	cmp	r8, r3
 80054ac:	d205      	bcs.n	80054ba <ai_platform_network_process+0x3ba>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	b11b      	cbz	r3, 80054ba <ai_platform_network_process+0x3ba>
 80054b2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d1d5      	bne.n	8005466 <ai_platform_network_process+0x366>
 80054ba:	f8bb 0016 	ldrh.w	r0, [fp, #22]
 80054be:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 80054c2:	3001      	adds	r0, #1
 80054c4:	b280      	uxth	r0, r0
 80054c6:	4283      	cmp	r3, r0
 80054c8:	f8ab 0016 	strh.w	r0, [fp, #22]
 80054cc:	d888      	bhi.n	80053e0 <ai_platform_network_process+0x2e0>
 80054ce:	4683      	mov	fp, r0
 80054d0:	e69e      	b.n	8005210 <ai_platform_network_process+0x110>
 80054d2:	68b2      	ldr	r2, [r6, #8]
 80054d4:	f000 ff70 	bl	80063b8 <memcpy>
 80054d8:	e7a2      	b.n	8005420 <ai_platform_network_process+0x320>
 80054da:	6889      	ldr	r1, [r1, #8]
 80054dc:	4660      	mov	r0, ip
 80054de:	f000 ff6b 	bl	80063b8 <memcpy>
 80054e2:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 80054e6:	f85a 2009 	ldr.w	r2, [sl, r9]
 80054ea:	440b      	add	r3, r1
 80054ec:	4293      	cmp	r3, r2
 80054ee:	bf24      	itt	cs
 80054f0:	68f3      	ldrcs	r3, [r6, #12]
 80054f2:	1ad3      	subcs	r3, r2, r3
 80054f4:	6073      	str	r3, [r6, #4]
 80054f6:	e7d5      	b.n	80054a4 <ai_platform_network_process+0x3a4>
 80054f8:	2700      	movs	r7, #0
 80054fa:	e76c      	b.n	80053d6 <ai_platform_network_process+0x2d6>
 80054fc:	461d      	mov	r5, r3
 80054fe:	461f      	mov	r7, r3
 8005500:	e769      	b.n	80053d6 <ai_platform_network_process+0x2d6>
 8005502:	f104 0010 	add.w	r0, r4, #16
 8005506:	2218      	movs	r2, #24
 8005508:	2113      	movs	r1, #19
 800550a:	f000 f80b 	bl	8005524 <core_set_error>
 800550e:	f04f 0b00 	mov.w	fp, #0
 8005512:	e67d      	b.n	8005210 <ai_platform_network_process+0x110>

08005514 <core_init>:
 8005514:	2001      	movs	r0, #1
 8005516:	4770      	bx	lr

08005518 <core_get_error>:
 8005518:	4603      	mov	r3, r0
 800551a:	2200      	movs	r2, #0
 800551c:	6800      	ldr	r0, [r0, #0]
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop

08005524 <core_set_error>:
 8005524:	7803      	ldrb	r3, [r0, #0]
 8005526:	b933      	cbnz	r3, 8005536 <core_set_error+0x12>
 8005528:	7001      	strb	r1, [r0, #0]
 800552a:	6803      	ldr	r3, [r0, #0]
 800552c:	f362 231f 	bfi	r3, r2, #8, #24
 8005530:	6003      	str	r3, [r0, #0]
 8005532:	2001      	movs	r0, #1
 8005534:	4770      	bx	lr
 8005536:	2000      	movs	r0, #0
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop

0800553c <ai_dict8_dot_array_f32>:
 800553c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005540:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005544:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 8005548:	f000 80c0 	beq.w	80056cc <ai_dict8_dot_array_f32+0x190>
 800554c:	f101 0408 	add.w	r4, r1, #8
 8005550:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 8005554:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80056d4 <ai_dict8_dot_array_f32+0x198>
 8005558:	eb04 0e09 	add.w	lr, r4, r9
 800555c:	f103 0520 	add.w	r5, r3, #32
 8005560:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 8005564:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 8005568:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800556c:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 8005570:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 8005574:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 8005578:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800557c:	ed55 3a04 	vldr	s7, [r5, #-16]
 8005580:	ed55 4a03 	vldr	s9, [r5, #-12]
 8005584:	ed55 5a02 	vldr	s11, [r5, #-8]
 8005588:	ed55 6a01 	vldr	s13, [r5, #-4]
 800558c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005590:	edd6 7a00 	vldr	s15, [r6]
 8005594:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 8005598:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800559c:	ee67 7a83 	vmul.f32	s15, s15, s6
 80055a0:	ed9a 3a00 	vldr	s6, [sl]
 80055a4:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 80055a8:	eee3 7a05 	vfma.f32	s15, s6, s10
 80055ac:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80055b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055b4:	ed97 3a00 	vldr	s6, [r7]
 80055b8:	ed96 5a00 	vldr	s10, [r6]
 80055bc:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 80055c0:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 80055c4:	eee3 7a04 	vfma.f32	s15, s6, s8
 80055c8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 80055cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055d0:	ed9a 3a00 	vldr	s6, [sl]
 80055d4:	ed96 4a00 	vldr	s8, [r6]
 80055d8:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 80055dc:	eee5 7a06 	vfma.f32	s15, s10, s12
 80055e0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80055e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80055e8:	ed97 5a00 	vldr	s10, [r7]
 80055ec:	ed96 6a00 	vldr	s12, [r6]
 80055f0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80055f4:	3408      	adds	r4, #8
 80055f6:	45a6      	cmp	lr, r4
 80055f8:	f105 0520 	add.w	r5, r5, #32
 80055fc:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005600:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005604:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005608:	ee37 7a27 	vadd.f32	s14, s14, s15
 800560c:	d1a8      	bne.n	8005560 <ai_dict8_dot_array_f32+0x24>
 800560e:	4449      	add	r1, r9
 8005610:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8005614:	f01c 0c07 	ands.w	ip, ip, #7
 8005618:	d050      	beq.n	80056bc <ai_dict8_dot_array_f32+0x180>
 800561a:	780c      	ldrb	r4, [r1, #0]
 800561c:	edd3 6a00 	vldr	s13, [r3]
 8005620:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005624:	edd4 7a00 	vldr	s15, [r4]
 8005628:	f1bc 0f01 	cmp.w	ip, #1
 800562c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005630:	d044      	beq.n	80056bc <ai_dict8_dot_array_f32+0x180>
 8005632:	784c      	ldrb	r4, [r1, #1]
 8005634:	edd3 6a01 	vldr	s13, [r3, #4]
 8005638:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800563c:	edd4 7a00 	vldr	s15, [r4]
 8005640:	f1bc 0f02 	cmp.w	ip, #2
 8005644:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005648:	d038      	beq.n	80056bc <ai_dict8_dot_array_f32+0x180>
 800564a:	788c      	ldrb	r4, [r1, #2]
 800564c:	edd3 6a02 	vldr	s13, [r3, #8]
 8005650:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005654:	edd4 7a00 	vldr	s15, [r4]
 8005658:	f1bc 0f03 	cmp.w	ip, #3
 800565c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005660:	d02c      	beq.n	80056bc <ai_dict8_dot_array_f32+0x180>
 8005662:	78cc      	ldrb	r4, [r1, #3]
 8005664:	edd3 6a03 	vldr	s13, [r3, #12]
 8005668:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800566c:	edd4 7a00 	vldr	s15, [r4]
 8005670:	f1bc 0f04 	cmp.w	ip, #4
 8005674:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005678:	d020      	beq.n	80056bc <ai_dict8_dot_array_f32+0x180>
 800567a:	790c      	ldrb	r4, [r1, #4]
 800567c:	edd3 6a04 	vldr	s13, [r3, #16]
 8005680:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8005684:	edd4 7a00 	vldr	s15, [r4]
 8005688:	f1bc 0f05 	cmp.w	ip, #5
 800568c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005690:	d014      	beq.n	80056bc <ai_dict8_dot_array_f32+0x180>
 8005692:	794c      	ldrb	r4, [r1, #5]
 8005694:	edd3 6a05 	vldr	s13, [r3, #20]
 8005698:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800569c:	edd4 7a00 	vldr	s15, [r4]
 80056a0:	f1bc 0f06 	cmp.w	ip, #6
 80056a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056a8:	d008      	beq.n	80056bc <ai_dict8_dot_array_f32+0x180>
 80056aa:	7989      	ldrb	r1, [r1, #6]
 80056ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80056b0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80056b4:	edd2 6a00 	vldr	s13, [r2]
 80056b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80056bc:	edd0 7a00 	vldr	s15, [r0]
 80056c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056c4:	ed80 7a00 	vstr	s14, [r0]
 80056c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056cc:	ed9f 7a01 	vldr	s14, [pc, #4]	; 80056d4 <ai_dict8_dot_array_f32+0x198>
 80056d0:	e7a0      	b.n	8005614 <ai_dict8_dot_array_f32+0xd8>
 80056d2:	bf00      	nop
 80056d4:	00000000 	.word	0x00000000

080056d8 <ai_dict4_dot_array_f32>:
 80056d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056de:	f027 0c01 	bic.w	ip, r7, #1
 80056e2:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 80056e6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 80056ea:	f000 80ae 	beq.w	800584a <ai_dict4_dot_array_f32+0x172>
 80056ee:	1d0d      	adds	r5, r1, #4
 80056f0:	ea4f 0988 	mov.w	r9, r8, lsl #2
 80056f4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005850 <ai_dict4_dot_array_f32+0x178>
 80056f8:	eb05 0e09 	add.w	lr, r5, r9
 80056fc:	f103 0420 	add.w	r4, r3, #32
 8005700:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 8005704:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 8005708:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800570c:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 8005710:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 8005714:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 8005718:	ed14 5a04 	vldr	s10, [r4, #-16]
 800571c:	ed54 5a03 	vldr	s11, [r4, #-12]
 8005720:	ed14 6a02 	vldr	s12, [r4, #-8]
 8005724:	ed54 6a01 	vldr	s13, [r4, #-4]
 8005728:	f006 0a0f 	and.w	sl, r6, #15
 800572c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005730:	edda 7a00 	vldr	s15, [sl]
 8005734:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 8005738:	0936      	lsrs	r6, r6, #4
 800573a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800573e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005742:	ed96 3a00 	vldr	s6, [r6]
 8005746:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800574a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800574e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005752:	f00b 0b0f 	and.w	fp, fp, #15
 8005756:	edd6 3a00 	vldr	s7, [r6]
 800575a:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800575e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005762:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005766:	3504      	adds	r5, #4
 8005768:	ed9b 4a00 	vldr	s8, [fp]
 800576c:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 8005770:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005774:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 8005778:	f00a 0a0f 	and.w	sl, sl, #15
 800577c:	eddb 4a00 	vldr	s9, [fp]
 8005780:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005784:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 8005788:	45ae      	cmp	lr, r5
 800578a:	ed9a 5a00 	vldr	s10, [sl]
 800578e:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 8005792:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005796:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800579a:	f006 060f 	and.w	r6, r6, #15
 800579e:	edda 5a00 	vldr	s11, [sl]
 80057a2:	eee5 7a86 	vfma.f32	s15, s11, s12
 80057a6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057aa:	f104 0420 	add.w	r4, r4, #32
 80057ae:	ed96 6a00 	vldr	s12, [r6]
 80057b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80057b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80057ba:	d1a1      	bne.n	8005700 <ai_dict4_dot_array_f32+0x28>
 80057bc:	4449      	add	r1, r9
 80057be:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 80057c2:	459c      	cmp	ip, r3
 80057c4:	d92d      	bls.n	8005822 <ai_dict4_dot_array_f32+0x14a>
 80057c6:	f10c 0c07 	add.w	ip, ip, #7
 80057ca:	f103 0508 	add.w	r5, r3, #8
 80057ce:	ebac 0c05 	sub.w	ip, ip, r5
 80057d2:	f02c 0407 	bic.w	r4, ip, #7
 80057d6:	f103 0810 	add.w	r8, r3, #16
 80057da:	44a0      	add	r8, r4
 80057dc:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80057e0:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 80057e4:	ed15 6a01 	vldr	s12, [r5, #-4]
 80057e8:	ed55 6a02 	vldr	s13, [r5, #-8]
 80057ec:	f004 060f 	and.w	r6, r4, #15
 80057f0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80057f4:	0924      	lsrs	r4, r4, #4
 80057f6:	edd6 7a00 	vldr	s15, [r6]
 80057fa:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80057fe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005802:	ed94 6a00 	vldr	s12, [r4]
 8005806:	eee6 7a26 	vfma.f32	s15, s12, s13
 800580a:	3508      	adds	r5, #8
 800580c:	45a8      	cmp	r8, r5
 800580e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005812:	d1e5      	bne.n	80057e0 <ai_dict4_dot_array_f32+0x108>
 8005814:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8005818:	f10c 0c01 	add.w	ip, ip, #1
 800581c:	4461      	add	r1, ip
 800581e:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8005822:	07fc      	lsls	r4, r7, #31
 8005824:	d509      	bpl.n	800583a <ai_dict4_dot_array_f32+0x162>
 8005826:	7809      	ldrb	r1, [r1, #0]
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	090b      	lsrs	r3, r1, #4
 800582e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005832:	edd2 6a00 	vldr	s13, [r2]
 8005836:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800583a:	edd0 7a00 	vldr	s15, [r0]
 800583e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005842:	ed80 7a00 	vstr	s14, [r0]
 8005846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584a:	ed9f 7a01 	vldr	s14, [pc, #4]	; 8005850 <ai_dict4_dot_array_f32+0x178>
 800584e:	e7b8      	b.n	80057c2 <ai_dict4_dot_array_f32+0xea>
 8005850:	00000000 	.word	0x00000000

08005854 <forward_dense>:
 8005854:	6942      	ldr	r2, [r0, #20]
 8005856:	8813      	ldrh	r3, [r2, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 81ca 	beq.w	8005bf2 <forward_dense+0x39e>
 800585e:	6852      	ldr	r2, [r2, #4]
 8005860:	6850      	ldr	r0, [r2, #4]
 8005862:	b100      	cbz	r0, 8005866 <forward_dense+0x12>
 8005864:	6800      	ldr	r0, [r0, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	f240 81c0 	bls.w	8005bec <forward_dense+0x398>
 800586c:	6911      	ldr	r1, [r2, #16]
 800586e:	b101      	cbz	r1, 8005872 <forward_dense+0x1e>
 8005870:	6809      	ldr	r1, [r1, #0]
 8005872:	2b02      	cmp	r3, #2
 8005874:	f000 81bf 	beq.w	8005bf6 <forward_dense+0x3a2>
 8005878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587c:	ed2d 8b10 	vpush	{d8-d15}
 8005880:	69d3      	ldr	r3, [r2, #28]
 8005882:	b091      	sub	sp, #68	; 0x44
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 820b 	beq.w	8005ca0 <forward_dense+0x44c>
 800588a:	681c      	ldr	r4, [r3, #0]
 800588c:	9408      	str	r4, [sp, #32]
 800588e:	f112 0418 	adds.w	r4, r2, #24
 8005892:	f000 81df 	beq.w	8005c54 <forward_dense+0x400>
 8005896:	8b12      	ldrh	r2, [r2, #24]
 8005898:	2a01      	cmp	r2, #1
 800589a:	f240 81fe 	bls.w	8005c9a <forward_dense+0x446>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 81da 	beq.w	8005c58 <forward_dense+0x404>
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	9306      	str	r3, [sp, #24]
 80058a8:	9b08      	ldr	r3, [sp, #32]
 80058aa:	68cc      	ldr	r4, [r1, #12]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	68c5      	ldr	r5, [r0, #12]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80058b6:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80058ba:	f3c2 1cc6 	ubfx	ip, r2, #7, #7
 80058be:	f3c2 5541 	ubfx	r5, r2, #21, #2
 80058c2:	fa4c f505 	asr.w	r5, ip, r5
 80058c6:	f3c2 4243 	ubfx	r2, r2, #17, #4
 80058ca:	950b      	str	r5, [sp, #44]	; 0x2c
 80058cc:	2a04      	cmp	r2, #4
 80058ce:	fb07 f506 	mul.w	r5, r7, r6
 80058d2:	6864      	ldr	r4, [r4, #4]
 80058d4:	9507      	str	r5, [sp, #28]
 80058d6:	f000 81dd 	beq.w	8005c94 <forward_dense+0x440>
 80058da:	2a08      	cmp	r2, #8
 80058dc:	f000 81da 	beq.w	8005c94 <forward_dense+0x440>
 80058e0:	f04f 0a00 	mov.w	sl, #0
 80058e4:	698a      	ldr	r2, [r1, #24]
 80058e6:	6981      	ldr	r1, [r0, #24]
 80058e8:	6890      	ldr	r0, [r2, #8]
 80058ea:	9a08      	ldr	r2, [sp, #32]
 80058ec:	9004      	str	r0, [sp, #16]
 80058ee:	6952      	ldr	r2, [r2, #20]
 80058f0:	688f      	ldr	r7, [r1, #8]
 80058f2:	f8d2 9004 	ldr.w	r9, [r2, #4]
 80058f6:	00a2      	lsls	r2, r4, #2
 80058f8:	9209      	str	r2, [sp, #36]	; 0x24
 80058fa:	1886      	adds	r6, r0, r2
 80058fc:	9a07      	ldr	r2, [sp, #28]
 80058fe:	2a00      	cmp	r2, #0
 8005900:	f000 81c3 	beq.w	8005c8a <forward_dense+0x436>
 8005904:	f1a8 0210 	sub.w	r2, r8, #16
 8005908:	0912      	lsrs	r2, r2, #4
 800590a:	3201      	adds	r2, #1
 800590c:	0192      	lsls	r2, r2, #6
 800590e:	920c      	str	r2, [sp, #48]	; 0x30
 8005910:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8005914:	920a      	str	r2, [sp, #40]	; 0x28
 8005916:	689d      	ldr	r5, [r3, #8]
 8005918:	9b06      	ldr	r3, [sp, #24]
 800591a:	eddf aad0 	vldr	s21, [pc, #832]	; 8005c5c <forward_dense+0x408>
 800591e:	2200      	movs	r2, #0
 8005920:	9205      	str	r2, [sp, #20]
 8005922:	f008 020f 	and.w	r2, r8, #15
 8005926:	920d      	str	r2, [sp, #52]	; 0x34
 8005928:	2b00      	cmp	r3, #0
 800592a:	d043      	beq.n	80059b4 <forward_dense+0x160>
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	689c      	ldr	r4, [r3, #8]
 8005930:	9b04      	ldr	r3, [sp, #16]
 8005932:	f1ba 0f00 	cmp.w	sl, #0
 8005936:	d042      	beq.n	80059be <forward_dense+0x16a>
 8005938:	42b3      	cmp	r3, r6
 800593a:	d22a      	bcs.n	8005992 <forward_dense+0x13e>
 800593c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800593e:	469b      	mov	fp, r3
 8005940:	ab0f      	add	r3, sp, #60	; 0x3c
 8005942:	9303      	str	r3, [sp, #12]
 8005944:	2a04      	cmp	r2, #4
 8005946:	4633      	mov	r3, r6
 8005948:	4646      	mov	r6, r8
 800594a:	4698      	mov	r8, r3
 800594c:	f000 8156 	beq.w	8005bfc <forward_dense+0x3a8>
 8005950:	2c00      	cmp	r4, #0
 8005952:	f000 8185 	beq.w	8005c60 <forward_dense+0x40c>
 8005956:	f8d4 c000 	ldr.w	ip, [r4]
 800595a:	9803      	ldr	r0, [sp, #12]
 800595c:	9600      	str	r6, [sp, #0]
 800595e:	463b      	mov	r3, r7
 8005960:	4629      	mov	r1, r5
 8005962:	4652      	mov	r2, sl
 8005964:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005968:	f7ff fde8 	bl	800553c <ai_dict8_dot_array_f32>
 800596c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800596e:	f84b 3b04 	str.w	r3, [fp], #4
 8005972:	45c3      	cmp	fp, r8
 8005974:	f104 0404 	add.w	r4, r4, #4
 8005978:	444d      	add	r5, r9
 800597a:	d3e9      	bcc.n	8005950 <forward_dense+0xfc>
 800597c:	4643      	mov	r3, r8
 800597e:	46b0      	mov	r8, r6
 8005980:	461e      	mov	r6, r3
 8005982:	9a04      	ldr	r2, [sp, #16]
 8005984:	43d3      	mvns	r3, r2
 8005986:	4433      	add	r3, r6
 8005988:	f023 0303 	bic.w	r3, r3, #3
 800598c:	3304      	adds	r3, #4
 800598e:	18d3      	adds	r3, r2, r3
 8005990:	9304      	str	r3, [sp, #16]
 8005992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005994:	9b05      	ldr	r3, [sp, #20]
 8005996:	4417      	add	r7, r2
 8005998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599a:	4416      	add	r6, r2
 800599c:	9a07      	ldr	r2, [sp, #28]
 800599e:	3301      	adds	r3, #1
 80059a0:	4293      	cmp	r3, r2
 80059a2:	9305      	str	r3, [sp, #20]
 80059a4:	f000 8171 	beq.w	8005c8a <forward_dense+0x436>
 80059a8:	9b08      	ldr	r3, [sp, #32]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	689d      	ldr	r5, [r3, #8]
 80059ae:	9b06      	ldr	r3, [sp, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1bb      	bne.n	800592c <forward_dense+0xd8>
 80059b4:	461c      	mov	r4, r3
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	f1ba 0f00 	cmp.w	sl, #0
 80059bc:	d1bc      	bne.n	8005938 <forward_dense+0xe4>
 80059be:	42b3      	cmp	r3, r6
 80059c0:	d2e7      	bcs.n	8005992 <forward_dense+0x13e>
 80059c2:	4618      	mov	r0, r3
 80059c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80059c6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80059ca:	eb07 0c03 	add.w	ip, r7, r3
 80059ce:	469e      	mov	lr, r3
 80059d0:	2c00      	cmp	r4, #0
 80059d2:	f000 80ff 	beq.w	8005bd4 <forward_dense+0x380>
 80059d6:	f1b8 0f0f 	cmp.w	r8, #15
 80059da:	edd4 fa00 	vldr	s31, [r4]
 80059de:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8005c5c <forward_dense+0x408>
 80059e2:	f104 0404 	add.w	r4, r4, #4
 80059e6:	f240 80fd 	bls.w	8005be4 <forward_dense+0x390>
 80059ea:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80059ee:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80059f2:	4641      	mov	r1, r8
 80059f4:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 80059f8:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80059fc:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 8005a00:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 8005a04:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8005a08:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8005a0c:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 8005a10:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 8005a14:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8005a18:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8005a1c:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 8005a20:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 8005a24:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8005a28:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8005a2c:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 8005a30:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 8005a34:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8005a38:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8005a3c:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 8005a40:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 8005a44:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8005a48:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8005a4c:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 8005a50:	ed13 4a04 	vldr	s8, [r3, #-16]
 8005a54:	ed52 4a04 	vldr	s9, [r2, #-16]
 8005a58:	ed12 5a03 	vldr	s10, [r2, #-12]
 8005a5c:	ed53 5a03 	vldr	s11, [r3, #-12]
 8005a60:	ed12 6a02 	vldr	s12, [r2, #-8]
 8005a64:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005a68:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8005a6c:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 8005a70:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005a74:	3910      	subs	r1, #16
 8005a76:	290f      	cmp	r1, #15
 8005a78:	ed53 ea01 	vldr	s29, [r3, #-4]
 8005a7c:	ed12 ea01 	vldr	s28, [r2, #-4]
 8005a80:	eeed 7a8f 	vfma.f32	s15, s27, s30
 8005a84:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005a88:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005a8c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8005a90:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8005a94:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 8005a98:	eee9 7a89 	vfma.f32	s15, s19, s18
 8005a9c:	eee8 7a88 	vfma.f32	s15, s17, s16
 8005aa0:	eee0 7a20 	vfma.f32	s15, s0, s1
 8005aa4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005aa8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005aac:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005ab0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005ab4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005ab8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005abc:	eeee 7a8e 	vfma.f32	s15, s29, s28
 8005ac0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005ac4:	d896      	bhi.n	80059f4 <forward_dense+0x1a0>
 8005ac6:	eb05 010e 	add.w	r1, r5, lr
 8005aca:	465b      	mov	r3, fp
 8005acc:	4662      	mov	r2, ip
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d075      	beq.n	8005bbe <forward_dense+0x36a>
 8005ad2:	ed91 7a00 	vldr	s14, [r1]
 8005ad6:	edd2 7a00 	vldr	s15, [r2]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ae0:	d06d      	beq.n	8005bbe <forward_dense+0x36a>
 8005ae2:	ed91 7a01 	vldr	s14, [r1, #4]
 8005ae6:	edd2 7a01 	vldr	s15, [r2, #4]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005af0:	d065      	beq.n	8005bbe <forward_dense+0x36a>
 8005af2:	ed91 7a02 	vldr	s14, [r1, #8]
 8005af6:	edd2 7a02 	vldr	s15, [r2, #8]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b00:	d05d      	beq.n	8005bbe <forward_dense+0x36a>
 8005b02:	ed91 7a03 	vldr	s14, [r1, #12]
 8005b06:	edd2 7a03 	vldr	s15, [r2, #12]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b10:	d055      	beq.n	8005bbe <forward_dense+0x36a>
 8005b12:	ed91 7a04 	vldr	s14, [r1, #16]
 8005b16:	edd2 7a04 	vldr	s15, [r2, #16]
 8005b1a:	2b05      	cmp	r3, #5
 8005b1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b20:	d04d      	beq.n	8005bbe <forward_dense+0x36a>
 8005b22:	ed91 7a05 	vldr	s14, [r1, #20]
 8005b26:	edd2 7a05 	vldr	s15, [r2, #20]
 8005b2a:	2b06      	cmp	r3, #6
 8005b2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b30:	d045      	beq.n	8005bbe <forward_dense+0x36a>
 8005b32:	ed91 7a06 	vldr	s14, [r1, #24]
 8005b36:	edd2 7a06 	vldr	s15, [r2, #24]
 8005b3a:	2b07      	cmp	r3, #7
 8005b3c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b40:	d03d      	beq.n	8005bbe <forward_dense+0x36a>
 8005b42:	ed91 7a07 	vldr	s14, [r1, #28]
 8005b46:	edd2 7a07 	vldr	s15, [r2, #28]
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b50:	d035      	beq.n	8005bbe <forward_dense+0x36a>
 8005b52:	ed91 7a08 	vldr	s14, [r1, #32]
 8005b56:	edd2 7a08 	vldr	s15, [r2, #32]
 8005b5a:	2b09      	cmp	r3, #9
 8005b5c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b60:	d02d      	beq.n	8005bbe <forward_dense+0x36a>
 8005b62:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8005b66:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005b6a:	2b0a      	cmp	r3, #10
 8005b6c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b70:	d025      	beq.n	8005bbe <forward_dense+0x36a>
 8005b72:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 8005b76:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8005b7a:	2b0b      	cmp	r3, #11
 8005b7c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b80:	d01d      	beq.n	8005bbe <forward_dense+0x36a>
 8005b82:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 8005b86:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8005b8a:	2b0c      	cmp	r3, #12
 8005b8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005b90:	d015      	beq.n	8005bbe <forward_dense+0x36a>
 8005b92:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 8005b96:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005b9a:	2b0d      	cmp	r3, #13
 8005b9c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005ba0:	d00d      	beq.n	8005bbe <forward_dense+0x36a>
 8005ba2:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8005ba6:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8005baa:	2b0e      	cmp	r3, #14
 8005bac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bb0:	d005      	beq.n	8005bbe <forward_dense+0x36a>
 8005bb2:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 8005bb6:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8005bba:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005bbe:	444d      	add	r5, r9
 8005bc0:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 8005bc4:	ece0 6a01 	vstmia	r0!, {s13}
 8005bc8:	42b0      	cmp	r0, r6
 8005bca:	f4bf aeda 	bcs.w	8005982 <forward_dense+0x12e>
 8005bce:	2c00      	cmp	r4, #0
 8005bd0:	f47f af01 	bne.w	80059d6 <forward_dense+0x182>
 8005bd4:	f1b8 0f0f 	cmp.w	r8, #15
 8005bd8:	eef0 fa6a 	vmov.f32	s31, s21
 8005bdc:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005c5c <forward_dense+0x408>
 8005be0:	f63f af03 	bhi.w	80059ea <forward_dense+0x196>
 8005be4:	4643      	mov	r3, r8
 8005be6:	4629      	mov	r1, r5
 8005be8:	463a      	mov	r2, r7
 8005bea:	e770      	b.n	8005ace <forward_dense+0x27a>
 8005bec:	2300      	movs	r3, #0
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	deff      	udf	#255	; 0xff
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	deff      	udf	#255	; 0xff
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	deff      	udf	#255	; 0xff
 8005bfc:	b1ac      	cbz	r4, 8005c2a <forward_dense+0x3d6>
 8005bfe:	f8d4 c000 	ldr.w	ip, [r4]
 8005c02:	9803      	ldr	r0, [sp, #12]
 8005c04:	9600      	str	r6, [sp, #0]
 8005c06:	463b      	mov	r3, r7
 8005c08:	4629      	mov	r1, r5
 8005c0a:	4652      	mov	r2, sl
 8005c0c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8005c10:	f7ff fd62 	bl	80056d8 <ai_dict4_dot_array_f32>
 8005c14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c16:	f84b 3b04 	str.w	r3, [fp], #4
 8005c1a:	45c3      	cmp	fp, r8
 8005c1c:	f104 0404 	add.w	r4, r4, #4
 8005c20:	444d      	add	r5, r9
 8005c22:	f4bf aeab 	bcs.w	800597c <forward_dense+0x128>
 8005c26:	2c00      	cmp	r4, #0
 8005c28:	d1e9      	bne.n	8005bfe <forward_dense+0x3aa>
 8005c2a:	4634      	mov	r4, r6
 8005c2c:	4646      	mov	r6, r8
 8005c2e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c32:	9400      	str	r4, [sp, #0]
 8005c34:	463b      	mov	r3, r7
 8005c36:	4629      	mov	r1, r5
 8005c38:	4652      	mov	r2, sl
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005c40:	f7ff fd4a 	bl	80056d8 <ai_dict4_dot_array_f32>
 8005c44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c46:	f84b 3b04 	str.w	r3, [fp], #4
 8005c4a:	45b3      	cmp	fp, r6
 8005c4c:	444d      	add	r5, r9
 8005c4e:	d3f0      	bcc.n	8005c32 <forward_dense+0x3de>
 8005c50:	46a0      	mov	r8, r4
 8005c52:	e696      	b.n	8005982 <forward_dense+0x12e>
 8005c54:	9406      	str	r4, [sp, #24]
 8005c56:	e627      	b.n	80058a8 <forward_dense+0x54>
 8005c58:	9306      	str	r3, [sp, #24]
 8005c5a:	e625      	b.n	80058a8 <forward_dense+0x54>
 8005c5c:	00000000 	.word	0x00000000
 8005c60:	4634      	mov	r4, r6
 8005c62:	4646      	mov	r6, r8
 8005c64:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c68:	9400      	str	r4, [sp, #0]
 8005c6a:	463b      	mov	r3, r7
 8005c6c:	4629      	mov	r1, r5
 8005c6e:	4652      	mov	r2, sl
 8005c70:	4640      	mov	r0, r8
 8005c72:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8005c76:	f7ff fc61 	bl	800553c <ai_dict8_dot_array_f32>
 8005c7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c7c:	f84b 3b04 	str.w	r3, [fp], #4
 8005c80:	45b3      	cmp	fp, r6
 8005c82:	444d      	add	r5, r9
 8005c84:	d3f0      	bcc.n	8005c68 <forward_dense+0x414>
 8005c86:	46a0      	mov	r8, r4
 8005c88:	e67b      	b.n	8005982 <forward_dense+0x12e>
 8005c8a:	b011      	add	sp, #68	; 0x44
 8005c8c:	ecbd 8b10 	vpop	{d8-d15}
 8005c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c94:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8005c98:	e624      	b.n	80058e4 <forward_dense+0x90>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9306      	str	r3, [sp, #24]
 8005c9e:	e603      	b.n	80058a8 <forward_dense+0x54>
 8005ca0:	9308      	str	r3, [sp, #32]
 8005ca2:	e5f4      	b.n	800588e <forward_dense+0x3a>

08005ca4 <nl_func_relu_generic_array_f32>:
 8005ca4:	b430      	push	{r4, r5}
 8005ca6:	edd3 6a02 	vldr	s13, [r3, #8]
 8005caa:	6880      	ldr	r0, [r0, #8]
 8005cac:	688c      	ldr	r4, [r1, #8]
 8005cae:	ed93 7a00 	vldr	s14, [r3]
 8005cb2:	ed93 6a01 	vldr	s12, [r3, #4]
 8005cb6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005cba:	3a01      	subs	r2, #1
 8005cbc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005cc0:	0092      	lsls	r2, r2, #2
 8005cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc6:	4410      	add	r0, r2
 8005cc8:	4422      	add	r2, r4
 8005cca:	d421      	bmi.n	8005d10 <nl_func_relu_generic_array_f32+0x6c>
 8005ccc:	42a2      	cmp	r2, r4
 8005cce:	d33d      	bcc.n	8005d4c <nl_func_relu_generic_array_f32+0xa8>
 8005cd0:	1d13      	adds	r3, r2, #4
 8005cd2:	1d02      	adds	r2, r0, #4
 8005cd4:	e010      	b.n	8005cf8 <nl_func_relu_generic_array_f32+0x54>
 8005cd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cde:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005ce2:	dd01      	ble.n	8005ce8 <nl_func_relu_generic_array_f32+0x44>
 8005ce4:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005ce8:	ed62 7a01 	vstmdb	r2!, {s15}
 8005cec:	6888      	ldr	r0, [r1, #8]
 8005cee:	f1a3 0408 	sub.w	r4, r3, #8
 8005cf2:	4284      	cmp	r4, r0
 8005cf4:	462b      	mov	r3, r5
 8005cf6:	d329      	bcc.n	8005d4c <nl_func_relu_generic_array_f32+0xa8>
 8005cf8:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005cfc:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d04:	f1a3 0504 	sub.w	r5, r3, #4
 8005d08:	dce5      	bgt.n	8005cd6 <nl_func_relu_generic_array_f32+0x32>
 8005d0a:	eef0 7a66 	vmov.f32	s15, s13
 8005d0e:	e7eb      	b.n	8005ce8 <nl_func_relu_generic_array_f32+0x44>
 8005d10:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d18:	d01a      	beq.n	8005d50 <nl_func_relu_generic_array_f32+0xac>
 8005d1a:	42a2      	cmp	r2, r4
 8005d1c:	d316      	bcc.n	8005d4c <nl_func_relu_generic_array_f32+0xa8>
 8005d1e:	1d13      	adds	r3, r2, #4
 8005d20:	1d02      	adds	r2, r0, #4
 8005d22:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d26:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005d2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d2e:	f1a3 0408 	sub.w	r4, r3, #8
 8005d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d36:	f1a3 0004 	sub.w	r0, r3, #4
 8005d3a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005d3e:	4623      	mov	r3, r4
 8005d40:	d51e      	bpl.n	8005d80 <nl_func_relu_generic_array_f32+0xdc>
 8005d42:	ed62 6a01 	vstmdb	r2!, {s13}
 8005d46:	688b      	ldr	r3, [r1, #8]
 8005d48:	42a3      	cmp	r3, r4
 8005d4a:	d91e      	bls.n	8005d8a <nl_func_relu_generic_array_f32+0xe6>
 8005d4c:	bc30      	pop	{r4, r5}
 8005d4e:	4770      	bx	lr
 8005d50:	42a2      	cmp	r2, r4
 8005d52:	d3fb      	bcc.n	8005d4c <nl_func_relu_generic_array_f32+0xa8>
 8005d54:	1d13      	adds	r3, r2, #4
 8005d56:	2500      	movs	r5, #0
 8005d58:	1d02      	adds	r2, r0, #4
 8005d5a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d62:	f1a3 0408 	sub.w	r4, r3, #8
 8005d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d6a:	f1a3 0004 	sub.w	r0, r3, #4
 8005d6e:	4623      	mov	r3, r4
 8005d70:	d80d      	bhi.n	8005d8e <nl_func_relu_generic_array_f32+0xea>
 8005d72:	ed62 7a01 	vstmdb	r2!, {s15}
 8005d76:	688b      	ldr	r3, [r1, #8]
 8005d78:	42a3      	cmp	r3, r4
 8005d7a:	d8e7      	bhi.n	8005d4c <nl_func_relu_generic_array_f32+0xa8>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	e7ec      	b.n	8005d5a <nl_func_relu_generic_array_f32+0xb6>
 8005d80:	ed62 7a01 	vstmdb	r2!, {s15}
 8005d84:	688c      	ldr	r4, [r1, #8]
 8005d86:	429c      	cmp	r4, r3
 8005d88:	d8e0      	bhi.n	8005d4c <nl_func_relu_generic_array_f32+0xa8>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	e7c9      	b.n	8005d22 <nl_func_relu_generic_array_f32+0x7e>
 8005d8e:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005d92:	688c      	ldr	r4, [r1, #8]
 8005d94:	429c      	cmp	r4, r3
 8005d96:	d8d9      	bhi.n	8005d4c <nl_func_relu_generic_array_f32+0xa8>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	e7de      	b.n	8005d5a <nl_func_relu_generic_array_f32+0xb6>

08005d9c <forward_relu>:
 8005d9c:	6942      	ldr	r2, [r0, #20]
 8005d9e:	8813      	ldrh	r3, [r2, #0]
 8005da0:	b33b      	cbz	r3, 8005df2 <forward_relu+0x56>
 8005da2:	b470      	push	{r4, r5, r6}
 8005da4:	6852      	ldr	r2, [r2, #4]
 8005da6:	6856      	ldr	r6, [r2, #4]
 8005da8:	b106      	cbz	r6, 8005dac <forward_relu+0x10>
 8005daa:	6836      	ldr	r6, [r6, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d91d      	bls.n	8005dec <forward_relu+0x50>
 8005db0:	6913      	ldr	r3, [r2, #16]
 8005db2:	b103      	cbz	r3, 8005db6 <forward_relu+0x1a>
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6982      	ldr	r2, [r0, #24]
 8005db8:	68b4      	ldr	r4, [r6, #8]
 8005dba:	6998      	ldr	r0, [r3, #24]
 8005dbc:	69b1      	ldr	r1, [r6, #24]
 8005dbe:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8005dc2:	2a00      	cmp	r2, #0
 8005dc4:	d041      	beq.n	8005e4a <forward_relu+0xae>
 8005dc6:	e9d2 5301 	ldrd	r5, r3, [r2, #4]
 8005dca:	2d01      	cmp	r5, #1
 8005dcc:	d013      	beq.n	8005df6 <forward_relu+0x5a>
 8005dce:	2c00      	cmp	r4, #0
 8005dd0:	d06f      	beq.n	8005eb2 <forward_relu+0x116>
 8005dd2:	68f6      	ldr	r6, [r6, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005dda:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005dde:	42a6      	cmp	r6, r4
 8005de0:	fb05 f202 	mul.w	r2, r5, r2
 8005de4:	d1f9      	bne.n	8005dda <forward_relu+0x3e>
 8005de6:	bc70      	pop	{r4, r5, r6}
 8005de8:	f7ff bf5c 	b.w	8005ca4 <nl_func_relu_generic_array_f32>
 8005dec:	2300      	movs	r3, #0
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	deff      	udf	#255	; 0xff
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	deff      	udf	#255	; 0xff
 8005df6:	6880      	ldr	r0, [r0, #8]
 8005df8:	688a      	ldr	r2, [r1, #8]
 8005dfa:	ed93 7a00 	vldr	s14, [r3]
 8005dfe:	b184      	cbz	r4, 8005e22 <forward_relu+0x86>
 8005e00:	68f6      	ldr	r6, [r6, #12]
 8005e02:	462b      	mov	r3, r5
 8005e04:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005e08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e0c:	42a6      	cmp	r6, r4
 8005e0e:	fb05 f303 	mul.w	r3, r5, r3
 8005e12:	d1f9      	bne.n	8005e08 <forward_relu+0x6c>
 8005e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	18d2      	adds	r2, r2, r3
 8005e1e:	4418      	add	r0, r3
 8005e20:	d23d      	bcs.n	8005e9e <forward_relu+0x102>
 8005e22:	1d13      	adds	r3, r2, #4
 8005e24:	2500      	movs	r5, #0
 8005e26:	1d02      	adds	r2, r0, #4
 8005e28:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e34:	f1a3 0004 	sub.w	r0, r3, #4
 8005e38:	d833      	bhi.n	8005ea2 <forward_relu+0x106>
 8005e3a:	ed62 7a01 	vstmdb	r2!, {s15}
 8005e3e:	688c      	ldr	r4, [r1, #8]
 8005e40:	3b08      	subs	r3, #8
 8005e42:	429c      	cmp	r4, r3
 8005e44:	d82b      	bhi.n	8005e9e <forward_relu+0x102>
 8005e46:	4603      	mov	r3, r0
 8005e48:	e7ee      	b.n	8005e28 <forward_relu+0x8c>
 8005e4a:	6880      	ldr	r0, [r0, #8]
 8005e4c:	688b      	ldr	r3, [r1, #8]
 8005e4e:	b184      	cbz	r4, 8005e72 <forward_relu+0xd6>
 8005e50:	68f6      	ldr	r6, [r6, #12]
 8005e52:	2201      	movs	r2, #1
 8005e54:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8005e58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e5c:	42a6      	cmp	r6, r4
 8005e5e:	fb05 f202 	mul.w	r2, r5, r2
 8005e62:	d1f9      	bne.n	8005e58 <forward_relu+0xbc>
 8005e64:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005e68:	3a01      	subs	r2, #1
 8005e6a:	0092      	lsls	r2, r2, #2
 8005e6c:	189b      	adds	r3, r3, r2
 8005e6e:	4410      	add	r0, r2
 8005e70:	d215      	bcs.n	8005e9e <forward_relu+0x102>
 8005e72:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005eb8 <forward_relu+0x11c>
 8005e76:	3304      	adds	r3, #4
 8005e78:	3004      	adds	r0, #4
 8005e7a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005e7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e86:	bfb8      	it	lt
 8005e88:	eef0 7a47 	vmovlt.f32	s15, s14
 8005e8c:	ed60 7a01 	vstmdb	r0!, {s15}
 8005e90:	688c      	ldr	r4, [r1, #8]
 8005e92:	f1a3 0208 	sub.w	r2, r3, #8
 8005e96:	4294      	cmp	r4, r2
 8005e98:	f1a3 0304 	sub.w	r3, r3, #4
 8005e9c:	d9ed      	bls.n	8005e7a <forward_relu+0xde>
 8005e9e:	bc70      	pop	{r4, r5, r6}
 8005ea0:	4770      	bx	lr
 8005ea2:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005ea6:	688c      	ldr	r4, [r1, #8]
 8005ea8:	3b08      	subs	r3, #8
 8005eaa:	429c      	cmp	r4, r3
 8005eac:	d8f7      	bhi.n	8005e9e <forward_relu+0x102>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	e7ba      	b.n	8005e28 <forward_relu+0x8c>
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	e797      	b.n	8005de6 <forward_relu+0x4a>
 8005eb6:	bf00      	nop
 8005eb8:	00000000 	.word	0x00000000

08005ebc <ai_check_custom_types>:
 8005ebc:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <ai_check_custom_types+0x50>)
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	9301      	str	r3, [sp, #4]
 8005ec4:	b118      	cbz	r0, 8005ece <ai_check_custom_types+0x12>
 8005ec6:	7803      	ldrb	r3, [r0, #0]
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d002      	beq.n	8005ed2 <ai_check_custom_types+0x16>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	b002      	add	sp, #8
 8005ed0:	4770      	bx	lr
 8005ed2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d004      	beq.n	8005ee4 <ai_check_custom_types+0x28>
 8005eda:	2001      	movs	r0, #1
 8005edc:	f080 0001 	eor.w	r0, r0, #1
 8005ee0:	b002      	add	sp, #8
 8005ee2:	4770      	bx	lr
 8005ee4:	7842      	ldrb	r2, [r0, #1]
 8005ee6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	f100 0001 	add.w	r0, r0, #1
 8005ef0:	d1f3      	bne.n	8005eda <ai_check_custom_types+0x1e>
 8005ef2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005ef6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d1ed      	bne.n	8005eda <ai_check_custom_types+0x1e>
 8005efe:	7842      	ldrb	r2, [r0, #1]
 8005f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d1e8      	bne.n	8005eda <ai_check_custom_types+0x1e>
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e7e7      	b.n	8005edc <ai_check_custom_types+0x20>
 8005f0c:	08009b8c 	.word	0x08009b8c

08005f10 <ai_layers_forward_all>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	6d86      	ldr	r6, [r0, #88]	; 0x58
 8005f14:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8005f16:	4604      	mov	r4, r0
 8005f18:	b31e      	cbz	r6, 8005f62 <ai_layers_forward_all+0x52>
 8005f1a:	b1cd      	cbz	r5, 8005f50 <ai_layers_forward_all+0x40>
 8005f1c:	6545      	str	r5, [r0, #84]	; 0x54
 8005f1e:	4629      	mov	r1, r5
 8005f20:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8005f22:	2001      	movs	r0, #1
 8005f24:	47b0      	blx	r6
 8005f26:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005f28:	2700      	movs	r7, #0
 8005f2a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f2c:	2002      	movs	r0, #2
 8005f2e:	47b0      	blx	r6
 8005f30:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8005f32:	692b      	ldr	r3, [r5, #16]
 8005f34:	4628      	mov	r0, r5
 8005f36:	4798      	blx	r3
 8005f38:	68eb      	ldr	r3, [r5, #12]
 8005f3a:	429d      	cmp	r5, r3
 8005f3c:	f04f 0003 	mov.w	r0, #3
 8005f40:	4619      	mov	r1, r3
 8005f42:	d006      	beq.n	8005f52 <ai_layers_forward_all+0x42>
 8005f44:	6563      	str	r3, [r4, #84]	; 0x54
 8005f46:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f48:	47b0      	blx	r6
 8005f4a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	d1ec      	bne.n	8005f2a <ai_layers_forward_all+0x1a>
 8005f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f52:	2100      	movs	r1, #0
 8005f54:	6567      	str	r7, [r4, #84]	; 0x54
 8005f56:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005f58:	47b0      	blx	r6
 8005f5a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005f5c:	2900      	cmp	r1, #0
 8005f5e:	d1e4      	bne.n	8005f2a <ai_layers_forward_all+0x1a>
 8005f60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	d0f4      	beq.n	8005f50 <ai_layers_forward_all+0x40>
 8005f66:	6545      	str	r5, [r0, #84]	; 0x54
 8005f68:	692b      	ldr	r3, [r5, #16]
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	4798      	blx	r3
 8005f6e:	68eb      	ldr	r3, [r5, #12]
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	d004      	beq.n	8005f7e <ai_layers_forward_all+0x6e>
 8005f74:	6563      	str	r3, [r4, #84]	; 0x54
 8005f76:	461d      	mov	r5, r3
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1f5      	bne.n	8005f68 <ai_layers_forward_all+0x58>
 8005f7c:	e7e8      	b.n	8005f50 <ai_layers_forward_all+0x40>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6563      	str	r3, [r4, #84]	; 0x54
 8005f82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005f84 <ai_array_to_buffer_fmt>:
 8005f84:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d01f      	beq.n	8005fcc <ai_array_to_buffer_fmt+0x48>
 8005f8c:	4a1c      	ldr	r2, [pc, #112]	; (8006000 <ai_array_to_buffer_fmt+0x7c>)
 8005f8e:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00a      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005f96:	dc0d      	bgt.n	8005fb4 <ai_array_to_buffer_fmt+0x30>
 8005f98:	4a1a      	ldr	r2, [pc, #104]	; (8006004 <ai_array_to_buffer_fmt+0x80>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d006      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005f9e:	dd1d      	ble.n	8005fdc <ai_array_to_buffer_fmt+0x58>
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <ai_array_to_buffer_fmt+0x84>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d002      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005fa6:	320f      	adds	r2, #15
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10d      	bne.n	8005fc8 <ai_array_to_buffer_fmt+0x44>
 8005fac:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005fb0:	4318      	orrs	r0, r3
 8005fb2:	4770      	bx	lr
 8005fb4:	4a15      	ldr	r2, [pc, #84]	; (800600c <ai_array_to_buffer_fmt+0x88>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d0f8      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005fba:	dd18      	ble.n	8005fee <ai_array_to_buffer_fmt+0x6a>
 8005fbc:	4a14      	ldr	r2, [pc, #80]	; (8006010 <ai_array_to_buffer_fmt+0x8c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d0f4      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005fc2:	4a14      	ldr	r2, [pc, #80]	; (8006014 <ai_array_to_buffer_fmt+0x90>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d0f1      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005fc8:	2340      	movs	r3, #64	; 0x40
 8005fca:	e7ef      	b.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005fcc:	4b12      	ldr	r3, [pc, #72]	; (8006018 <ai_array_to_buffer_fmt+0x94>)
 8005fce:	4003      	ands	r3, r0
 8005fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005fd4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005fd8:	4318      	orrs	r0, r3
 8005fda:	4770      	bx	lr
 8005fdc:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d0e3      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d0df      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005fec:	e7ec      	b.n	8005fc8 <ai_array_to_buffer_fmt+0x44>
 8005fee:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d0da      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005ff6:	3207      	adds	r2, #7
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d0d7      	beq.n	8005fac <ai_array_to_buffer_fmt+0x28>
 8005ffc:	e7e4      	b.n	8005fc8 <ai_array_to_buffer_fmt+0x44>
 8005ffe:	bf00      	nop
 8006000:	00840040 	.word	0x00840040
 8006004:	00040447 	.word	0x00040447
 8006008:	00040840 	.word	0x00040840
 800600c:	00840840 	.word	0x00840840
 8006010:	0084084f 	.word	0x0084084f
 8006014:	01821040 	.word	0x01821040
 8006018:	00803fff 	.word	0x00803fff

0800601c <ai_array_get_byte_size>:
 800601c:	b1c1      	cbz	r1, 8006050 <ai_array_get_byte_size+0x34>
 800601e:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8006022:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006026:	4413      	add	r3, r2
 8006028:	fb01 f103 	mul.w	r1, r1, r3
 800602c:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8006030:	3107      	adds	r1, #7
 8006032:	f3c0 4043 	ubfx	r0, r0, #17, #4
 8006036:	f021 0107 	bic.w	r1, r1, #7
 800603a:	2804      	cmp	r0, #4
 800603c:	fa21 f102 	lsr.w	r1, r1, r2
 8006040:	d008      	beq.n	8006054 <ai_array_get_byte_size+0x38>
 8006042:	2808      	cmp	r0, #8
 8006044:	d101      	bne.n	800604a <ai_array_get_byte_size+0x2e>
 8006046:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800604a:	3107      	adds	r1, #7
 800604c:	08c8      	lsrs	r0, r1, #3
 800604e:	4770      	bx	lr
 8006050:	4608      	mov	r0, r1
 8006052:	4770      	bx	lr
 8006054:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 8006058:	3107      	adds	r1, #7
 800605a:	08c8      	lsrs	r0, r1, #3
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop

08006060 <__errno>:
 8006060:	4b01      	ldr	r3, [pc, #4]	; (8006068 <__errno+0x8>)
 8006062:	6818      	ldr	r0, [r3, #0]
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	200009cc 	.word	0x200009cc

0800606c <__sflush_r>:
 800606c:	898a      	ldrh	r2, [r1, #12]
 800606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	4605      	mov	r5, r0
 8006074:	0710      	lsls	r0, r2, #28
 8006076:	460c      	mov	r4, r1
 8006078:	d458      	bmi.n	800612c <__sflush_r+0xc0>
 800607a:	684b      	ldr	r3, [r1, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	dc05      	bgt.n	800608c <__sflush_r+0x20>
 8006080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	dc02      	bgt.n	800608c <__sflush_r+0x20>
 8006086:	2000      	movs	r0, #0
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800608e:	2e00      	cmp	r6, #0
 8006090:	d0f9      	beq.n	8006086 <__sflush_r+0x1a>
 8006092:	2300      	movs	r3, #0
 8006094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006098:	682f      	ldr	r7, [r5, #0]
 800609a:	6a21      	ldr	r1, [r4, #32]
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	d032      	beq.n	8006106 <__sflush_r+0x9a>
 80060a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	075a      	lsls	r2, r3, #29
 80060a6:	d505      	bpl.n	80060b4 <__sflush_r+0x48>
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	1ac0      	subs	r0, r0, r3
 80060ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060ae:	b10b      	cbz	r3, 80060b4 <__sflush_r+0x48>
 80060b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060b2:	1ac0      	subs	r0, r0, r3
 80060b4:	2300      	movs	r3, #0
 80060b6:	4602      	mov	r2, r0
 80060b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ba:	6a21      	ldr	r1, [r4, #32]
 80060bc:	4628      	mov	r0, r5
 80060be:	47b0      	blx	r6
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	d106      	bne.n	80060d4 <__sflush_r+0x68>
 80060c6:	6829      	ldr	r1, [r5, #0]
 80060c8:	291d      	cmp	r1, #29
 80060ca:	d848      	bhi.n	800615e <__sflush_r+0xf2>
 80060cc:	4a29      	ldr	r2, [pc, #164]	; (8006174 <__sflush_r+0x108>)
 80060ce:	40ca      	lsrs	r2, r1
 80060d0:	07d6      	lsls	r6, r2, #31
 80060d2:	d544      	bpl.n	800615e <__sflush_r+0xf2>
 80060d4:	2200      	movs	r2, #0
 80060d6:	6062      	str	r2, [r4, #4]
 80060d8:	04d9      	lsls	r1, r3, #19
 80060da:	6922      	ldr	r2, [r4, #16]
 80060dc:	6022      	str	r2, [r4, #0]
 80060de:	d504      	bpl.n	80060ea <__sflush_r+0x7e>
 80060e0:	1c42      	adds	r2, r0, #1
 80060e2:	d101      	bne.n	80060e8 <__sflush_r+0x7c>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b903      	cbnz	r3, 80060ea <__sflush_r+0x7e>
 80060e8:	6560      	str	r0, [r4, #84]	; 0x54
 80060ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ec:	602f      	str	r7, [r5, #0]
 80060ee:	2900      	cmp	r1, #0
 80060f0:	d0c9      	beq.n	8006086 <__sflush_r+0x1a>
 80060f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d002      	beq.n	8006100 <__sflush_r+0x94>
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 f970 	bl	80063e0 <_free_r>
 8006100:	2000      	movs	r0, #0
 8006102:	6360      	str	r0, [r4, #52]	; 0x34
 8006104:	e7c0      	b.n	8006088 <__sflush_r+0x1c>
 8006106:	2301      	movs	r3, #1
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	1c41      	adds	r1, r0, #1
 800610e:	d1c8      	bne.n	80060a2 <__sflush_r+0x36>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c5      	beq.n	80060a2 <__sflush_r+0x36>
 8006116:	2b1d      	cmp	r3, #29
 8006118:	d001      	beq.n	800611e <__sflush_r+0xb2>
 800611a:	2b16      	cmp	r3, #22
 800611c:	d101      	bne.n	8006122 <__sflush_r+0xb6>
 800611e:	602f      	str	r7, [r5, #0]
 8006120:	e7b1      	b.n	8006086 <__sflush_r+0x1a>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	e7ad      	b.n	8006088 <__sflush_r+0x1c>
 800612c:	690f      	ldr	r7, [r1, #16]
 800612e:	2f00      	cmp	r7, #0
 8006130:	d0a9      	beq.n	8006086 <__sflush_r+0x1a>
 8006132:	0793      	lsls	r3, r2, #30
 8006134:	680e      	ldr	r6, [r1, #0]
 8006136:	bf08      	it	eq
 8006138:	694b      	ldreq	r3, [r1, #20]
 800613a:	600f      	str	r7, [r1, #0]
 800613c:	bf18      	it	ne
 800613e:	2300      	movne	r3, #0
 8006140:	eba6 0807 	sub.w	r8, r6, r7
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	f1b8 0f00 	cmp.w	r8, #0
 800614a:	dd9c      	ble.n	8006086 <__sflush_r+0x1a>
 800614c:	4643      	mov	r3, r8
 800614e:	463a      	mov	r2, r7
 8006150:	6a21      	ldr	r1, [r4, #32]
 8006152:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006154:	4628      	mov	r0, r5
 8006156:	47b0      	blx	r6
 8006158:	2800      	cmp	r0, #0
 800615a:	dc06      	bgt.n	800616a <__sflush_r+0xfe>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006168:	e78e      	b.n	8006088 <__sflush_r+0x1c>
 800616a:	4407      	add	r7, r0
 800616c:	eba8 0800 	sub.w	r8, r8, r0
 8006170:	e7e9      	b.n	8006146 <__sflush_r+0xda>
 8006172:	bf00      	nop
 8006174:	20400001 	.word	0x20400001

08006178 <_fflush_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b1db      	cbz	r3, 80061ba <_fflush_r+0x42>
 8006182:	b118      	cbz	r0, 800618c <_fflush_r+0x14>
 8006184:	6983      	ldr	r3, [r0, #24]
 8006186:	b90b      	cbnz	r3, 800618c <_fflush_r+0x14>
 8006188:	f000 f860 	bl	800624c <__sinit>
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <_fflush_r+0x48>)
 800618e:	429c      	cmp	r4, r3
 8006190:	d109      	bne.n	80061a6 <_fflush_r+0x2e>
 8006192:	686c      	ldr	r4, [r5, #4]
 8006194:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006198:	b17b      	cbz	r3, 80061ba <_fflush_r+0x42>
 800619a:	4621      	mov	r1, r4
 800619c:	4628      	mov	r0, r5
 800619e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a2:	f7ff bf63 	b.w	800606c <__sflush_r>
 80061a6:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <_fflush_r+0x4c>)
 80061a8:	429c      	cmp	r4, r3
 80061aa:	d101      	bne.n	80061b0 <_fflush_r+0x38>
 80061ac:	68ac      	ldr	r4, [r5, #8]
 80061ae:	e7f1      	b.n	8006194 <_fflush_r+0x1c>
 80061b0:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <_fflush_r+0x50>)
 80061b2:	429c      	cmp	r4, r3
 80061b4:	bf08      	it	eq
 80061b6:	68ec      	ldreq	r4, [r5, #12]
 80061b8:	e7ec      	b.n	8006194 <_fflush_r+0x1c>
 80061ba:	2000      	movs	r0, #0
 80061bc:	bd38      	pop	{r3, r4, r5, pc}
 80061be:	bf00      	nop
 80061c0:	08037dd4 	.word	0x08037dd4
 80061c4:	08037df4 	.word	0x08037df4
 80061c8:	08037db4 	.word	0x08037db4

080061cc <std>:
 80061cc:	2300      	movs	r3, #0
 80061ce:	b510      	push	{r4, lr}
 80061d0:	4604      	mov	r4, r0
 80061d2:	e9c0 3300 	strd	r3, r3, [r0]
 80061d6:	6083      	str	r3, [r0, #8]
 80061d8:	8181      	strh	r1, [r0, #12]
 80061da:	6643      	str	r3, [r0, #100]	; 0x64
 80061dc:	81c2      	strh	r2, [r0, #14]
 80061de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061e2:	6183      	str	r3, [r0, #24]
 80061e4:	4619      	mov	r1, r3
 80061e6:	2208      	movs	r2, #8
 80061e8:	305c      	adds	r0, #92	; 0x5c
 80061ea:	f000 f8f0 	bl	80063ce <memset>
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <std+0x38>)
 80061f0:	6263      	str	r3, [r4, #36]	; 0x24
 80061f2:	4b05      	ldr	r3, [pc, #20]	; (8006208 <std+0x3c>)
 80061f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <std+0x40>)
 80061f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80061fa:	4b05      	ldr	r3, [pc, #20]	; (8006210 <std+0x44>)
 80061fc:	6224      	str	r4, [r4, #32]
 80061fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006200:	bd10      	pop	{r4, pc}
 8006202:	bf00      	nop
 8006204:	08006f89 	.word	0x08006f89
 8006208:	08006fab 	.word	0x08006fab
 800620c:	08006fe3 	.word	0x08006fe3
 8006210:	08007007 	.word	0x08007007

08006214 <_cleanup_r>:
 8006214:	4901      	ldr	r1, [pc, #4]	; (800621c <_cleanup_r+0x8>)
 8006216:	f000 b885 	b.w	8006324 <_fwalk_reent>
 800621a:	bf00      	nop
 800621c:	08006179 	.word	0x08006179

08006220 <__sfmoreglue>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	1e4a      	subs	r2, r1, #1
 8006224:	2568      	movs	r5, #104	; 0x68
 8006226:	4355      	muls	r5, r2
 8006228:	460e      	mov	r6, r1
 800622a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800622e:	f000 f925 	bl	800647c <_malloc_r>
 8006232:	4604      	mov	r4, r0
 8006234:	b140      	cbz	r0, 8006248 <__sfmoreglue+0x28>
 8006236:	2100      	movs	r1, #0
 8006238:	e9c0 1600 	strd	r1, r6, [r0]
 800623c:	300c      	adds	r0, #12
 800623e:	60a0      	str	r0, [r4, #8]
 8006240:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006244:	f000 f8c3 	bl	80063ce <memset>
 8006248:	4620      	mov	r0, r4
 800624a:	bd70      	pop	{r4, r5, r6, pc}

0800624c <__sinit>:
 800624c:	6983      	ldr	r3, [r0, #24]
 800624e:	b510      	push	{r4, lr}
 8006250:	4604      	mov	r4, r0
 8006252:	bb33      	cbnz	r3, 80062a2 <__sinit+0x56>
 8006254:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006258:	6503      	str	r3, [r0, #80]	; 0x50
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <__sinit+0x58>)
 800625c:	4a12      	ldr	r2, [pc, #72]	; (80062a8 <__sinit+0x5c>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6282      	str	r2, [r0, #40]	; 0x28
 8006262:	4298      	cmp	r0, r3
 8006264:	bf04      	itt	eq
 8006266:	2301      	moveq	r3, #1
 8006268:	6183      	streq	r3, [r0, #24]
 800626a:	f000 f81f 	bl	80062ac <__sfp>
 800626e:	6060      	str	r0, [r4, #4]
 8006270:	4620      	mov	r0, r4
 8006272:	f000 f81b 	bl	80062ac <__sfp>
 8006276:	60a0      	str	r0, [r4, #8]
 8006278:	4620      	mov	r0, r4
 800627a:	f000 f817 	bl	80062ac <__sfp>
 800627e:	2200      	movs	r2, #0
 8006280:	60e0      	str	r0, [r4, #12]
 8006282:	2104      	movs	r1, #4
 8006284:	6860      	ldr	r0, [r4, #4]
 8006286:	f7ff ffa1 	bl	80061cc <std>
 800628a:	2201      	movs	r2, #1
 800628c:	2109      	movs	r1, #9
 800628e:	68a0      	ldr	r0, [r4, #8]
 8006290:	f7ff ff9c 	bl	80061cc <std>
 8006294:	2202      	movs	r2, #2
 8006296:	2112      	movs	r1, #18
 8006298:	68e0      	ldr	r0, [r4, #12]
 800629a:	f7ff ff97 	bl	80061cc <std>
 800629e:	2301      	movs	r3, #1
 80062a0:	61a3      	str	r3, [r4, #24]
 80062a2:	bd10      	pop	{r4, pc}
 80062a4:	08037e14 	.word	0x08037e14
 80062a8:	08006215 	.word	0x08006215

080062ac <__sfp>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	4b1b      	ldr	r3, [pc, #108]	; (800631c <__sfp+0x70>)
 80062b0:	681e      	ldr	r6, [r3, #0]
 80062b2:	69b3      	ldr	r3, [r6, #24]
 80062b4:	4607      	mov	r7, r0
 80062b6:	b913      	cbnz	r3, 80062be <__sfp+0x12>
 80062b8:	4630      	mov	r0, r6
 80062ba:	f7ff ffc7 	bl	800624c <__sinit>
 80062be:	3648      	adds	r6, #72	; 0x48
 80062c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	d503      	bpl.n	80062d0 <__sfp+0x24>
 80062c8:	6833      	ldr	r3, [r6, #0]
 80062ca:	b133      	cbz	r3, 80062da <__sfp+0x2e>
 80062cc:	6836      	ldr	r6, [r6, #0]
 80062ce:	e7f7      	b.n	80062c0 <__sfp+0x14>
 80062d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062d4:	b16d      	cbz	r5, 80062f2 <__sfp+0x46>
 80062d6:	3468      	adds	r4, #104	; 0x68
 80062d8:	e7f4      	b.n	80062c4 <__sfp+0x18>
 80062da:	2104      	movs	r1, #4
 80062dc:	4638      	mov	r0, r7
 80062de:	f7ff ff9f 	bl	8006220 <__sfmoreglue>
 80062e2:	6030      	str	r0, [r6, #0]
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d1f1      	bne.n	80062cc <__sfp+0x20>
 80062e8:	230c      	movs	r3, #12
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4604      	mov	r4, r0
 80062ee:	4620      	mov	r0, r4
 80062f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <__sfp+0x74>)
 80062f4:	6665      	str	r5, [r4, #100]	; 0x64
 80062f6:	e9c4 5500 	strd	r5, r5, [r4]
 80062fa:	60a5      	str	r5, [r4, #8]
 80062fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006300:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006304:	2208      	movs	r2, #8
 8006306:	4629      	mov	r1, r5
 8006308:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800630c:	f000 f85f 	bl	80063ce <memset>
 8006310:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006314:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006318:	e7e9      	b.n	80062ee <__sfp+0x42>
 800631a:	bf00      	nop
 800631c:	08037e14 	.word	0x08037e14
 8006320:	ffff0001 	.word	0xffff0001

08006324 <_fwalk_reent>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	4680      	mov	r8, r0
 800632a:	4689      	mov	r9, r1
 800632c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006330:	2600      	movs	r6, #0
 8006332:	b914      	cbnz	r4, 800633a <_fwalk_reent+0x16>
 8006334:	4630      	mov	r0, r6
 8006336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800633a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800633e:	3f01      	subs	r7, #1
 8006340:	d501      	bpl.n	8006346 <_fwalk_reent+0x22>
 8006342:	6824      	ldr	r4, [r4, #0]
 8006344:	e7f5      	b.n	8006332 <_fwalk_reent+0xe>
 8006346:	89ab      	ldrh	r3, [r5, #12]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d907      	bls.n	800635c <_fwalk_reent+0x38>
 800634c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006350:	3301      	adds	r3, #1
 8006352:	d003      	beq.n	800635c <_fwalk_reent+0x38>
 8006354:	4629      	mov	r1, r5
 8006356:	4640      	mov	r0, r8
 8006358:	47c8      	blx	r9
 800635a:	4306      	orrs	r6, r0
 800635c:	3568      	adds	r5, #104	; 0x68
 800635e:	e7ee      	b.n	800633e <_fwalk_reent+0x1a>

08006360 <__libc_init_array>:
 8006360:	b570      	push	{r4, r5, r6, lr}
 8006362:	4e0d      	ldr	r6, [pc, #52]	; (8006398 <__libc_init_array+0x38>)
 8006364:	4c0d      	ldr	r4, [pc, #52]	; (800639c <__libc_init_array+0x3c>)
 8006366:	1ba4      	subs	r4, r4, r6
 8006368:	10a4      	asrs	r4, r4, #2
 800636a:	2500      	movs	r5, #0
 800636c:	42a5      	cmp	r5, r4
 800636e:	d109      	bne.n	8006384 <__libc_init_array+0x24>
 8006370:	4e0b      	ldr	r6, [pc, #44]	; (80063a0 <__libc_init_array+0x40>)
 8006372:	4c0c      	ldr	r4, [pc, #48]	; (80063a4 <__libc_init_array+0x44>)
 8006374:	f002 fc20 	bl	8008bb8 <_init>
 8006378:	1ba4      	subs	r4, r4, r6
 800637a:	10a4      	asrs	r4, r4, #2
 800637c:	2500      	movs	r5, #0
 800637e:	42a5      	cmp	r5, r4
 8006380:	d105      	bne.n	800638e <__libc_init_array+0x2e>
 8006382:	bd70      	pop	{r4, r5, r6, pc}
 8006384:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006388:	4798      	blx	r3
 800638a:	3501      	adds	r5, #1
 800638c:	e7ee      	b.n	800636c <__libc_init_array+0xc>
 800638e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006392:	4798      	blx	r3
 8006394:	3501      	adds	r5, #1
 8006396:	e7f2      	b.n	800637e <__libc_init_array+0x1e>
 8006398:	08038080 	.word	0x08038080
 800639c:	08038080 	.word	0x08038080
 80063a0:	08038080 	.word	0x08038080
 80063a4:	08038084 	.word	0x08038084

080063a8 <malloc>:
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <malloc+0xc>)
 80063aa:	4601      	mov	r1, r0
 80063ac:	6818      	ldr	r0, [r3, #0]
 80063ae:	f000 b865 	b.w	800647c <_malloc_r>
 80063b2:	bf00      	nop
 80063b4:	200009cc 	.word	0x200009cc

080063b8 <memcpy>:
 80063b8:	b510      	push	{r4, lr}
 80063ba:	1e43      	subs	r3, r0, #1
 80063bc:	440a      	add	r2, r1
 80063be:	4291      	cmp	r1, r2
 80063c0:	d100      	bne.n	80063c4 <memcpy+0xc>
 80063c2:	bd10      	pop	{r4, pc}
 80063c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063cc:	e7f7      	b.n	80063be <memcpy+0x6>

080063ce <memset>:
 80063ce:	4402      	add	r2, r0
 80063d0:	4603      	mov	r3, r0
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d100      	bne.n	80063d8 <memset+0xa>
 80063d6:	4770      	bx	lr
 80063d8:	f803 1b01 	strb.w	r1, [r3], #1
 80063dc:	e7f9      	b.n	80063d2 <memset+0x4>
	...

080063e0 <_free_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	4605      	mov	r5, r0
 80063e4:	2900      	cmp	r1, #0
 80063e6:	d045      	beq.n	8006474 <_free_r+0x94>
 80063e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ec:	1f0c      	subs	r4, r1, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	bfb8      	it	lt
 80063f2:	18e4      	addlt	r4, r4, r3
 80063f4:	f001 fdc8 	bl	8007f88 <__malloc_lock>
 80063f8:	4a1f      	ldr	r2, [pc, #124]	; (8006478 <_free_r+0x98>)
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	4610      	mov	r0, r2
 80063fe:	b933      	cbnz	r3, 800640e <_free_r+0x2e>
 8006400:	6063      	str	r3, [r4, #4]
 8006402:	6014      	str	r4, [r2, #0]
 8006404:	4628      	mov	r0, r5
 8006406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800640a:	f001 bdbe 	b.w	8007f8a <__malloc_unlock>
 800640e:	42a3      	cmp	r3, r4
 8006410:	d90c      	bls.n	800642c <_free_r+0x4c>
 8006412:	6821      	ldr	r1, [r4, #0]
 8006414:	1862      	adds	r2, r4, r1
 8006416:	4293      	cmp	r3, r2
 8006418:	bf04      	itt	eq
 800641a:	681a      	ldreq	r2, [r3, #0]
 800641c:	685b      	ldreq	r3, [r3, #4]
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	bf04      	itt	eq
 8006422:	1852      	addeq	r2, r2, r1
 8006424:	6022      	streq	r2, [r4, #0]
 8006426:	6004      	str	r4, [r0, #0]
 8006428:	e7ec      	b.n	8006404 <_free_r+0x24>
 800642a:	4613      	mov	r3, r2
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	b10a      	cbz	r2, 8006434 <_free_r+0x54>
 8006430:	42a2      	cmp	r2, r4
 8006432:	d9fa      	bls.n	800642a <_free_r+0x4a>
 8006434:	6819      	ldr	r1, [r3, #0]
 8006436:	1858      	adds	r0, r3, r1
 8006438:	42a0      	cmp	r0, r4
 800643a:	d10b      	bne.n	8006454 <_free_r+0x74>
 800643c:	6820      	ldr	r0, [r4, #0]
 800643e:	4401      	add	r1, r0
 8006440:	1858      	adds	r0, r3, r1
 8006442:	4282      	cmp	r2, r0
 8006444:	6019      	str	r1, [r3, #0]
 8006446:	d1dd      	bne.n	8006404 <_free_r+0x24>
 8006448:	6810      	ldr	r0, [r2, #0]
 800644a:	6852      	ldr	r2, [r2, #4]
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	4401      	add	r1, r0
 8006450:	6019      	str	r1, [r3, #0]
 8006452:	e7d7      	b.n	8006404 <_free_r+0x24>
 8006454:	d902      	bls.n	800645c <_free_r+0x7c>
 8006456:	230c      	movs	r3, #12
 8006458:	602b      	str	r3, [r5, #0]
 800645a:	e7d3      	b.n	8006404 <_free_r+0x24>
 800645c:	6820      	ldr	r0, [r4, #0]
 800645e:	1821      	adds	r1, r4, r0
 8006460:	428a      	cmp	r2, r1
 8006462:	bf04      	itt	eq
 8006464:	6811      	ldreq	r1, [r2, #0]
 8006466:	6852      	ldreq	r2, [r2, #4]
 8006468:	6062      	str	r2, [r4, #4]
 800646a:	bf04      	itt	eq
 800646c:	1809      	addeq	r1, r1, r0
 800646e:	6021      	streq	r1, [r4, #0]
 8006470:	605c      	str	r4, [r3, #4]
 8006472:	e7c7      	b.n	8006404 <_free_r+0x24>
 8006474:	bd38      	pop	{r3, r4, r5, pc}
 8006476:	bf00      	nop
 8006478:	20001304 	.word	0x20001304

0800647c <_malloc_r>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	1ccd      	adds	r5, r1, #3
 8006480:	f025 0503 	bic.w	r5, r5, #3
 8006484:	3508      	adds	r5, #8
 8006486:	2d0c      	cmp	r5, #12
 8006488:	bf38      	it	cc
 800648a:	250c      	movcc	r5, #12
 800648c:	2d00      	cmp	r5, #0
 800648e:	4606      	mov	r6, r0
 8006490:	db01      	blt.n	8006496 <_malloc_r+0x1a>
 8006492:	42a9      	cmp	r1, r5
 8006494:	d903      	bls.n	800649e <_malloc_r+0x22>
 8006496:	230c      	movs	r3, #12
 8006498:	6033      	str	r3, [r6, #0]
 800649a:	2000      	movs	r0, #0
 800649c:	bd70      	pop	{r4, r5, r6, pc}
 800649e:	f001 fd73 	bl	8007f88 <__malloc_lock>
 80064a2:	4a21      	ldr	r2, [pc, #132]	; (8006528 <_malloc_r+0xac>)
 80064a4:	6814      	ldr	r4, [r2, #0]
 80064a6:	4621      	mov	r1, r4
 80064a8:	b991      	cbnz	r1, 80064d0 <_malloc_r+0x54>
 80064aa:	4c20      	ldr	r4, [pc, #128]	; (800652c <_malloc_r+0xb0>)
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	b91b      	cbnz	r3, 80064b8 <_malloc_r+0x3c>
 80064b0:	4630      	mov	r0, r6
 80064b2:	f000 fd39 	bl	8006f28 <_sbrk_r>
 80064b6:	6020      	str	r0, [r4, #0]
 80064b8:	4629      	mov	r1, r5
 80064ba:	4630      	mov	r0, r6
 80064bc:	f000 fd34 	bl	8006f28 <_sbrk_r>
 80064c0:	1c43      	adds	r3, r0, #1
 80064c2:	d124      	bne.n	800650e <_malloc_r+0x92>
 80064c4:	230c      	movs	r3, #12
 80064c6:	6033      	str	r3, [r6, #0]
 80064c8:	4630      	mov	r0, r6
 80064ca:	f001 fd5e 	bl	8007f8a <__malloc_unlock>
 80064ce:	e7e4      	b.n	800649a <_malloc_r+0x1e>
 80064d0:	680b      	ldr	r3, [r1, #0]
 80064d2:	1b5b      	subs	r3, r3, r5
 80064d4:	d418      	bmi.n	8006508 <_malloc_r+0x8c>
 80064d6:	2b0b      	cmp	r3, #11
 80064d8:	d90f      	bls.n	80064fa <_malloc_r+0x7e>
 80064da:	600b      	str	r3, [r1, #0]
 80064dc:	50cd      	str	r5, [r1, r3]
 80064de:	18cc      	adds	r4, r1, r3
 80064e0:	4630      	mov	r0, r6
 80064e2:	f001 fd52 	bl	8007f8a <__malloc_unlock>
 80064e6:	f104 000b 	add.w	r0, r4, #11
 80064ea:	1d23      	adds	r3, r4, #4
 80064ec:	f020 0007 	bic.w	r0, r0, #7
 80064f0:	1ac3      	subs	r3, r0, r3
 80064f2:	d0d3      	beq.n	800649c <_malloc_r+0x20>
 80064f4:	425a      	negs	r2, r3
 80064f6:	50e2      	str	r2, [r4, r3]
 80064f8:	e7d0      	b.n	800649c <_malloc_r+0x20>
 80064fa:	428c      	cmp	r4, r1
 80064fc:	684b      	ldr	r3, [r1, #4]
 80064fe:	bf16      	itet	ne
 8006500:	6063      	strne	r3, [r4, #4]
 8006502:	6013      	streq	r3, [r2, #0]
 8006504:	460c      	movne	r4, r1
 8006506:	e7eb      	b.n	80064e0 <_malloc_r+0x64>
 8006508:	460c      	mov	r4, r1
 800650a:	6849      	ldr	r1, [r1, #4]
 800650c:	e7cc      	b.n	80064a8 <_malloc_r+0x2c>
 800650e:	1cc4      	adds	r4, r0, #3
 8006510:	f024 0403 	bic.w	r4, r4, #3
 8006514:	42a0      	cmp	r0, r4
 8006516:	d005      	beq.n	8006524 <_malloc_r+0xa8>
 8006518:	1a21      	subs	r1, r4, r0
 800651a:	4630      	mov	r0, r6
 800651c:	f000 fd04 	bl	8006f28 <_sbrk_r>
 8006520:	3001      	adds	r0, #1
 8006522:	d0cf      	beq.n	80064c4 <_malloc_r+0x48>
 8006524:	6025      	str	r5, [r4, #0]
 8006526:	e7db      	b.n	80064e0 <_malloc_r+0x64>
 8006528:	20001304 	.word	0x20001304
 800652c:	20001308 	.word	0x20001308

08006530 <__cvt>:
 8006530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006534:	ec55 4b10 	vmov	r4, r5, d0
 8006538:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800653a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800653e:	2d00      	cmp	r5, #0
 8006540:	460e      	mov	r6, r1
 8006542:	4691      	mov	r9, r2
 8006544:	4619      	mov	r1, r3
 8006546:	bfb8      	it	lt
 8006548:	4622      	movlt	r2, r4
 800654a:	462b      	mov	r3, r5
 800654c:	f027 0720 	bic.w	r7, r7, #32
 8006550:	bfbb      	ittet	lt
 8006552:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006556:	461d      	movlt	r5, r3
 8006558:	2300      	movge	r3, #0
 800655a:	232d      	movlt	r3, #45	; 0x2d
 800655c:	bfb8      	it	lt
 800655e:	4614      	movlt	r4, r2
 8006560:	2f46      	cmp	r7, #70	; 0x46
 8006562:	700b      	strb	r3, [r1, #0]
 8006564:	d004      	beq.n	8006570 <__cvt+0x40>
 8006566:	2f45      	cmp	r7, #69	; 0x45
 8006568:	d100      	bne.n	800656c <__cvt+0x3c>
 800656a:	3601      	adds	r6, #1
 800656c:	2102      	movs	r1, #2
 800656e:	e000      	b.n	8006572 <__cvt+0x42>
 8006570:	2103      	movs	r1, #3
 8006572:	ab03      	add	r3, sp, #12
 8006574:	9301      	str	r3, [sp, #4]
 8006576:	ab02      	add	r3, sp, #8
 8006578:	9300      	str	r3, [sp, #0]
 800657a:	4632      	mov	r2, r6
 800657c:	4653      	mov	r3, sl
 800657e:	ec45 4b10 	vmov	d0, r4, r5
 8006582:	f000 fec5 	bl	8007310 <_dtoa_r>
 8006586:	2f47      	cmp	r7, #71	; 0x47
 8006588:	4680      	mov	r8, r0
 800658a:	d102      	bne.n	8006592 <__cvt+0x62>
 800658c:	f019 0f01 	tst.w	r9, #1
 8006590:	d026      	beq.n	80065e0 <__cvt+0xb0>
 8006592:	2f46      	cmp	r7, #70	; 0x46
 8006594:	eb08 0906 	add.w	r9, r8, r6
 8006598:	d111      	bne.n	80065be <__cvt+0x8e>
 800659a:	f898 3000 	ldrb.w	r3, [r8]
 800659e:	2b30      	cmp	r3, #48	; 0x30
 80065a0:	d10a      	bne.n	80065b8 <__cvt+0x88>
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	4620      	mov	r0, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	f7fa fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ae:	b918      	cbnz	r0, 80065b8 <__cvt+0x88>
 80065b0:	f1c6 0601 	rsb	r6, r6, #1
 80065b4:	f8ca 6000 	str.w	r6, [sl]
 80065b8:	f8da 3000 	ldr.w	r3, [sl]
 80065bc:	4499      	add	r9, r3
 80065be:	2200      	movs	r2, #0
 80065c0:	2300      	movs	r3, #0
 80065c2:	4620      	mov	r0, r4
 80065c4:	4629      	mov	r1, r5
 80065c6:	f7fa fa87 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ca:	b938      	cbnz	r0, 80065dc <__cvt+0xac>
 80065cc:	2230      	movs	r2, #48	; 0x30
 80065ce:	9b03      	ldr	r3, [sp, #12]
 80065d0:	454b      	cmp	r3, r9
 80065d2:	d205      	bcs.n	80065e0 <__cvt+0xb0>
 80065d4:	1c59      	adds	r1, r3, #1
 80065d6:	9103      	str	r1, [sp, #12]
 80065d8:	701a      	strb	r2, [r3, #0]
 80065da:	e7f8      	b.n	80065ce <__cvt+0x9e>
 80065dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80065e0:	9b03      	ldr	r3, [sp, #12]
 80065e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e4:	eba3 0308 	sub.w	r3, r3, r8
 80065e8:	4640      	mov	r0, r8
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	b004      	add	sp, #16
 80065ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080065f2 <__exponent>:
 80065f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f4:	2900      	cmp	r1, #0
 80065f6:	4604      	mov	r4, r0
 80065f8:	bfba      	itte	lt
 80065fa:	4249      	neglt	r1, r1
 80065fc:	232d      	movlt	r3, #45	; 0x2d
 80065fe:	232b      	movge	r3, #43	; 0x2b
 8006600:	2909      	cmp	r1, #9
 8006602:	f804 2b02 	strb.w	r2, [r4], #2
 8006606:	7043      	strb	r3, [r0, #1]
 8006608:	dd20      	ble.n	800664c <__exponent+0x5a>
 800660a:	f10d 0307 	add.w	r3, sp, #7
 800660e:	461f      	mov	r7, r3
 8006610:	260a      	movs	r6, #10
 8006612:	fb91 f5f6 	sdiv	r5, r1, r6
 8006616:	fb06 1115 	mls	r1, r6, r5, r1
 800661a:	3130      	adds	r1, #48	; 0x30
 800661c:	2d09      	cmp	r5, #9
 800661e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006622:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8006626:	4629      	mov	r1, r5
 8006628:	dc09      	bgt.n	800663e <__exponent+0x4c>
 800662a:	3130      	adds	r1, #48	; 0x30
 800662c:	3b02      	subs	r3, #2
 800662e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006632:	42bb      	cmp	r3, r7
 8006634:	4622      	mov	r2, r4
 8006636:	d304      	bcc.n	8006642 <__exponent+0x50>
 8006638:	1a10      	subs	r0, r2, r0
 800663a:	b003      	add	sp, #12
 800663c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800663e:	4613      	mov	r3, r2
 8006640:	e7e7      	b.n	8006612 <__exponent+0x20>
 8006642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006646:	f804 2b01 	strb.w	r2, [r4], #1
 800664a:	e7f2      	b.n	8006632 <__exponent+0x40>
 800664c:	2330      	movs	r3, #48	; 0x30
 800664e:	4419      	add	r1, r3
 8006650:	7083      	strb	r3, [r0, #2]
 8006652:	1d02      	adds	r2, r0, #4
 8006654:	70c1      	strb	r1, [r0, #3]
 8006656:	e7ef      	b.n	8006638 <__exponent+0x46>

08006658 <_printf_float>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	b08d      	sub	sp, #52	; 0x34
 800665e:	460c      	mov	r4, r1
 8006660:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006664:	4616      	mov	r6, r2
 8006666:	461f      	mov	r7, r3
 8006668:	4605      	mov	r5, r0
 800666a:	f001 fc09 	bl	8007e80 <_localeconv_r>
 800666e:	6803      	ldr	r3, [r0, #0]
 8006670:	9304      	str	r3, [sp, #16]
 8006672:	4618      	mov	r0, r3
 8006674:	f7f9 fdb4 	bl	80001e0 <strlen>
 8006678:	2300      	movs	r3, #0
 800667a:	930a      	str	r3, [sp, #40]	; 0x28
 800667c:	f8d8 3000 	ldr.w	r3, [r8]
 8006680:	9005      	str	r0, [sp, #20]
 8006682:	3307      	adds	r3, #7
 8006684:	f023 0307 	bic.w	r3, r3, #7
 8006688:	f103 0208 	add.w	r2, r3, #8
 800668c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006690:	f8d4 b000 	ldr.w	fp, [r4]
 8006694:	f8c8 2000 	str.w	r2, [r8]
 8006698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066a0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066a4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066a8:	9307      	str	r3, [sp, #28]
 80066aa:	f8cd 8018 	str.w	r8, [sp, #24]
 80066ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066b2:	4ba7      	ldr	r3, [pc, #668]	; (8006950 <_printf_float+0x2f8>)
 80066b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066b8:	f7fa fa40 	bl	8000b3c <__aeabi_dcmpun>
 80066bc:	bb70      	cbnz	r0, 800671c <_printf_float+0xc4>
 80066be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c2:	4ba3      	ldr	r3, [pc, #652]	; (8006950 <_printf_float+0x2f8>)
 80066c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066c8:	f7fa fa1a 	bl	8000b00 <__aeabi_dcmple>
 80066cc:	bb30      	cbnz	r0, 800671c <_printf_float+0xc4>
 80066ce:	2200      	movs	r2, #0
 80066d0:	2300      	movs	r3, #0
 80066d2:	4640      	mov	r0, r8
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7fa fa09 	bl	8000aec <__aeabi_dcmplt>
 80066da:	b110      	cbz	r0, 80066e2 <_printf_float+0x8a>
 80066dc:	232d      	movs	r3, #45	; 0x2d
 80066de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e2:	4a9c      	ldr	r2, [pc, #624]	; (8006954 <_printf_float+0x2fc>)
 80066e4:	4b9c      	ldr	r3, [pc, #624]	; (8006958 <_printf_float+0x300>)
 80066e6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80066ea:	bf8c      	ite	hi
 80066ec:	4690      	movhi	r8, r2
 80066ee:	4698      	movls	r8, r3
 80066f0:	2303      	movs	r3, #3
 80066f2:	f02b 0204 	bic.w	r2, fp, #4
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	f04f 0900 	mov.w	r9, #0
 80066fe:	9700      	str	r7, [sp, #0]
 8006700:	4633      	mov	r3, r6
 8006702:	aa0b      	add	r2, sp, #44	; 0x2c
 8006704:	4621      	mov	r1, r4
 8006706:	4628      	mov	r0, r5
 8006708:	f000 f9e6 	bl	8006ad8 <_printf_common>
 800670c:	3001      	adds	r0, #1
 800670e:	f040 808d 	bne.w	800682c <_printf_float+0x1d4>
 8006712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006716:	b00d      	add	sp, #52	; 0x34
 8006718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671c:	4642      	mov	r2, r8
 800671e:	464b      	mov	r3, r9
 8006720:	4640      	mov	r0, r8
 8006722:	4649      	mov	r1, r9
 8006724:	f7fa fa0a 	bl	8000b3c <__aeabi_dcmpun>
 8006728:	b110      	cbz	r0, 8006730 <_printf_float+0xd8>
 800672a:	4a8c      	ldr	r2, [pc, #560]	; (800695c <_printf_float+0x304>)
 800672c:	4b8c      	ldr	r3, [pc, #560]	; (8006960 <_printf_float+0x308>)
 800672e:	e7da      	b.n	80066e6 <_printf_float+0x8e>
 8006730:	6861      	ldr	r1, [r4, #4]
 8006732:	1c4b      	adds	r3, r1, #1
 8006734:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006738:	a80a      	add	r0, sp, #40	; 0x28
 800673a:	d13e      	bne.n	80067ba <_printf_float+0x162>
 800673c:	2306      	movs	r3, #6
 800673e:	6063      	str	r3, [r4, #4]
 8006740:	2300      	movs	r3, #0
 8006742:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006746:	ab09      	add	r3, sp, #36	; 0x24
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	ec49 8b10 	vmov	d0, r8, r9
 800674e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006752:	6022      	str	r2, [r4, #0]
 8006754:	f8cd a004 	str.w	sl, [sp, #4]
 8006758:	6861      	ldr	r1, [r4, #4]
 800675a:	4628      	mov	r0, r5
 800675c:	f7ff fee8 	bl	8006530 <__cvt>
 8006760:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006764:	2b47      	cmp	r3, #71	; 0x47
 8006766:	4680      	mov	r8, r0
 8006768:	d109      	bne.n	800677e <_printf_float+0x126>
 800676a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800676c:	1cd8      	adds	r0, r3, #3
 800676e:	db02      	blt.n	8006776 <_printf_float+0x11e>
 8006770:	6862      	ldr	r2, [r4, #4]
 8006772:	4293      	cmp	r3, r2
 8006774:	dd47      	ble.n	8006806 <_printf_float+0x1ae>
 8006776:	f1aa 0a02 	sub.w	sl, sl, #2
 800677a:	fa5f fa8a 	uxtb.w	sl, sl
 800677e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006782:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006784:	d824      	bhi.n	80067d0 <_printf_float+0x178>
 8006786:	3901      	subs	r1, #1
 8006788:	4652      	mov	r2, sl
 800678a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800678e:	9109      	str	r1, [sp, #36]	; 0x24
 8006790:	f7ff ff2f 	bl	80065f2 <__exponent>
 8006794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006796:	1813      	adds	r3, r2, r0
 8006798:	2a01      	cmp	r2, #1
 800679a:	4681      	mov	r9, r0
 800679c:	6123      	str	r3, [r4, #16]
 800679e:	dc02      	bgt.n	80067a6 <_printf_float+0x14e>
 80067a0:	6822      	ldr	r2, [r4, #0]
 80067a2:	07d1      	lsls	r1, r2, #31
 80067a4:	d501      	bpl.n	80067aa <_printf_float+0x152>
 80067a6:	3301      	adds	r3, #1
 80067a8:	6123      	str	r3, [r4, #16]
 80067aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0a5      	beq.n	80066fe <_printf_float+0xa6>
 80067b2:	232d      	movs	r3, #45	; 0x2d
 80067b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067b8:	e7a1      	b.n	80066fe <_printf_float+0xa6>
 80067ba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80067be:	f000 8177 	beq.w	8006ab0 <_printf_float+0x458>
 80067c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80067c6:	d1bb      	bne.n	8006740 <_printf_float+0xe8>
 80067c8:	2900      	cmp	r1, #0
 80067ca:	d1b9      	bne.n	8006740 <_printf_float+0xe8>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7b6      	b.n	800673e <_printf_float+0xe6>
 80067d0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80067d4:	d119      	bne.n	800680a <_printf_float+0x1b2>
 80067d6:	2900      	cmp	r1, #0
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	dd0c      	ble.n	80067f6 <_printf_float+0x19e>
 80067dc:	6121      	str	r1, [r4, #16]
 80067de:	b913      	cbnz	r3, 80067e6 <_printf_float+0x18e>
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	07d2      	lsls	r2, r2, #31
 80067e4:	d502      	bpl.n	80067ec <_printf_float+0x194>
 80067e6:	3301      	adds	r3, #1
 80067e8:	440b      	add	r3, r1
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ee:	65a3      	str	r3, [r4, #88]	; 0x58
 80067f0:	f04f 0900 	mov.w	r9, #0
 80067f4:	e7d9      	b.n	80067aa <_printf_float+0x152>
 80067f6:	b913      	cbnz	r3, 80067fe <_printf_float+0x1a6>
 80067f8:	6822      	ldr	r2, [r4, #0]
 80067fa:	07d0      	lsls	r0, r2, #31
 80067fc:	d501      	bpl.n	8006802 <_printf_float+0x1aa>
 80067fe:	3302      	adds	r3, #2
 8006800:	e7f3      	b.n	80067ea <_printf_float+0x192>
 8006802:	2301      	movs	r3, #1
 8006804:	e7f1      	b.n	80067ea <_printf_float+0x192>
 8006806:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800680a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800680e:	4293      	cmp	r3, r2
 8006810:	db05      	blt.n	800681e <_printf_float+0x1c6>
 8006812:	6822      	ldr	r2, [r4, #0]
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	07d1      	lsls	r1, r2, #31
 8006818:	d5e8      	bpl.n	80067ec <_printf_float+0x194>
 800681a:	3301      	adds	r3, #1
 800681c:	e7e5      	b.n	80067ea <_printf_float+0x192>
 800681e:	2b00      	cmp	r3, #0
 8006820:	bfd4      	ite	le
 8006822:	f1c3 0302 	rsble	r3, r3, #2
 8006826:	2301      	movgt	r3, #1
 8006828:	4413      	add	r3, r2
 800682a:	e7de      	b.n	80067ea <_printf_float+0x192>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	055a      	lsls	r2, r3, #21
 8006830:	d407      	bmi.n	8006842 <_printf_float+0x1ea>
 8006832:	6923      	ldr	r3, [r4, #16]
 8006834:	4642      	mov	r2, r8
 8006836:	4631      	mov	r1, r6
 8006838:	4628      	mov	r0, r5
 800683a:	47b8      	blx	r7
 800683c:	3001      	adds	r0, #1
 800683e:	d12b      	bne.n	8006898 <_printf_float+0x240>
 8006840:	e767      	b.n	8006712 <_printf_float+0xba>
 8006842:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006846:	f240 80dc 	bls.w	8006a02 <_printf_float+0x3aa>
 800684a:	2200      	movs	r2, #0
 800684c:	2300      	movs	r3, #0
 800684e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006852:	f7fa f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8006856:	2800      	cmp	r0, #0
 8006858:	d033      	beq.n	80068c2 <_printf_float+0x26a>
 800685a:	2301      	movs	r3, #1
 800685c:	4a41      	ldr	r2, [pc, #260]	; (8006964 <_printf_float+0x30c>)
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	f43f af54 	beq.w	8006712 <_printf_float+0xba>
 800686a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800686e:	429a      	cmp	r2, r3
 8006870:	db02      	blt.n	8006878 <_printf_float+0x220>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	07d8      	lsls	r0, r3, #31
 8006876:	d50f      	bpl.n	8006898 <_printf_float+0x240>
 8006878:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800687c:	4631      	mov	r1, r6
 800687e:	4628      	mov	r0, r5
 8006880:	47b8      	blx	r7
 8006882:	3001      	adds	r0, #1
 8006884:	f43f af45 	beq.w	8006712 <_printf_float+0xba>
 8006888:	f04f 0800 	mov.w	r8, #0
 800688c:	f104 091a 	add.w	r9, r4, #26
 8006890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006892:	3b01      	subs	r3, #1
 8006894:	4543      	cmp	r3, r8
 8006896:	dc09      	bgt.n	80068ac <_printf_float+0x254>
 8006898:	6823      	ldr	r3, [r4, #0]
 800689a:	079b      	lsls	r3, r3, #30
 800689c:	f100 8103 	bmi.w	8006aa6 <_printf_float+0x44e>
 80068a0:	68e0      	ldr	r0, [r4, #12]
 80068a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068a4:	4298      	cmp	r0, r3
 80068a6:	bfb8      	it	lt
 80068a8:	4618      	movlt	r0, r3
 80068aa:	e734      	b.n	8006716 <_printf_float+0xbe>
 80068ac:	2301      	movs	r3, #1
 80068ae:	464a      	mov	r2, r9
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f af2b 	beq.w	8006712 <_printf_float+0xba>
 80068bc:	f108 0801 	add.w	r8, r8, #1
 80068c0:	e7e6      	b.n	8006890 <_printf_float+0x238>
 80068c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	dc2b      	bgt.n	8006920 <_printf_float+0x2c8>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4a26      	ldr	r2, [pc, #152]	; (8006964 <_printf_float+0x30c>)
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af1d 	beq.w	8006712 <_printf_float+0xba>
 80068d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068da:	b923      	cbnz	r3, 80068e6 <_printf_float+0x28e>
 80068dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068de:	b913      	cbnz	r3, 80068e6 <_printf_float+0x28e>
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	07d9      	lsls	r1, r3, #31
 80068e4:	d5d8      	bpl.n	8006898 <_printf_float+0x240>
 80068e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f af0e 	beq.w	8006712 <_printf_float+0xba>
 80068f6:	f04f 0900 	mov.w	r9, #0
 80068fa:	f104 0a1a 	add.w	sl, r4, #26
 80068fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006900:	425b      	negs	r3, r3
 8006902:	454b      	cmp	r3, r9
 8006904:	dc01      	bgt.n	800690a <_printf_float+0x2b2>
 8006906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006908:	e794      	b.n	8006834 <_printf_float+0x1dc>
 800690a:	2301      	movs	r3, #1
 800690c:	4652      	mov	r2, sl
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f aefc 	beq.w	8006712 <_printf_float+0xba>
 800691a:	f109 0901 	add.w	r9, r9, #1
 800691e:	e7ee      	b.n	80068fe <_printf_float+0x2a6>
 8006920:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006922:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006924:	429a      	cmp	r2, r3
 8006926:	bfa8      	it	ge
 8006928:	461a      	movge	r2, r3
 800692a:	2a00      	cmp	r2, #0
 800692c:	4691      	mov	r9, r2
 800692e:	dd07      	ble.n	8006940 <_printf_float+0x2e8>
 8006930:	4613      	mov	r3, r2
 8006932:	4631      	mov	r1, r6
 8006934:	4642      	mov	r2, r8
 8006936:	4628      	mov	r0, r5
 8006938:	47b8      	blx	r7
 800693a:	3001      	adds	r0, #1
 800693c:	f43f aee9 	beq.w	8006712 <_printf_float+0xba>
 8006940:	f104 031a 	add.w	r3, r4, #26
 8006944:	f04f 0b00 	mov.w	fp, #0
 8006948:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800694c:	9306      	str	r3, [sp, #24]
 800694e:	e015      	b.n	800697c <_printf_float+0x324>
 8006950:	7fefffff 	.word	0x7fefffff
 8006954:	08037e1c 	.word	0x08037e1c
 8006958:	08037e18 	.word	0x08037e18
 800695c:	08037e24 	.word	0x08037e24
 8006960:	08037e20 	.word	0x08037e20
 8006964:	08037e28 	.word	0x08037e28
 8006968:	2301      	movs	r3, #1
 800696a:	9a06      	ldr	r2, [sp, #24]
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f aecd 	beq.w	8006712 <_printf_float+0xba>
 8006978:	f10b 0b01 	add.w	fp, fp, #1
 800697c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006980:	ebaa 0309 	sub.w	r3, sl, r9
 8006984:	455b      	cmp	r3, fp
 8006986:	dcef      	bgt.n	8006968 <_printf_float+0x310>
 8006988:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800698c:	429a      	cmp	r2, r3
 800698e:	44d0      	add	r8, sl
 8006990:	db15      	blt.n	80069be <_printf_float+0x366>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	07da      	lsls	r2, r3, #31
 8006996:	d412      	bmi.n	80069be <_printf_float+0x366>
 8006998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800699a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800699c:	eba3 020a 	sub.w	r2, r3, sl
 80069a0:	eba3 0a01 	sub.w	sl, r3, r1
 80069a4:	4592      	cmp	sl, r2
 80069a6:	bfa8      	it	ge
 80069a8:	4692      	movge	sl, r2
 80069aa:	f1ba 0f00 	cmp.w	sl, #0
 80069ae:	dc0e      	bgt.n	80069ce <_printf_float+0x376>
 80069b0:	f04f 0800 	mov.w	r8, #0
 80069b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069b8:	f104 091a 	add.w	r9, r4, #26
 80069bc:	e019      	b.n	80069f2 <_printf_float+0x39a>
 80069be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069c2:	4631      	mov	r1, r6
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	d1e5      	bne.n	8006998 <_printf_float+0x340>
 80069cc:	e6a1      	b.n	8006712 <_printf_float+0xba>
 80069ce:	4653      	mov	r3, sl
 80069d0:	4642      	mov	r2, r8
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	d1e9      	bne.n	80069b0 <_printf_float+0x358>
 80069dc:	e699      	b.n	8006712 <_printf_float+0xba>
 80069de:	2301      	movs	r3, #1
 80069e0:	464a      	mov	r2, r9
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	47b8      	blx	r7
 80069e8:	3001      	adds	r0, #1
 80069ea:	f43f ae92 	beq.w	8006712 <_printf_float+0xba>
 80069ee:	f108 0801 	add.w	r8, r8, #1
 80069f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069f6:	1a9b      	subs	r3, r3, r2
 80069f8:	eba3 030a 	sub.w	r3, r3, sl
 80069fc:	4543      	cmp	r3, r8
 80069fe:	dcee      	bgt.n	80069de <_printf_float+0x386>
 8006a00:	e74a      	b.n	8006898 <_printf_float+0x240>
 8006a02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a04:	2a01      	cmp	r2, #1
 8006a06:	dc01      	bgt.n	8006a0c <_printf_float+0x3b4>
 8006a08:	07db      	lsls	r3, r3, #31
 8006a0a:	d53a      	bpl.n	8006a82 <_printf_float+0x42a>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	4642      	mov	r2, r8
 8006a10:	4631      	mov	r1, r6
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b8      	blx	r7
 8006a16:	3001      	adds	r0, #1
 8006a18:	f43f ae7b 	beq.w	8006712 <_printf_float+0xba>
 8006a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a20:	4631      	mov	r1, r6
 8006a22:	4628      	mov	r0, r5
 8006a24:	47b8      	blx	r7
 8006a26:	3001      	adds	r0, #1
 8006a28:	f108 0801 	add.w	r8, r8, #1
 8006a2c:	f43f ae71 	beq.w	8006712 <_printf_float+0xba>
 8006a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a32:	2200      	movs	r2, #0
 8006a34:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8006a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f7fa f84b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a42:	b9c8      	cbnz	r0, 8006a78 <_printf_float+0x420>
 8006a44:	4653      	mov	r3, sl
 8006a46:	4642      	mov	r2, r8
 8006a48:	4631      	mov	r1, r6
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	47b8      	blx	r7
 8006a4e:	3001      	adds	r0, #1
 8006a50:	d10e      	bne.n	8006a70 <_printf_float+0x418>
 8006a52:	e65e      	b.n	8006712 <_printf_float+0xba>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4652      	mov	r2, sl
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	47b8      	blx	r7
 8006a5e:	3001      	adds	r0, #1
 8006a60:	f43f ae57 	beq.w	8006712 <_printf_float+0xba>
 8006a64:	f108 0801 	add.w	r8, r8, #1
 8006a68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	4543      	cmp	r3, r8
 8006a6e:	dcf1      	bgt.n	8006a54 <_printf_float+0x3fc>
 8006a70:	464b      	mov	r3, r9
 8006a72:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a76:	e6de      	b.n	8006836 <_printf_float+0x1de>
 8006a78:	f04f 0800 	mov.w	r8, #0
 8006a7c:	f104 0a1a 	add.w	sl, r4, #26
 8006a80:	e7f2      	b.n	8006a68 <_printf_float+0x410>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e7df      	b.n	8006a46 <_printf_float+0x3ee>
 8006a86:	2301      	movs	r3, #1
 8006a88:	464a      	mov	r2, r9
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f ae3e 	beq.w	8006712 <_printf_float+0xba>
 8006a96:	f108 0801 	add.w	r8, r8, #1
 8006a9a:	68e3      	ldr	r3, [r4, #12]
 8006a9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	4543      	cmp	r3, r8
 8006aa2:	dcf0      	bgt.n	8006a86 <_printf_float+0x42e>
 8006aa4:	e6fc      	b.n	80068a0 <_printf_float+0x248>
 8006aa6:	f04f 0800 	mov.w	r8, #0
 8006aaa:	f104 0919 	add.w	r9, r4, #25
 8006aae:	e7f4      	b.n	8006a9a <_printf_float+0x442>
 8006ab0:	2900      	cmp	r1, #0
 8006ab2:	f43f ae8b 	beq.w	80067cc <_printf_float+0x174>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006abc:	ab09      	add	r3, sp, #36	; 0x24
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	ec49 8b10 	vmov	d0, r8, r9
 8006ac4:	6022      	str	r2, [r4, #0]
 8006ac6:	f8cd a004 	str.w	sl, [sp, #4]
 8006aca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f7ff fd2e 	bl	8006530 <__cvt>
 8006ad4:	4680      	mov	r8, r0
 8006ad6:	e648      	b.n	800676a <_printf_float+0x112>

08006ad8 <_printf_common>:
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	4691      	mov	r9, r2
 8006ade:	461f      	mov	r7, r3
 8006ae0:	688a      	ldr	r2, [r1, #8]
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	bfb8      	it	lt
 8006aec:	4613      	movlt	r3, r2
 8006aee:	f8c9 3000 	str.w	r3, [r9]
 8006af2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006af6:	4606      	mov	r6, r0
 8006af8:	460c      	mov	r4, r1
 8006afa:	b112      	cbz	r2, 8006b02 <_printf_common+0x2a>
 8006afc:	3301      	adds	r3, #1
 8006afe:	f8c9 3000 	str.w	r3, [r9]
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	0699      	lsls	r1, r3, #26
 8006b06:	bf42      	ittt	mi
 8006b08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006b0c:	3302      	addmi	r3, #2
 8006b0e:	f8c9 3000 	strmi.w	r3, [r9]
 8006b12:	6825      	ldr	r5, [r4, #0]
 8006b14:	f015 0506 	ands.w	r5, r5, #6
 8006b18:	d107      	bne.n	8006b2a <_printf_common+0x52>
 8006b1a:	f104 0a19 	add.w	sl, r4, #25
 8006b1e:	68e3      	ldr	r3, [r4, #12]
 8006b20:	f8d9 2000 	ldr.w	r2, [r9]
 8006b24:	1a9b      	subs	r3, r3, r2
 8006b26:	42ab      	cmp	r3, r5
 8006b28:	dc28      	bgt.n	8006b7c <_printf_common+0xa4>
 8006b2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	3300      	adds	r3, #0
 8006b32:	bf18      	it	ne
 8006b34:	2301      	movne	r3, #1
 8006b36:	0692      	lsls	r2, r2, #26
 8006b38:	d42d      	bmi.n	8006b96 <_printf_common+0xbe>
 8006b3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b3e:	4639      	mov	r1, r7
 8006b40:	4630      	mov	r0, r6
 8006b42:	47c0      	blx	r8
 8006b44:	3001      	adds	r0, #1
 8006b46:	d020      	beq.n	8006b8a <_printf_common+0xb2>
 8006b48:	6823      	ldr	r3, [r4, #0]
 8006b4a:	68e5      	ldr	r5, [r4, #12]
 8006b4c:	f8d9 2000 	ldr.w	r2, [r9]
 8006b50:	f003 0306 	and.w	r3, r3, #6
 8006b54:	2b04      	cmp	r3, #4
 8006b56:	bf08      	it	eq
 8006b58:	1aad      	subeq	r5, r5, r2
 8006b5a:	68a3      	ldr	r3, [r4, #8]
 8006b5c:	6922      	ldr	r2, [r4, #16]
 8006b5e:	bf0c      	ite	eq
 8006b60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b64:	2500      	movne	r5, #0
 8006b66:	4293      	cmp	r3, r2
 8006b68:	bfc4      	itt	gt
 8006b6a:	1a9b      	subgt	r3, r3, r2
 8006b6c:	18ed      	addgt	r5, r5, r3
 8006b6e:	f04f 0900 	mov.w	r9, #0
 8006b72:	341a      	adds	r4, #26
 8006b74:	454d      	cmp	r5, r9
 8006b76:	d11a      	bne.n	8006bae <_printf_common+0xd6>
 8006b78:	2000      	movs	r0, #0
 8006b7a:	e008      	b.n	8006b8e <_printf_common+0xb6>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4652      	mov	r2, sl
 8006b80:	4639      	mov	r1, r7
 8006b82:	4630      	mov	r0, r6
 8006b84:	47c0      	blx	r8
 8006b86:	3001      	adds	r0, #1
 8006b88:	d103      	bne.n	8006b92 <_printf_common+0xba>
 8006b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b92:	3501      	adds	r5, #1
 8006b94:	e7c3      	b.n	8006b1e <_printf_common+0x46>
 8006b96:	18e1      	adds	r1, r4, r3
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	2030      	movs	r0, #48	; 0x30
 8006b9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ba0:	4422      	add	r2, r4
 8006ba2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ba6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006baa:	3302      	adds	r3, #2
 8006bac:	e7c5      	b.n	8006b3a <_printf_common+0x62>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	4622      	mov	r2, r4
 8006bb2:	4639      	mov	r1, r7
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	47c0      	blx	r8
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d0e6      	beq.n	8006b8a <_printf_common+0xb2>
 8006bbc:	f109 0901 	add.w	r9, r9, #1
 8006bc0:	e7d8      	b.n	8006b74 <_printf_common+0x9c>
	...

08006bc4 <_printf_i>:
 8006bc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006bc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006bcc:	460c      	mov	r4, r1
 8006bce:	7e09      	ldrb	r1, [r1, #24]
 8006bd0:	b085      	sub	sp, #20
 8006bd2:	296e      	cmp	r1, #110	; 0x6e
 8006bd4:	4617      	mov	r7, r2
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	4698      	mov	r8, r3
 8006bda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bdc:	f000 80b3 	beq.w	8006d46 <_printf_i+0x182>
 8006be0:	d822      	bhi.n	8006c28 <_printf_i+0x64>
 8006be2:	2963      	cmp	r1, #99	; 0x63
 8006be4:	d036      	beq.n	8006c54 <_printf_i+0x90>
 8006be6:	d80a      	bhi.n	8006bfe <_printf_i+0x3a>
 8006be8:	2900      	cmp	r1, #0
 8006bea:	f000 80b9 	beq.w	8006d60 <_printf_i+0x19c>
 8006bee:	2958      	cmp	r1, #88	; 0x58
 8006bf0:	f000 8083 	beq.w	8006cfa <_printf_i+0x136>
 8006bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006bfc:	e032      	b.n	8006c64 <_printf_i+0xa0>
 8006bfe:	2964      	cmp	r1, #100	; 0x64
 8006c00:	d001      	beq.n	8006c06 <_printf_i+0x42>
 8006c02:	2969      	cmp	r1, #105	; 0x69
 8006c04:	d1f6      	bne.n	8006bf4 <_printf_i+0x30>
 8006c06:	6820      	ldr	r0, [r4, #0]
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	0605      	lsls	r5, r0, #24
 8006c0c:	f103 0104 	add.w	r1, r3, #4
 8006c10:	d52a      	bpl.n	8006c68 <_printf_i+0xa4>
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6011      	str	r1, [r2, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da03      	bge.n	8006c22 <_printf_i+0x5e>
 8006c1a:	222d      	movs	r2, #45	; 0x2d
 8006c1c:	425b      	negs	r3, r3
 8006c1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006c22:	486f      	ldr	r0, [pc, #444]	; (8006de0 <_printf_i+0x21c>)
 8006c24:	220a      	movs	r2, #10
 8006c26:	e039      	b.n	8006c9c <_printf_i+0xd8>
 8006c28:	2973      	cmp	r1, #115	; 0x73
 8006c2a:	f000 809d 	beq.w	8006d68 <_printf_i+0x1a4>
 8006c2e:	d808      	bhi.n	8006c42 <_printf_i+0x7e>
 8006c30:	296f      	cmp	r1, #111	; 0x6f
 8006c32:	d020      	beq.n	8006c76 <_printf_i+0xb2>
 8006c34:	2970      	cmp	r1, #112	; 0x70
 8006c36:	d1dd      	bne.n	8006bf4 <_printf_i+0x30>
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	f043 0320 	orr.w	r3, r3, #32
 8006c3e:	6023      	str	r3, [r4, #0]
 8006c40:	e003      	b.n	8006c4a <_printf_i+0x86>
 8006c42:	2975      	cmp	r1, #117	; 0x75
 8006c44:	d017      	beq.n	8006c76 <_printf_i+0xb2>
 8006c46:	2978      	cmp	r1, #120	; 0x78
 8006c48:	d1d4      	bne.n	8006bf4 <_printf_i+0x30>
 8006c4a:	2378      	movs	r3, #120	; 0x78
 8006c4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c50:	4864      	ldr	r0, [pc, #400]	; (8006de4 <_printf_i+0x220>)
 8006c52:	e055      	b.n	8006d00 <_printf_i+0x13c>
 8006c54:	6813      	ldr	r3, [r2, #0]
 8006c56:	1d19      	adds	r1, r3, #4
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	6011      	str	r1, [r2, #0]
 8006c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c64:	2301      	movs	r3, #1
 8006c66:	e08c      	b.n	8006d82 <_printf_i+0x1be>
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6011      	str	r1, [r2, #0]
 8006c6c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c70:	bf18      	it	ne
 8006c72:	b21b      	sxthne	r3, r3
 8006c74:	e7cf      	b.n	8006c16 <_printf_i+0x52>
 8006c76:	6813      	ldr	r3, [r2, #0]
 8006c78:	6825      	ldr	r5, [r4, #0]
 8006c7a:	1d18      	adds	r0, r3, #4
 8006c7c:	6010      	str	r0, [r2, #0]
 8006c7e:	0628      	lsls	r0, r5, #24
 8006c80:	d501      	bpl.n	8006c86 <_printf_i+0xc2>
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	e002      	b.n	8006c8c <_printf_i+0xc8>
 8006c86:	0668      	lsls	r0, r5, #25
 8006c88:	d5fb      	bpl.n	8006c82 <_printf_i+0xbe>
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	4854      	ldr	r0, [pc, #336]	; (8006de0 <_printf_i+0x21c>)
 8006c8e:	296f      	cmp	r1, #111	; 0x6f
 8006c90:	bf14      	ite	ne
 8006c92:	220a      	movne	r2, #10
 8006c94:	2208      	moveq	r2, #8
 8006c96:	2100      	movs	r1, #0
 8006c98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c9c:	6865      	ldr	r5, [r4, #4]
 8006c9e:	60a5      	str	r5, [r4, #8]
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	f2c0 8095 	blt.w	8006dd0 <_printf_i+0x20c>
 8006ca6:	6821      	ldr	r1, [r4, #0]
 8006ca8:	f021 0104 	bic.w	r1, r1, #4
 8006cac:	6021      	str	r1, [r4, #0]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d13d      	bne.n	8006d2e <_printf_i+0x16a>
 8006cb2:	2d00      	cmp	r5, #0
 8006cb4:	f040 808e 	bne.w	8006dd4 <_printf_i+0x210>
 8006cb8:	4665      	mov	r5, ip
 8006cba:	2a08      	cmp	r2, #8
 8006cbc:	d10b      	bne.n	8006cd6 <_printf_i+0x112>
 8006cbe:	6823      	ldr	r3, [r4, #0]
 8006cc0:	07db      	lsls	r3, r3, #31
 8006cc2:	d508      	bpl.n	8006cd6 <_printf_i+0x112>
 8006cc4:	6923      	ldr	r3, [r4, #16]
 8006cc6:	6862      	ldr	r2, [r4, #4]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	bfde      	ittt	le
 8006ccc:	2330      	movle	r3, #48	; 0x30
 8006cce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cd2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006cd6:	ebac 0305 	sub.w	r3, ip, r5
 8006cda:	6123      	str	r3, [r4, #16]
 8006cdc:	f8cd 8000 	str.w	r8, [sp]
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	aa03      	add	r2, sp, #12
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f7ff fef6 	bl	8006ad8 <_printf_common>
 8006cec:	3001      	adds	r0, #1
 8006cee:	d14d      	bne.n	8006d8c <_printf_i+0x1c8>
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cf4:	b005      	add	sp, #20
 8006cf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006cfa:	4839      	ldr	r0, [pc, #228]	; (8006de0 <_printf_i+0x21c>)
 8006cfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006d00:	6813      	ldr	r3, [r2, #0]
 8006d02:	6821      	ldr	r1, [r4, #0]
 8006d04:	1d1d      	adds	r5, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6015      	str	r5, [r2, #0]
 8006d0a:	060a      	lsls	r2, r1, #24
 8006d0c:	d50b      	bpl.n	8006d26 <_printf_i+0x162>
 8006d0e:	07ca      	lsls	r2, r1, #31
 8006d10:	bf44      	itt	mi
 8006d12:	f041 0120 	orrmi.w	r1, r1, #32
 8006d16:	6021      	strmi	r1, [r4, #0]
 8006d18:	b91b      	cbnz	r3, 8006d22 <_printf_i+0x15e>
 8006d1a:	6822      	ldr	r2, [r4, #0]
 8006d1c:	f022 0220 	bic.w	r2, r2, #32
 8006d20:	6022      	str	r2, [r4, #0]
 8006d22:	2210      	movs	r2, #16
 8006d24:	e7b7      	b.n	8006c96 <_printf_i+0xd2>
 8006d26:	064d      	lsls	r5, r1, #25
 8006d28:	bf48      	it	mi
 8006d2a:	b29b      	uxthmi	r3, r3
 8006d2c:	e7ef      	b.n	8006d0e <_printf_i+0x14a>
 8006d2e:	4665      	mov	r5, ip
 8006d30:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d34:	fb02 3311 	mls	r3, r2, r1, r3
 8006d38:	5cc3      	ldrb	r3, [r0, r3]
 8006d3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006d3e:	460b      	mov	r3, r1
 8006d40:	2900      	cmp	r1, #0
 8006d42:	d1f5      	bne.n	8006d30 <_printf_i+0x16c>
 8006d44:	e7b9      	b.n	8006cba <_printf_i+0xf6>
 8006d46:	6813      	ldr	r3, [r2, #0]
 8006d48:	6825      	ldr	r5, [r4, #0]
 8006d4a:	6961      	ldr	r1, [r4, #20]
 8006d4c:	1d18      	adds	r0, r3, #4
 8006d4e:	6010      	str	r0, [r2, #0]
 8006d50:	0628      	lsls	r0, r5, #24
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	d501      	bpl.n	8006d5a <_printf_i+0x196>
 8006d56:	6019      	str	r1, [r3, #0]
 8006d58:	e002      	b.n	8006d60 <_printf_i+0x19c>
 8006d5a:	066a      	lsls	r2, r5, #25
 8006d5c:	d5fb      	bpl.n	8006d56 <_printf_i+0x192>
 8006d5e:	8019      	strh	r1, [r3, #0]
 8006d60:	2300      	movs	r3, #0
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	4665      	mov	r5, ip
 8006d66:	e7b9      	b.n	8006cdc <_printf_i+0x118>
 8006d68:	6813      	ldr	r3, [r2, #0]
 8006d6a:	1d19      	adds	r1, r3, #4
 8006d6c:	6011      	str	r1, [r2, #0]
 8006d6e:	681d      	ldr	r5, [r3, #0]
 8006d70:	6862      	ldr	r2, [r4, #4]
 8006d72:	2100      	movs	r1, #0
 8006d74:	4628      	mov	r0, r5
 8006d76:	f7f9 fa3b 	bl	80001f0 <memchr>
 8006d7a:	b108      	cbz	r0, 8006d80 <_printf_i+0x1bc>
 8006d7c:	1b40      	subs	r0, r0, r5
 8006d7e:	6060      	str	r0, [r4, #4]
 8006d80:	6863      	ldr	r3, [r4, #4]
 8006d82:	6123      	str	r3, [r4, #16]
 8006d84:	2300      	movs	r3, #0
 8006d86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8a:	e7a7      	b.n	8006cdc <_printf_i+0x118>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	462a      	mov	r2, r5
 8006d90:	4639      	mov	r1, r7
 8006d92:	4630      	mov	r0, r6
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d0aa      	beq.n	8006cf0 <_printf_i+0x12c>
 8006d9a:	6823      	ldr	r3, [r4, #0]
 8006d9c:	079b      	lsls	r3, r3, #30
 8006d9e:	d413      	bmi.n	8006dc8 <_printf_i+0x204>
 8006da0:	68e0      	ldr	r0, [r4, #12]
 8006da2:	9b03      	ldr	r3, [sp, #12]
 8006da4:	4298      	cmp	r0, r3
 8006da6:	bfb8      	it	lt
 8006da8:	4618      	movlt	r0, r3
 8006daa:	e7a3      	b.n	8006cf4 <_printf_i+0x130>
 8006dac:	2301      	movs	r3, #1
 8006dae:	464a      	mov	r2, r9
 8006db0:	4639      	mov	r1, r7
 8006db2:	4630      	mov	r0, r6
 8006db4:	47c0      	blx	r8
 8006db6:	3001      	adds	r0, #1
 8006db8:	d09a      	beq.n	8006cf0 <_printf_i+0x12c>
 8006dba:	3501      	adds	r5, #1
 8006dbc:	68e3      	ldr	r3, [r4, #12]
 8006dbe:	9a03      	ldr	r2, [sp, #12]
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	42ab      	cmp	r3, r5
 8006dc4:	dcf2      	bgt.n	8006dac <_printf_i+0x1e8>
 8006dc6:	e7eb      	b.n	8006da0 <_printf_i+0x1dc>
 8006dc8:	2500      	movs	r5, #0
 8006dca:	f104 0919 	add.w	r9, r4, #25
 8006dce:	e7f5      	b.n	8006dbc <_printf_i+0x1f8>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1ac      	bne.n	8006d2e <_printf_i+0x16a>
 8006dd4:	7803      	ldrb	r3, [r0, #0]
 8006dd6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dda:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dde:	e76c      	b.n	8006cba <_printf_i+0xf6>
 8006de0:	08037e2a 	.word	0x08037e2a
 8006de4:	08037e3b 	.word	0x08037e3b

08006de8 <iprintf>:
 8006de8:	b40f      	push	{r0, r1, r2, r3}
 8006dea:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <iprintf+0x2c>)
 8006dec:	b513      	push	{r0, r1, r4, lr}
 8006dee:	681c      	ldr	r4, [r3, #0]
 8006df0:	b124      	cbz	r4, 8006dfc <iprintf+0x14>
 8006df2:	69a3      	ldr	r3, [r4, #24]
 8006df4:	b913      	cbnz	r3, 8006dfc <iprintf+0x14>
 8006df6:	4620      	mov	r0, r4
 8006df8:	f7ff fa28 	bl	800624c <__sinit>
 8006dfc:	ab05      	add	r3, sp, #20
 8006dfe:	9a04      	ldr	r2, [sp, #16]
 8006e00:	68a1      	ldr	r1, [r4, #8]
 8006e02:	9301      	str	r3, [sp, #4]
 8006e04:	4620      	mov	r0, r4
 8006e06:	f001 fd4d 	bl	80088a4 <_vfiprintf_r>
 8006e0a:	b002      	add	sp, #8
 8006e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e10:	b004      	add	sp, #16
 8006e12:	4770      	bx	lr
 8006e14:	200009cc 	.word	0x200009cc

08006e18 <_puts_r>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	460e      	mov	r6, r1
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b118      	cbz	r0, 8006e28 <_puts_r+0x10>
 8006e20:	6983      	ldr	r3, [r0, #24]
 8006e22:	b90b      	cbnz	r3, 8006e28 <_puts_r+0x10>
 8006e24:	f7ff fa12 	bl	800624c <__sinit>
 8006e28:	69ab      	ldr	r3, [r5, #24]
 8006e2a:	68ac      	ldr	r4, [r5, #8]
 8006e2c:	b913      	cbnz	r3, 8006e34 <_puts_r+0x1c>
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7ff fa0c 	bl	800624c <__sinit>
 8006e34:	4b23      	ldr	r3, [pc, #140]	; (8006ec4 <_puts_r+0xac>)
 8006e36:	429c      	cmp	r4, r3
 8006e38:	d117      	bne.n	8006e6a <_puts_r+0x52>
 8006e3a:	686c      	ldr	r4, [r5, #4]
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	071b      	lsls	r3, r3, #28
 8006e40:	d51d      	bpl.n	8006e7e <_puts_r+0x66>
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	b1db      	cbz	r3, 8006e7e <_puts_r+0x66>
 8006e46:	3e01      	subs	r6, #1
 8006e48:	68a3      	ldr	r3, [r4, #8]
 8006e4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	60a3      	str	r3, [r4, #8]
 8006e52:	b9e9      	cbnz	r1, 8006e90 <_puts_r+0x78>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	da2e      	bge.n	8006eb6 <_puts_r+0x9e>
 8006e58:	4622      	mov	r2, r4
 8006e5a:	210a      	movs	r1, #10
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	f000 f8e9 	bl	8007034 <__swbuf_r>
 8006e62:	3001      	adds	r0, #1
 8006e64:	d011      	beq.n	8006e8a <_puts_r+0x72>
 8006e66:	200a      	movs	r0, #10
 8006e68:	e011      	b.n	8006e8e <_puts_r+0x76>
 8006e6a:	4b17      	ldr	r3, [pc, #92]	; (8006ec8 <_puts_r+0xb0>)
 8006e6c:	429c      	cmp	r4, r3
 8006e6e:	d101      	bne.n	8006e74 <_puts_r+0x5c>
 8006e70:	68ac      	ldr	r4, [r5, #8]
 8006e72:	e7e3      	b.n	8006e3c <_puts_r+0x24>
 8006e74:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <_puts_r+0xb4>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	bf08      	it	eq
 8006e7a:	68ec      	ldreq	r4, [r5, #12]
 8006e7c:	e7de      	b.n	8006e3c <_puts_r+0x24>
 8006e7e:	4621      	mov	r1, r4
 8006e80:	4628      	mov	r0, r5
 8006e82:	f000 f93b 	bl	80070fc <__swsetup_r>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d0dd      	beq.n	8006e46 <_puts_r+0x2e>
 8006e8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	da04      	bge.n	8006e9e <_puts_r+0x86>
 8006e94:	69a2      	ldr	r2, [r4, #24]
 8006e96:	429a      	cmp	r2, r3
 8006e98:	dc06      	bgt.n	8006ea8 <_puts_r+0x90>
 8006e9a:	290a      	cmp	r1, #10
 8006e9c:	d004      	beq.n	8006ea8 <_puts_r+0x90>
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	1c5a      	adds	r2, r3, #1
 8006ea2:	6022      	str	r2, [r4, #0]
 8006ea4:	7019      	strb	r1, [r3, #0]
 8006ea6:	e7cf      	b.n	8006e48 <_puts_r+0x30>
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f8c2 	bl	8007034 <__swbuf_r>
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d1c9      	bne.n	8006e48 <_puts_r+0x30>
 8006eb4:	e7e9      	b.n	8006e8a <_puts_r+0x72>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	200a      	movs	r0, #10
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	6022      	str	r2, [r4, #0]
 8006ebe:	7018      	strb	r0, [r3, #0]
 8006ec0:	e7e5      	b.n	8006e8e <_puts_r+0x76>
 8006ec2:	bf00      	nop
 8006ec4:	08037dd4 	.word	0x08037dd4
 8006ec8:	08037df4 	.word	0x08037df4
 8006ecc:	08037db4 	.word	0x08037db4

08006ed0 <puts>:
 8006ed0:	4b02      	ldr	r3, [pc, #8]	; (8006edc <puts+0xc>)
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	f7ff bf9f 	b.w	8006e18 <_puts_r>
 8006eda:	bf00      	nop
 8006edc:	200009cc 	.word	0x200009cc

08006ee0 <srand>:
 8006ee0:	b538      	push	{r3, r4, r5, lr}
 8006ee2:	4b0d      	ldr	r3, [pc, #52]	; (8006f18 <srand+0x38>)
 8006ee4:	681c      	ldr	r4, [r3, #0]
 8006ee6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b97b      	cbnz	r3, 8006f0c <srand+0x2c>
 8006eec:	2018      	movs	r0, #24
 8006eee:	f7ff fa5b 	bl	80063a8 <malloc>
 8006ef2:	4a0a      	ldr	r2, [pc, #40]	; (8006f1c <srand+0x3c>)
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <srand+0x40>)
 8006ef6:	63a0      	str	r0, [r4, #56]	; 0x38
 8006ef8:	e9c0 2300 	strd	r2, r3, [r0]
 8006efc:	4b09      	ldr	r3, [pc, #36]	; (8006f24 <srand+0x44>)
 8006efe:	6083      	str	r3, [r0, #8]
 8006f00:	230b      	movs	r3, #11
 8006f02:	8183      	strh	r3, [r0, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	2300      	movs	r3, #0
 8006f08:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8006f0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f0e:	2200      	movs	r2, #0
 8006f10:	611d      	str	r5, [r3, #16]
 8006f12:	615a      	str	r2, [r3, #20]
 8006f14:	bd38      	pop	{r3, r4, r5, pc}
 8006f16:	bf00      	nop
 8006f18:	200009cc 	.word	0x200009cc
 8006f1c:	abcd330e 	.word	0xabcd330e
 8006f20:	e66d1234 	.word	0xe66d1234
 8006f24:	0005deec 	.word	0x0005deec

08006f28 <_sbrk_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	4c06      	ldr	r4, [pc, #24]	; (8006f44 <_sbrk_r+0x1c>)
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4605      	mov	r5, r0
 8006f30:	4608      	mov	r0, r1
 8006f32:	6023      	str	r3, [r4, #0]
 8006f34:	f7fa fbda 	bl	80016ec <_sbrk>
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d102      	bne.n	8006f42 <_sbrk_r+0x1a>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	b103      	cbz	r3, 8006f42 <_sbrk_r+0x1a>
 8006f40:	602b      	str	r3, [r5, #0]
 8006f42:	bd38      	pop	{r3, r4, r5, pc}
 8006f44:	200013a0 	.word	0x200013a0

08006f48 <siprintf>:
 8006f48:	b40e      	push	{r1, r2, r3}
 8006f4a:	b500      	push	{lr}
 8006f4c:	b09c      	sub	sp, #112	; 0x70
 8006f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8006f50:	9002      	str	r0, [sp, #8]
 8006f52:	9006      	str	r0, [sp, #24]
 8006f54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f58:	4809      	ldr	r0, [pc, #36]	; (8006f80 <siprintf+0x38>)
 8006f5a:	9107      	str	r1, [sp, #28]
 8006f5c:	9104      	str	r1, [sp, #16]
 8006f5e:	4909      	ldr	r1, [pc, #36]	; (8006f84 <siprintf+0x3c>)
 8006f60:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f64:	9105      	str	r1, [sp, #20]
 8006f66:	6800      	ldr	r0, [r0, #0]
 8006f68:	9301      	str	r3, [sp, #4]
 8006f6a:	a902      	add	r1, sp, #8
 8006f6c:	f001 fb78 	bl	8008660 <_svfiprintf_r>
 8006f70:	9b02      	ldr	r3, [sp, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	b01c      	add	sp, #112	; 0x70
 8006f78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f7c:	b003      	add	sp, #12
 8006f7e:	4770      	bx	lr
 8006f80:	200009cc 	.word	0x200009cc
 8006f84:	ffff0208 	.word	0xffff0208

08006f88 <__sread>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f90:	f001 fd9e 	bl	8008ad0 <_read_r>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	bfab      	itete	ge
 8006f98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f9c:	181b      	addge	r3, r3, r0
 8006f9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006fa2:	bfac      	ite	ge
 8006fa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fa6:	81a3      	strhlt	r3, [r4, #12]
 8006fa8:	bd10      	pop	{r4, pc}

08006faa <__swrite>:
 8006faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	461f      	mov	r7, r3
 8006fb0:	898b      	ldrh	r3, [r1, #12]
 8006fb2:	05db      	lsls	r3, r3, #23
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	4616      	mov	r6, r2
 8006fba:	d505      	bpl.n	8006fc8 <__swrite+0x1e>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc4:	f000 ff6a 	bl	8007e9c <_lseek_r>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	4628      	mov	r0, r5
 8006fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fde:	f000 b87b 	b.w	80070d8 <_write_r>

08006fe2 <__sseek>:
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fea:	f000 ff57 	bl	8007e9c <_lseek_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	bf15      	itete	ne
 8006ff4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ff6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ffa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ffe:	81a3      	strheq	r3, [r4, #12]
 8007000:	bf18      	it	ne
 8007002:	81a3      	strhne	r3, [r4, #12]
 8007004:	bd10      	pop	{r4, pc}

08007006 <__sclose>:
 8007006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700a:	f000 b8e5 	b.w	80071d8 <_close_r>

0800700e <strncmp>:
 800700e:	b510      	push	{r4, lr}
 8007010:	b16a      	cbz	r2, 800702e <strncmp+0x20>
 8007012:	3901      	subs	r1, #1
 8007014:	1884      	adds	r4, r0, r2
 8007016:	f810 3b01 	ldrb.w	r3, [r0], #1
 800701a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800701e:	4293      	cmp	r3, r2
 8007020:	d103      	bne.n	800702a <strncmp+0x1c>
 8007022:	42a0      	cmp	r0, r4
 8007024:	d001      	beq.n	800702a <strncmp+0x1c>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1f5      	bne.n	8007016 <strncmp+0x8>
 800702a:	1a98      	subs	r0, r3, r2
 800702c:	bd10      	pop	{r4, pc}
 800702e:	4610      	mov	r0, r2
 8007030:	e7fc      	b.n	800702c <strncmp+0x1e>
	...

08007034 <__swbuf_r>:
 8007034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007036:	460e      	mov	r6, r1
 8007038:	4614      	mov	r4, r2
 800703a:	4605      	mov	r5, r0
 800703c:	b118      	cbz	r0, 8007046 <__swbuf_r+0x12>
 800703e:	6983      	ldr	r3, [r0, #24]
 8007040:	b90b      	cbnz	r3, 8007046 <__swbuf_r+0x12>
 8007042:	f7ff f903 	bl	800624c <__sinit>
 8007046:	4b21      	ldr	r3, [pc, #132]	; (80070cc <__swbuf_r+0x98>)
 8007048:	429c      	cmp	r4, r3
 800704a:	d12a      	bne.n	80070a2 <__swbuf_r+0x6e>
 800704c:	686c      	ldr	r4, [r5, #4]
 800704e:	69a3      	ldr	r3, [r4, #24]
 8007050:	60a3      	str	r3, [r4, #8]
 8007052:	89a3      	ldrh	r3, [r4, #12]
 8007054:	071a      	lsls	r2, r3, #28
 8007056:	d52e      	bpl.n	80070b6 <__swbuf_r+0x82>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	b363      	cbz	r3, 80070b6 <__swbuf_r+0x82>
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	6820      	ldr	r0, [r4, #0]
 8007060:	1ac0      	subs	r0, r0, r3
 8007062:	6963      	ldr	r3, [r4, #20]
 8007064:	b2f6      	uxtb	r6, r6
 8007066:	4283      	cmp	r3, r0
 8007068:	4637      	mov	r7, r6
 800706a:	dc04      	bgt.n	8007076 <__swbuf_r+0x42>
 800706c:	4621      	mov	r1, r4
 800706e:	4628      	mov	r0, r5
 8007070:	f7ff f882 	bl	8006178 <_fflush_r>
 8007074:	bb28      	cbnz	r0, 80070c2 <__swbuf_r+0x8e>
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	3b01      	subs	r3, #1
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	1c5a      	adds	r2, r3, #1
 8007080:	6022      	str	r2, [r4, #0]
 8007082:	701e      	strb	r6, [r3, #0]
 8007084:	6963      	ldr	r3, [r4, #20]
 8007086:	3001      	adds	r0, #1
 8007088:	4283      	cmp	r3, r0
 800708a:	d004      	beq.n	8007096 <__swbuf_r+0x62>
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	07db      	lsls	r3, r3, #31
 8007090:	d519      	bpl.n	80070c6 <__swbuf_r+0x92>
 8007092:	2e0a      	cmp	r6, #10
 8007094:	d117      	bne.n	80070c6 <__swbuf_r+0x92>
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f7ff f86d 	bl	8006178 <_fflush_r>
 800709e:	b190      	cbz	r0, 80070c6 <__swbuf_r+0x92>
 80070a0:	e00f      	b.n	80070c2 <__swbuf_r+0x8e>
 80070a2:	4b0b      	ldr	r3, [pc, #44]	; (80070d0 <__swbuf_r+0x9c>)
 80070a4:	429c      	cmp	r4, r3
 80070a6:	d101      	bne.n	80070ac <__swbuf_r+0x78>
 80070a8:	68ac      	ldr	r4, [r5, #8]
 80070aa:	e7d0      	b.n	800704e <__swbuf_r+0x1a>
 80070ac:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <__swbuf_r+0xa0>)
 80070ae:	429c      	cmp	r4, r3
 80070b0:	bf08      	it	eq
 80070b2:	68ec      	ldreq	r4, [r5, #12]
 80070b4:	e7cb      	b.n	800704e <__swbuf_r+0x1a>
 80070b6:	4621      	mov	r1, r4
 80070b8:	4628      	mov	r0, r5
 80070ba:	f000 f81f 	bl	80070fc <__swsetup_r>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d0cc      	beq.n	800705c <__swbuf_r+0x28>
 80070c2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80070c6:	4638      	mov	r0, r7
 80070c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070ca:	bf00      	nop
 80070cc:	08037dd4 	.word	0x08037dd4
 80070d0:	08037df4 	.word	0x08037df4
 80070d4:	08037db4 	.word	0x08037db4

080070d8 <_write_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4c07      	ldr	r4, [pc, #28]	; (80070f8 <_write_r+0x20>)
 80070dc:	4605      	mov	r5, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	6022      	str	r2, [r4, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fc fc48 	bl	800397c <_write>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_write_r+0x1e>
 80070f0:	6823      	ldr	r3, [r4, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_write_r+0x1e>
 80070f4:	602b      	str	r3, [r5, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	200013a0 	.word	0x200013a0

080070fc <__swsetup_r>:
 80070fc:	4b32      	ldr	r3, [pc, #200]	; (80071c8 <__swsetup_r+0xcc>)
 80070fe:	b570      	push	{r4, r5, r6, lr}
 8007100:	681d      	ldr	r5, [r3, #0]
 8007102:	4606      	mov	r6, r0
 8007104:	460c      	mov	r4, r1
 8007106:	b125      	cbz	r5, 8007112 <__swsetup_r+0x16>
 8007108:	69ab      	ldr	r3, [r5, #24]
 800710a:	b913      	cbnz	r3, 8007112 <__swsetup_r+0x16>
 800710c:	4628      	mov	r0, r5
 800710e:	f7ff f89d 	bl	800624c <__sinit>
 8007112:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <__swsetup_r+0xd0>)
 8007114:	429c      	cmp	r4, r3
 8007116:	d10f      	bne.n	8007138 <__swsetup_r+0x3c>
 8007118:	686c      	ldr	r4, [r5, #4]
 800711a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800711e:	b29a      	uxth	r2, r3
 8007120:	0715      	lsls	r5, r2, #28
 8007122:	d42c      	bmi.n	800717e <__swsetup_r+0x82>
 8007124:	06d0      	lsls	r0, r2, #27
 8007126:	d411      	bmi.n	800714c <__swsetup_r+0x50>
 8007128:	2209      	movs	r2, #9
 800712a:	6032      	str	r2, [r6, #0]
 800712c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007136:	e03e      	b.n	80071b6 <__swsetup_r+0xba>
 8007138:	4b25      	ldr	r3, [pc, #148]	; (80071d0 <__swsetup_r+0xd4>)
 800713a:	429c      	cmp	r4, r3
 800713c:	d101      	bne.n	8007142 <__swsetup_r+0x46>
 800713e:	68ac      	ldr	r4, [r5, #8]
 8007140:	e7eb      	b.n	800711a <__swsetup_r+0x1e>
 8007142:	4b24      	ldr	r3, [pc, #144]	; (80071d4 <__swsetup_r+0xd8>)
 8007144:	429c      	cmp	r4, r3
 8007146:	bf08      	it	eq
 8007148:	68ec      	ldreq	r4, [r5, #12]
 800714a:	e7e6      	b.n	800711a <__swsetup_r+0x1e>
 800714c:	0751      	lsls	r1, r2, #29
 800714e:	d512      	bpl.n	8007176 <__swsetup_r+0x7a>
 8007150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007152:	b141      	cbz	r1, 8007166 <__swsetup_r+0x6a>
 8007154:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007158:	4299      	cmp	r1, r3
 800715a:	d002      	beq.n	8007162 <__swsetup_r+0x66>
 800715c:	4630      	mov	r0, r6
 800715e:	f7ff f93f 	bl	80063e0 <_free_r>
 8007162:	2300      	movs	r3, #0
 8007164:	6363      	str	r3, [r4, #52]	; 0x34
 8007166:	89a3      	ldrh	r3, [r4, #12]
 8007168:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800716c:	81a3      	strh	r3, [r4, #12]
 800716e:	2300      	movs	r3, #0
 8007170:	6063      	str	r3, [r4, #4]
 8007172:	6923      	ldr	r3, [r4, #16]
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	f043 0308 	orr.w	r3, r3, #8
 800717c:	81a3      	strh	r3, [r4, #12]
 800717e:	6923      	ldr	r3, [r4, #16]
 8007180:	b94b      	cbnz	r3, 8007196 <__swsetup_r+0x9a>
 8007182:	89a3      	ldrh	r3, [r4, #12]
 8007184:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718c:	d003      	beq.n	8007196 <__swsetup_r+0x9a>
 800718e:	4621      	mov	r1, r4
 8007190:	4630      	mov	r0, r6
 8007192:	f000 feb9 	bl	8007f08 <__smakebuf_r>
 8007196:	89a2      	ldrh	r2, [r4, #12]
 8007198:	f012 0301 	ands.w	r3, r2, #1
 800719c:	d00c      	beq.n	80071b8 <__swsetup_r+0xbc>
 800719e:	2300      	movs	r3, #0
 80071a0:	60a3      	str	r3, [r4, #8]
 80071a2:	6963      	ldr	r3, [r4, #20]
 80071a4:	425b      	negs	r3, r3
 80071a6:	61a3      	str	r3, [r4, #24]
 80071a8:	6923      	ldr	r3, [r4, #16]
 80071aa:	b953      	cbnz	r3, 80071c2 <__swsetup_r+0xc6>
 80071ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80071b4:	d1ba      	bne.n	800712c <__swsetup_r+0x30>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	0792      	lsls	r2, r2, #30
 80071ba:	bf58      	it	pl
 80071bc:	6963      	ldrpl	r3, [r4, #20]
 80071be:	60a3      	str	r3, [r4, #8]
 80071c0:	e7f2      	b.n	80071a8 <__swsetup_r+0xac>
 80071c2:	2000      	movs	r0, #0
 80071c4:	e7f7      	b.n	80071b6 <__swsetup_r+0xba>
 80071c6:	bf00      	nop
 80071c8:	200009cc 	.word	0x200009cc
 80071cc:	08037dd4 	.word	0x08037dd4
 80071d0:	08037df4 	.word	0x08037df4
 80071d4:	08037db4 	.word	0x08037db4

080071d8 <_close_r>:
 80071d8:	b538      	push	{r3, r4, r5, lr}
 80071da:	4c06      	ldr	r4, [pc, #24]	; (80071f4 <_close_r+0x1c>)
 80071dc:	2300      	movs	r3, #0
 80071de:	4605      	mov	r5, r0
 80071e0:	4608      	mov	r0, r1
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	f7fa fa4d 	bl	8001682 <_close>
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	d102      	bne.n	80071f2 <_close_r+0x1a>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	b103      	cbz	r3, 80071f2 <_close_r+0x1a>
 80071f0:	602b      	str	r3, [r5, #0]
 80071f2:	bd38      	pop	{r3, r4, r5, pc}
 80071f4:	200013a0 	.word	0x200013a0

080071f8 <quorem>:
 80071f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	6903      	ldr	r3, [r0, #16]
 80071fe:	690c      	ldr	r4, [r1, #16]
 8007200:	42a3      	cmp	r3, r4
 8007202:	4680      	mov	r8, r0
 8007204:	f2c0 8082 	blt.w	800730c <quorem+0x114>
 8007208:	3c01      	subs	r4, #1
 800720a:	f101 0714 	add.w	r7, r1, #20
 800720e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007212:	f100 0614 	add.w	r6, r0, #20
 8007216:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800721a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800721e:	eb06 030c 	add.w	r3, r6, ip
 8007222:	3501      	adds	r5, #1
 8007224:	eb07 090c 	add.w	r9, r7, ip
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	fbb0 f5f5 	udiv	r5, r0, r5
 800722e:	b395      	cbz	r5, 8007296 <quorem+0x9e>
 8007230:	f04f 0a00 	mov.w	sl, #0
 8007234:	4638      	mov	r0, r7
 8007236:	46b6      	mov	lr, r6
 8007238:	46d3      	mov	fp, sl
 800723a:	f850 2b04 	ldr.w	r2, [r0], #4
 800723e:	b293      	uxth	r3, r2
 8007240:	fb05 a303 	mla	r3, r5, r3, sl
 8007244:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007248:	b29b      	uxth	r3, r3
 800724a:	ebab 0303 	sub.w	r3, fp, r3
 800724e:	0c12      	lsrs	r2, r2, #16
 8007250:	f8de b000 	ldr.w	fp, [lr]
 8007254:	fb05 a202 	mla	r2, r5, r2, sl
 8007258:	fa13 f38b 	uxtah	r3, r3, fp
 800725c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007260:	fa1f fb82 	uxth.w	fp, r2
 8007264:	f8de 2000 	ldr.w	r2, [lr]
 8007268:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800726c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007270:	b29b      	uxth	r3, r3
 8007272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007276:	4581      	cmp	r9, r0
 8007278:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800727c:	f84e 3b04 	str.w	r3, [lr], #4
 8007280:	d2db      	bcs.n	800723a <quorem+0x42>
 8007282:	f856 300c 	ldr.w	r3, [r6, ip]
 8007286:	b933      	cbnz	r3, 8007296 <quorem+0x9e>
 8007288:	9b01      	ldr	r3, [sp, #4]
 800728a:	3b04      	subs	r3, #4
 800728c:	429e      	cmp	r6, r3
 800728e:	461a      	mov	r2, r3
 8007290:	d330      	bcc.n	80072f4 <quorem+0xfc>
 8007292:	f8c8 4010 	str.w	r4, [r8, #16]
 8007296:	4640      	mov	r0, r8
 8007298:	f001 f88e 	bl	80083b8 <__mcmp>
 800729c:	2800      	cmp	r0, #0
 800729e:	db25      	blt.n	80072ec <quorem+0xf4>
 80072a0:	3501      	adds	r5, #1
 80072a2:	4630      	mov	r0, r6
 80072a4:	f04f 0c00 	mov.w	ip, #0
 80072a8:	f857 2b04 	ldr.w	r2, [r7], #4
 80072ac:	f8d0 e000 	ldr.w	lr, [r0]
 80072b0:	b293      	uxth	r3, r2
 80072b2:	ebac 0303 	sub.w	r3, ip, r3
 80072b6:	0c12      	lsrs	r2, r2, #16
 80072b8:	fa13 f38e 	uxtah	r3, r3, lr
 80072bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80072c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072ca:	45b9      	cmp	r9, r7
 80072cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80072d0:	f840 3b04 	str.w	r3, [r0], #4
 80072d4:	d2e8      	bcs.n	80072a8 <quorem+0xb0>
 80072d6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80072da:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80072de:	b92a      	cbnz	r2, 80072ec <quorem+0xf4>
 80072e0:	3b04      	subs	r3, #4
 80072e2:	429e      	cmp	r6, r3
 80072e4:	461a      	mov	r2, r3
 80072e6:	d30b      	bcc.n	8007300 <quorem+0x108>
 80072e8:	f8c8 4010 	str.w	r4, [r8, #16]
 80072ec:	4628      	mov	r0, r5
 80072ee:	b003      	add	sp, #12
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	6812      	ldr	r2, [r2, #0]
 80072f6:	3b04      	subs	r3, #4
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	d1ca      	bne.n	8007292 <quorem+0x9a>
 80072fc:	3c01      	subs	r4, #1
 80072fe:	e7c5      	b.n	800728c <quorem+0x94>
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	3b04      	subs	r3, #4
 8007304:	2a00      	cmp	r2, #0
 8007306:	d1ef      	bne.n	80072e8 <quorem+0xf0>
 8007308:	3c01      	subs	r4, #1
 800730a:	e7ea      	b.n	80072e2 <quorem+0xea>
 800730c:	2000      	movs	r0, #0
 800730e:	e7ee      	b.n	80072ee <quorem+0xf6>

08007310 <_dtoa_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	ec57 6b10 	vmov	r6, r7, d0
 8007318:	b097      	sub	sp, #92	; 0x5c
 800731a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800731c:	9106      	str	r1, [sp, #24]
 800731e:	4604      	mov	r4, r0
 8007320:	920b      	str	r2, [sp, #44]	; 0x2c
 8007322:	9312      	str	r3, [sp, #72]	; 0x48
 8007324:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007328:	e9cd 6700 	strd	r6, r7, [sp]
 800732c:	b93d      	cbnz	r5, 800733e <_dtoa_r+0x2e>
 800732e:	2010      	movs	r0, #16
 8007330:	f7ff f83a 	bl	80063a8 <malloc>
 8007334:	6260      	str	r0, [r4, #36]	; 0x24
 8007336:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800733a:	6005      	str	r5, [r0, #0]
 800733c:	60c5      	str	r5, [r0, #12]
 800733e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007340:	6819      	ldr	r1, [r3, #0]
 8007342:	b151      	cbz	r1, 800735a <_dtoa_r+0x4a>
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	604a      	str	r2, [r1, #4]
 8007348:	2301      	movs	r3, #1
 800734a:	4093      	lsls	r3, r2
 800734c:	608b      	str	r3, [r1, #8]
 800734e:	4620      	mov	r0, r4
 8007350:	f000 fe50 	bl	8007ff4 <_Bfree>
 8007354:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	1e3b      	subs	r3, r7, #0
 800735c:	bfbb      	ittet	lt
 800735e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007362:	9301      	strlt	r3, [sp, #4]
 8007364:	2300      	movge	r3, #0
 8007366:	2201      	movlt	r2, #1
 8007368:	bfac      	ite	ge
 800736a:	f8c8 3000 	strge.w	r3, [r8]
 800736e:	f8c8 2000 	strlt.w	r2, [r8]
 8007372:	4baf      	ldr	r3, [pc, #700]	; (8007630 <_dtoa_r+0x320>)
 8007374:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007378:	ea33 0308 	bics.w	r3, r3, r8
 800737c:	d114      	bne.n	80073a8 <_dtoa_r+0x98>
 800737e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007380:	f242 730f 	movw	r3, #9999	; 0x270f
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	9b00      	ldr	r3, [sp, #0]
 8007388:	b923      	cbnz	r3, 8007394 <_dtoa_r+0x84>
 800738a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800738e:	2800      	cmp	r0, #0
 8007390:	f000 8542 	beq.w	8007e18 <_dtoa_r+0xb08>
 8007394:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007396:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007644 <_dtoa_r+0x334>
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 8544 	beq.w	8007e28 <_dtoa_r+0xb18>
 80073a0:	f10b 0303 	add.w	r3, fp, #3
 80073a4:	f000 bd3e 	b.w	8007e24 <_dtoa_r+0xb14>
 80073a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80073ac:	2200      	movs	r2, #0
 80073ae:	2300      	movs	r3, #0
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f9 fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 80073b8:	4681      	mov	r9, r0
 80073ba:	b168      	cbz	r0, 80073d8 <_dtoa_r+0xc8>
 80073bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80073be:	2301      	movs	r3, #1
 80073c0:	6013      	str	r3, [r2, #0]
 80073c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8524 	beq.w	8007e12 <_dtoa_r+0xb02>
 80073ca:	4b9a      	ldr	r3, [pc, #616]	; (8007634 <_dtoa_r+0x324>)
 80073cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80073ce:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80073d2:	6013      	str	r3, [r2, #0]
 80073d4:	f000 bd28 	b.w	8007e28 <_dtoa_r+0xb18>
 80073d8:	aa14      	add	r2, sp, #80	; 0x50
 80073da:	a915      	add	r1, sp, #84	; 0x54
 80073dc:	ec47 6b10 	vmov	d0, r6, r7
 80073e0:	4620      	mov	r0, r4
 80073e2:	f001 f860 	bl	80084a6 <__d2b>
 80073e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80073ea:	9004      	str	r0, [sp, #16]
 80073ec:	2d00      	cmp	r5, #0
 80073ee:	d07c      	beq.n	80074ea <_dtoa_r+0x1da>
 80073f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80073f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80073f8:	46b2      	mov	sl, r6
 80073fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80073fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007402:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007406:	2200      	movs	r2, #0
 8007408:	4b8b      	ldr	r3, [pc, #556]	; (8007638 <_dtoa_r+0x328>)
 800740a:	4650      	mov	r0, sl
 800740c:	4659      	mov	r1, fp
 800740e:	f7f8 ff43 	bl	8000298 <__aeabi_dsub>
 8007412:	a381      	add	r3, pc, #516	; (adr r3, 8007618 <_dtoa_r+0x308>)
 8007414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007418:	f7f9 f8f6 	bl	8000608 <__aeabi_dmul>
 800741c:	a380      	add	r3, pc, #512	; (adr r3, 8007620 <_dtoa_r+0x310>)
 800741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007422:	f7f8 ff3b 	bl	800029c <__adddf3>
 8007426:	4606      	mov	r6, r0
 8007428:	4628      	mov	r0, r5
 800742a:	460f      	mov	r7, r1
 800742c:	f7f9 f882 	bl	8000534 <__aeabi_i2d>
 8007430:	a37d      	add	r3, pc, #500	; (adr r3, 8007628 <_dtoa_r+0x318>)
 8007432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007436:	f7f9 f8e7 	bl	8000608 <__aeabi_dmul>
 800743a:	4602      	mov	r2, r0
 800743c:	460b      	mov	r3, r1
 800743e:	4630      	mov	r0, r6
 8007440:	4639      	mov	r1, r7
 8007442:	f7f8 ff2b 	bl	800029c <__adddf3>
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	f7f9 fb8d 	bl	8000b68 <__aeabi_d2iz>
 800744e:	2200      	movs	r2, #0
 8007450:	4682      	mov	sl, r0
 8007452:	2300      	movs	r3, #0
 8007454:	4630      	mov	r0, r6
 8007456:	4639      	mov	r1, r7
 8007458:	f7f9 fb48 	bl	8000aec <__aeabi_dcmplt>
 800745c:	b148      	cbz	r0, 8007472 <_dtoa_r+0x162>
 800745e:	4650      	mov	r0, sl
 8007460:	f7f9 f868 	bl	8000534 <__aeabi_i2d>
 8007464:	4632      	mov	r2, r6
 8007466:	463b      	mov	r3, r7
 8007468:	f7f9 fb36 	bl	8000ad8 <__aeabi_dcmpeq>
 800746c:	b908      	cbnz	r0, 8007472 <_dtoa_r+0x162>
 800746e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007472:	f1ba 0f16 	cmp.w	sl, #22
 8007476:	d859      	bhi.n	800752c <_dtoa_r+0x21c>
 8007478:	4970      	ldr	r1, [pc, #448]	; (800763c <_dtoa_r+0x32c>)
 800747a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800747e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007486:	f7f9 fb4f 	bl	8000b28 <__aeabi_dcmpgt>
 800748a:	2800      	cmp	r0, #0
 800748c:	d050      	beq.n	8007530 <_dtoa_r+0x220>
 800748e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007492:	2300      	movs	r3, #0
 8007494:	930f      	str	r3, [sp, #60]	; 0x3c
 8007496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007498:	1b5d      	subs	r5, r3, r5
 800749a:	f1b5 0801 	subs.w	r8, r5, #1
 800749e:	bf49      	itett	mi
 80074a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80074a4:	2300      	movpl	r3, #0
 80074a6:	9305      	strmi	r3, [sp, #20]
 80074a8:	f04f 0800 	movmi.w	r8, #0
 80074ac:	bf58      	it	pl
 80074ae:	9305      	strpl	r3, [sp, #20]
 80074b0:	f1ba 0f00 	cmp.w	sl, #0
 80074b4:	db3e      	blt.n	8007534 <_dtoa_r+0x224>
 80074b6:	2300      	movs	r3, #0
 80074b8:	44d0      	add	r8, sl
 80074ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	9b06      	ldr	r3, [sp, #24]
 80074c2:	2b09      	cmp	r3, #9
 80074c4:	f200 8090 	bhi.w	80075e8 <_dtoa_r+0x2d8>
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	bfc4      	itt	gt
 80074cc:	3b04      	subgt	r3, #4
 80074ce:	9306      	strgt	r3, [sp, #24]
 80074d0:	9b06      	ldr	r3, [sp, #24]
 80074d2:	f1a3 0302 	sub.w	r3, r3, #2
 80074d6:	bfcc      	ite	gt
 80074d8:	2500      	movgt	r5, #0
 80074da:	2501      	movle	r5, #1
 80074dc:	2b03      	cmp	r3, #3
 80074de:	f200 808f 	bhi.w	8007600 <_dtoa_r+0x2f0>
 80074e2:	e8df f003 	tbb	[pc, r3]
 80074e6:	7f7d      	.short	0x7f7d
 80074e8:	7131      	.short	0x7131
 80074ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80074ee:	441d      	add	r5, r3
 80074f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80074f4:	2820      	cmp	r0, #32
 80074f6:	dd13      	ble.n	8007520 <_dtoa_r+0x210>
 80074f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80074fc:	9b00      	ldr	r3, [sp, #0]
 80074fe:	fa08 f800 	lsl.w	r8, r8, r0
 8007502:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007506:	fa23 f000 	lsr.w	r0, r3, r0
 800750a:	ea48 0000 	orr.w	r0, r8, r0
 800750e:	f7f9 f801 	bl	8000514 <__aeabi_ui2d>
 8007512:	2301      	movs	r3, #1
 8007514:	4682      	mov	sl, r0
 8007516:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800751a:	3d01      	subs	r5, #1
 800751c:	9313      	str	r3, [sp, #76]	; 0x4c
 800751e:	e772      	b.n	8007406 <_dtoa_r+0xf6>
 8007520:	9b00      	ldr	r3, [sp, #0]
 8007522:	f1c0 0020 	rsb	r0, r0, #32
 8007526:	fa03 f000 	lsl.w	r0, r3, r0
 800752a:	e7f0      	b.n	800750e <_dtoa_r+0x1fe>
 800752c:	2301      	movs	r3, #1
 800752e:	e7b1      	b.n	8007494 <_dtoa_r+0x184>
 8007530:	900f      	str	r0, [sp, #60]	; 0x3c
 8007532:	e7b0      	b.n	8007496 <_dtoa_r+0x186>
 8007534:	9b05      	ldr	r3, [sp, #20]
 8007536:	eba3 030a 	sub.w	r3, r3, sl
 800753a:	9305      	str	r3, [sp, #20]
 800753c:	f1ca 0300 	rsb	r3, sl, #0
 8007540:	9307      	str	r3, [sp, #28]
 8007542:	2300      	movs	r3, #0
 8007544:	930e      	str	r3, [sp, #56]	; 0x38
 8007546:	e7bb      	b.n	80074c0 <_dtoa_r+0x1b0>
 8007548:	2301      	movs	r3, #1
 800754a:	930a      	str	r3, [sp, #40]	; 0x28
 800754c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800754e:	2b00      	cmp	r3, #0
 8007550:	dd59      	ble.n	8007606 <_dtoa_r+0x2f6>
 8007552:	9302      	str	r3, [sp, #8]
 8007554:	4699      	mov	r9, r3
 8007556:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007558:	2200      	movs	r2, #0
 800755a:	6072      	str	r2, [r6, #4]
 800755c:	2204      	movs	r2, #4
 800755e:	f102 0014 	add.w	r0, r2, #20
 8007562:	4298      	cmp	r0, r3
 8007564:	6871      	ldr	r1, [r6, #4]
 8007566:	d953      	bls.n	8007610 <_dtoa_r+0x300>
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fd0f 	bl	8007f8c <_Balloc>
 800756e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007570:	6030      	str	r0, [r6, #0]
 8007572:	f1b9 0f0e 	cmp.w	r9, #14
 8007576:	f8d3 b000 	ldr.w	fp, [r3]
 800757a:	f200 80e6 	bhi.w	800774a <_dtoa_r+0x43a>
 800757e:	2d00      	cmp	r5, #0
 8007580:	f000 80e3 	beq.w	800774a <_dtoa_r+0x43a>
 8007584:	ed9d 7b00 	vldr	d7, [sp]
 8007588:	f1ba 0f00 	cmp.w	sl, #0
 800758c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007590:	dd74      	ble.n	800767c <_dtoa_r+0x36c>
 8007592:	4a2a      	ldr	r2, [pc, #168]	; (800763c <_dtoa_r+0x32c>)
 8007594:	f00a 030f 	and.w	r3, sl, #15
 8007598:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800759c:	ed93 7b00 	vldr	d7, [r3]
 80075a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80075a4:	06f0      	lsls	r0, r6, #27
 80075a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80075aa:	d565      	bpl.n	8007678 <_dtoa_r+0x368>
 80075ac:	4b24      	ldr	r3, [pc, #144]	; (8007640 <_dtoa_r+0x330>)
 80075ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80075b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075b6:	f7f9 f951 	bl	800085c <__aeabi_ddiv>
 80075ba:	e9cd 0100 	strd	r0, r1, [sp]
 80075be:	f006 060f 	and.w	r6, r6, #15
 80075c2:	2503      	movs	r5, #3
 80075c4:	4f1e      	ldr	r7, [pc, #120]	; (8007640 <_dtoa_r+0x330>)
 80075c6:	e04c      	b.n	8007662 <_dtoa_r+0x352>
 80075c8:	2301      	movs	r3, #1
 80075ca:	930a      	str	r3, [sp, #40]	; 0x28
 80075cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075ce:	4453      	add	r3, sl
 80075d0:	f103 0901 	add.w	r9, r3, #1
 80075d4:	9302      	str	r3, [sp, #8]
 80075d6:	464b      	mov	r3, r9
 80075d8:	2b01      	cmp	r3, #1
 80075da:	bfb8      	it	lt
 80075dc:	2301      	movlt	r3, #1
 80075de:	e7ba      	b.n	8007556 <_dtoa_r+0x246>
 80075e0:	2300      	movs	r3, #0
 80075e2:	e7b2      	b.n	800754a <_dtoa_r+0x23a>
 80075e4:	2300      	movs	r3, #0
 80075e6:	e7f0      	b.n	80075ca <_dtoa_r+0x2ba>
 80075e8:	2501      	movs	r5, #1
 80075ea:	2300      	movs	r3, #0
 80075ec:	9306      	str	r3, [sp, #24]
 80075ee:	950a      	str	r5, [sp, #40]	; 0x28
 80075f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f4:	9302      	str	r3, [sp, #8]
 80075f6:	4699      	mov	r9, r3
 80075f8:	2200      	movs	r2, #0
 80075fa:	2312      	movs	r3, #18
 80075fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80075fe:	e7aa      	b.n	8007556 <_dtoa_r+0x246>
 8007600:	2301      	movs	r3, #1
 8007602:	930a      	str	r3, [sp, #40]	; 0x28
 8007604:	e7f4      	b.n	80075f0 <_dtoa_r+0x2e0>
 8007606:	2301      	movs	r3, #1
 8007608:	9302      	str	r3, [sp, #8]
 800760a:	4699      	mov	r9, r3
 800760c:	461a      	mov	r2, r3
 800760e:	e7f5      	b.n	80075fc <_dtoa_r+0x2ec>
 8007610:	3101      	adds	r1, #1
 8007612:	6071      	str	r1, [r6, #4]
 8007614:	0052      	lsls	r2, r2, #1
 8007616:	e7a2      	b.n	800755e <_dtoa_r+0x24e>
 8007618:	636f4361 	.word	0x636f4361
 800761c:	3fd287a7 	.word	0x3fd287a7
 8007620:	8b60c8b3 	.word	0x8b60c8b3
 8007624:	3fc68a28 	.word	0x3fc68a28
 8007628:	509f79fb 	.word	0x509f79fb
 800762c:	3fd34413 	.word	0x3fd34413
 8007630:	7ff00000 	.word	0x7ff00000
 8007634:	08037e29 	.word	0x08037e29
 8007638:	3ff80000 	.word	0x3ff80000
 800763c:	08037e88 	.word	0x08037e88
 8007640:	08037e60 	.word	0x08037e60
 8007644:	08037e55 	.word	0x08037e55
 8007648:	07f1      	lsls	r1, r6, #31
 800764a:	d508      	bpl.n	800765e <_dtoa_r+0x34e>
 800764c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007650:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007654:	f7f8 ffd8 	bl	8000608 <__aeabi_dmul>
 8007658:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800765c:	3501      	adds	r5, #1
 800765e:	1076      	asrs	r6, r6, #1
 8007660:	3708      	adds	r7, #8
 8007662:	2e00      	cmp	r6, #0
 8007664:	d1f0      	bne.n	8007648 <_dtoa_r+0x338>
 8007666:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800766a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800766e:	f7f9 f8f5 	bl	800085c <__aeabi_ddiv>
 8007672:	e9cd 0100 	strd	r0, r1, [sp]
 8007676:	e01a      	b.n	80076ae <_dtoa_r+0x39e>
 8007678:	2502      	movs	r5, #2
 800767a:	e7a3      	b.n	80075c4 <_dtoa_r+0x2b4>
 800767c:	f000 80a0 	beq.w	80077c0 <_dtoa_r+0x4b0>
 8007680:	f1ca 0600 	rsb	r6, sl, #0
 8007684:	4b9f      	ldr	r3, [pc, #636]	; (8007904 <_dtoa_r+0x5f4>)
 8007686:	4fa0      	ldr	r7, [pc, #640]	; (8007908 <_dtoa_r+0x5f8>)
 8007688:	f006 020f 	and.w	r2, r6, #15
 800768c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007698:	f7f8 ffb6 	bl	8000608 <__aeabi_dmul>
 800769c:	e9cd 0100 	strd	r0, r1, [sp]
 80076a0:	1136      	asrs	r6, r6, #4
 80076a2:	2300      	movs	r3, #0
 80076a4:	2502      	movs	r5, #2
 80076a6:	2e00      	cmp	r6, #0
 80076a8:	d17f      	bne.n	80077aa <_dtoa_r+0x49a>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e1      	bne.n	8007672 <_dtoa_r+0x362>
 80076ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8087 	beq.w	80077c4 <_dtoa_r+0x4b4>
 80076b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076ba:	2200      	movs	r2, #0
 80076bc:	4b93      	ldr	r3, [pc, #588]	; (800790c <_dtoa_r+0x5fc>)
 80076be:	4630      	mov	r0, r6
 80076c0:	4639      	mov	r1, r7
 80076c2:	f7f9 fa13 	bl	8000aec <__aeabi_dcmplt>
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d07c      	beq.n	80077c4 <_dtoa_r+0x4b4>
 80076ca:	f1b9 0f00 	cmp.w	r9, #0
 80076ce:	d079      	beq.n	80077c4 <_dtoa_r+0x4b4>
 80076d0:	9b02      	ldr	r3, [sp, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	dd35      	ble.n	8007742 <_dtoa_r+0x432>
 80076d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80076da:	9308      	str	r3, [sp, #32]
 80076dc:	4639      	mov	r1, r7
 80076de:	2200      	movs	r2, #0
 80076e0:	4b8b      	ldr	r3, [pc, #556]	; (8007910 <_dtoa_r+0x600>)
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7f8 ff90 	bl	8000608 <__aeabi_dmul>
 80076e8:	e9cd 0100 	strd	r0, r1, [sp]
 80076ec:	9f02      	ldr	r7, [sp, #8]
 80076ee:	3501      	adds	r5, #1
 80076f0:	4628      	mov	r0, r5
 80076f2:	f7f8 ff1f 	bl	8000534 <__aeabi_i2d>
 80076f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076fa:	f7f8 ff85 	bl	8000608 <__aeabi_dmul>
 80076fe:	2200      	movs	r2, #0
 8007700:	4b84      	ldr	r3, [pc, #528]	; (8007914 <_dtoa_r+0x604>)
 8007702:	f7f8 fdcb 	bl	800029c <__adddf3>
 8007706:	4605      	mov	r5, r0
 8007708:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800770c:	2f00      	cmp	r7, #0
 800770e:	d15d      	bne.n	80077cc <_dtoa_r+0x4bc>
 8007710:	2200      	movs	r2, #0
 8007712:	4b81      	ldr	r3, [pc, #516]	; (8007918 <_dtoa_r+0x608>)
 8007714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007718:	f7f8 fdbe 	bl	8000298 <__aeabi_dsub>
 800771c:	462a      	mov	r2, r5
 800771e:	4633      	mov	r3, r6
 8007720:	e9cd 0100 	strd	r0, r1, [sp]
 8007724:	f7f9 fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8007728:	2800      	cmp	r0, #0
 800772a:	f040 8288 	bne.w	8007c3e <_dtoa_r+0x92e>
 800772e:	462a      	mov	r2, r5
 8007730:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007738:	f7f9 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800773c:	2800      	cmp	r0, #0
 800773e:	f040 827c 	bne.w	8007c3a <_dtoa_r+0x92a>
 8007742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007746:	e9cd 2300 	strd	r2, r3, [sp]
 800774a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800774c:	2b00      	cmp	r3, #0
 800774e:	f2c0 8150 	blt.w	80079f2 <_dtoa_r+0x6e2>
 8007752:	f1ba 0f0e 	cmp.w	sl, #14
 8007756:	f300 814c 	bgt.w	80079f2 <_dtoa_r+0x6e2>
 800775a:	4b6a      	ldr	r3, [pc, #424]	; (8007904 <_dtoa_r+0x5f4>)
 800775c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007760:	ed93 7b00 	vldr	d7, [r3]
 8007764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	ed8d 7b02 	vstr	d7, [sp, #8]
 800776c:	f280 80d8 	bge.w	8007920 <_dtoa_r+0x610>
 8007770:	f1b9 0f00 	cmp.w	r9, #0
 8007774:	f300 80d4 	bgt.w	8007920 <_dtoa_r+0x610>
 8007778:	f040 825e 	bne.w	8007c38 <_dtoa_r+0x928>
 800777c:	2200      	movs	r2, #0
 800777e:	4b66      	ldr	r3, [pc, #408]	; (8007918 <_dtoa_r+0x608>)
 8007780:	ec51 0b17 	vmov	r0, r1, d7
 8007784:	f7f8 ff40 	bl	8000608 <__aeabi_dmul>
 8007788:	e9dd 2300 	ldrd	r2, r3, [sp]
 800778c:	f7f9 f9c2 	bl	8000b14 <__aeabi_dcmpge>
 8007790:	464f      	mov	r7, r9
 8007792:	464e      	mov	r6, r9
 8007794:	2800      	cmp	r0, #0
 8007796:	f040 8234 	bne.w	8007c02 <_dtoa_r+0x8f2>
 800779a:	2331      	movs	r3, #49	; 0x31
 800779c:	f10b 0501 	add.w	r5, fp, #1
 80077a0:	f88b 3000 	strb.w	r3, [fp]
 80077a4:	f10a 0a01 	add.w	sl, sl, #1
 80077a8:	e22f      	b.n	8007c0a <_dtoa_r+0x8fa>
 80077aa:	07f2      	lsls	r2, r6, #31
 80077ac:	d505      	bpl.n	80077ba <_dtoa_r+0x4aa>
 80077ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077b2:	f7f8 ff29 	bl	8000608 <__aeabi_dmul>
 80077b6:	3501      	adds	r5, #1
 80077b8:	2301      	movs	r3, #1
 80077ba:	1076      	asrs	r6, r6, #1
 80077bc:	3708      	adds	r7, #8
 80077be:	e772      	b.n	80076a6 <_dtoa_r+0x396>
 80077c0:	2502      	movs	r5, #2
 80077c2:	e774      	b.n	80076ae <_dtoa_r+0x39e>
 80077c4:	f8cd a020 	str.w	sl, [sp, #32]
 80077c8:	464f      	mov	r7, r9
 80077ca:	e791      	b.n	80076f0 <_dtoa_r+0x3e0>
 80077cc:	4b4d      	ldr	r3, [pc, #308]	; (8007904 <_dtoa_r+0x5f4>)
 80077ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80077d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80077d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d047      	beq.n	800786c <_dtoa_r+0x55c>
 80077dc:	4602      	mov	r2, r0
 80077de:	460b      	mov	r3, r1
 80077e0:	2000      	movs	r0, #0
 80077e2:	494e      	ldr	r1, [pc, #312]	; (800791c <_dtoa_r+0x60c>)
 80077e4:	f7f9 f83a 	bl	800085c <__aeabi_ddiv>
 80077e8:	462a      	mov	r2, r5
 80077ea:	4633      	mov	r3, r6
 80077ec:	f7f8 fd54 	bl	8000298 <__aeabi_dsub>
 80077f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80077f4:	465d      	mov	r5, fp
 80077f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80077fa:	f7f9 f9b5 	bl	8000b68 <__aeabi_d2iz>
 80077fe:	4606      	mov	r6, r0
 8007800:	f7f8 fe98 	bl	8000534 <__aeabi_i2d>
 8007804:	4602      	mov	r2, r0
 8007806:	460b      	mov	r3, r1
 8007808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800780c:	f7f8 fd44 	bl	8000298 <__aeabi_dsub>
 8007810:	3630      	adds	r6, #48	; 0x30
 8007812:	f805 6b01 	strb.w	r6, [r5], #1
 8007816:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800781a:	e9cd 0100 	strd	r0, r1, [sp]
 800781e:	f7f9 f965 	bl	8000aec <__aeabi_dcmplt>
 8007822:	2800      	cmp	r0, #0
 8007824:	d163      	bne.n	80078ee <_dtoa_r+0x5de>
 8007826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800782a:	2000      	movs	r0, #0
 800782c:	4937      	ldr	r1, [pc, #220]	; (800790c <_dtoa_r+0x5fc>)
 800782e:	f7f8 fd33 	bl	8000298 <__aeabi_dsub>
 8007832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007836:	f7f9 f959 	bl	8000aec <__aeabi_dcmplt>
 800783a:	2800      	cmp	r0, #0
 800783c:	f040 80b7 	bne.w	80079ae <_dtoa_r+0x69e>
 8007840:	eba5 030b 	sub.w	r3, r5, fp
 8007844:	429f      	cmp	r7, r3
 8007846:	f77f af7c 	ble.w	8007742 <_dtoa_r+0x432>
 800784a:	2200      	movs	r2, #0
 800784c:	4b30      	ldr	r3, [pc, #192]	; (8007910 <_dtoa_r+0x600>)
 800784e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007852:	f7f8 fed9 	bl	8000608 <__aeabi_dmul>
 8007856:	2200      	movs	r2, #0
 8007858:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800785c:	4b2c      	ldr	r3, [pc, #176]	; (8007910 <_dtoa_r+0x600>)
 800785e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007862:	f7f8 fed1 	bl	8000608 <__aeabi_dmul>
 8007866:	e9cd 0100 	strd	r0, r1, [sp]
 800786a:	e7c4      	b.n	80077f6 <_dtoa_r+0x4e6>
 800786c:	462a      	mov	r2, r5
 800786e:	4633      	mov	r3, r6
 8007870:	f7f8 feca 	bl	8000608 <__aeabi_dmul>
 8007874:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007878:	eb0b 0507 	add.w	r5, fp, r7
 800787c:	465e      	mov	r6, fp
 800787e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007882:	f7f9 f971 	bl	8000b68 <__aeabi_d2iz>
 8007886:	4607      	mov	r7, r0
 8007888:	f7f8 fe54 	bl	8000534 <__aeabi_i2d>
 800788c:	3730      	adds	r7, #48	; 0x30
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007896:	f7f8 fcff 	bl	8000298 <__aeabi_dsub>
 800789a:	f806 7b01 	strb.w	r7, [r6], #1
 800789e:	42ae      	cmp	r6, r5
 80078a0:	e9cd 0100 	strd	r0, r1, [sp]
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	d126      	bne.n	80078f8 <_dtoa_r+0x5e8>
 80078aa:	4b1c      	ldr	r3, [pc, #112]	; (800791c <_dtoa_r+0x60c>)
 80078ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80078b0:	f7f8 fcf4 	bl	800029c <__adddf3>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078bc:	f7f9 f934 	bl	8000b28 <__aeabi_dcmpgt>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d174      	bne.n	80079ae <_dtoa_r+0x69e>
 80078c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80078c8:	2000      	movs	r0, #0
 80078ca:	4914      	ldr	r1, [pc, #80]	; (800791c <_dtoa_r+0x60c>)
 80078cc:	f7f8 fce4 	bl	8000298 <__aeabi_dsub>
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078d8:	f7f9 f908 	bl	8000aec <__aeabi_dcmplt>
 80078dc:	2800      	cmp	r0, #0
 80078de:	f43f af30 	beq.w	8007742 <_dtoa_r+0x432>
 80078e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078e6:	2b30      	cmp	r3, #48	; 0x30
 80078e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80078ec:	d002      	beq.n	80078f4 <_dtoa_r+0x5e4>
 80078ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80078f2:	e04a      	b.n	800798a <_dtoa_r+0x67a>
 80078f4:	4615      	mov	r5, r2
 80078f6:	e7f4      	b.n	80078e2 <_dtoa_r+0x5d2>
 80078f8:	4b05      	ldr	r3, [pc, #20]	; (8007910 <_dtoa_r+0x600>)
 80078fa:	f7f8 fe85 	bl	8000608 <__aeabi_dmul>
 80078fe:	e9cd 0100 	strd	r0, r1, [sp]
 8007902:	e7bc      	b.n	800787e <_dtoa_r+0x56e>
 8007904:	08037e88 	.word	0x08037e88
 8007908:	08037e60 	.word	0x08037e60
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	40240000 	.word	0x40240000
 8007914:	401c0000 	.word	0x401c0000
 8007918:	40140000 	.word	0x40140000
 800791c:	3fe00000 	.word	0x3fe00000
 8007920:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007924:	465d      	mov	r5, fp
 8007926:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800792a:	4630      	mov	r0, r6
 800792c:	4639      	mov	r1, r7
 800792e:	f7f8 ff95 	bl	800085c <__aeabi_ddiv>
 8007932:	f7f9 f919 	bl	8000b68 <__aeabi_d2iz>
 8007936:	4680      	mov	r8, r0
 8007938:	f7f8 fdfc 	bl	8000534 <__aeabi_i2d>
 800793c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007940:	f7f8 fe62 	bl	8000608 <__aeabi_dmul>
 8007944:	4602      	mov	r2, r0
 8007946:	460b      	mov	r3, r1
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007950:	f7f8 fca2 	bl	8000298 <__aeabi_dsub>
 8007954:	f805 6b01 	strb.w	r6, [r5], #1
 8007958:	eba5 060b 	sub.w	r6, r5, fp
 800795c:	45b1      	cmp	r9, r6
 800795e:	4602      	mov	r2, r0
 8007960:	460b      	mov	r3, r1
 8007962:	d139      	bne.n	80079d8 <_dtoa_r+0x6c8>
 8007964:	f7f8 fc9a 	bl	800029c <__adddf3>
 8007968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800796c:	4606      	mov	r6, r0
 800796e:	460f      	mov	r7, r1
 8007970:	f7f9 f8da 	bl	8000b28 <__aeabi_dcmpgt>
 8007974:	b9c8      	cbnz	r0, 80079aa <_dtoa_r+0x69a>
 8007976:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	f7f9 f8ab 	bl	8000ad8 <__aeabi_dcmpeq>
 8007982:	b110      	cbz	r0, 800798a <_dtoa_r+0x67a>
 8007984:	f018 0f01 	tst.w	r8, #1
 8007988:	d10f      	bne.n	80079aa <_dtoa_r+0x69a>
 800798a:	9904      	ldr	r1, [sp, #16]
 800798c:	4620      	mov	r0, r4
 800798e:	f000 fb31 	bl	8007ff4 <_Bfree>
 8007992:	2300      	movs	r3, #0
 8007994:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007996:	702b      	strb	r3, [r5, #0]
 8007998:	f10a 0301 	add.w	r3, sl, #1
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	f000 8241 	beq.w	8007e28 <_dtoa_r+0xb18>
 80079a6:	601d      	str	r5, [r3, #0]
 80079a8:	e23e      	b.n	8007e28 <_dtoa_r+0xb18>
 80079aa:	f8cd a020 	str.w	sl, [sp, #32]
 80079ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80079b2:	2a39      	cmp	r2, #57	; 0x39
 80079b4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80079b8:	d108      	bne.n	80079cc <_dtoa_r+0x6bc>
 80079ba:	459b      	cmp	fp, r3
 80079bc:	d10a      	bne.n	80079d4 <_dtoa_r+0x6c4>
 80079be:	9b08      	ldr	r3, [sp, #32]
 80079c0:	3301      	adds	r3, #1
 80079c2:	9308      	str	r3, [sp, #32]
 80079c4:	2330      	movs	r3, #48	; 0x30
 80079c6:	f88b 3000 	strb.w	r3, [fp]
 80079ca:	465b      	mov	r3, fp
 80079cc:	781a      	ldrb	r2, [r3, #0]
 80079ce:	3201      	adds	r2, #1
 80079d0:	701a      	strb	r2, [r3, #0]
 80079d2:	e78c      	b.n	80078ee <_dtoa_r+0x5de>
 80079d4:	461d      	mov	r5, r3
 80079d6:	e7ea      	b.n	80079ae <_dtoa_r+0x69e>
 80079d8:	2200      	movs	r2, #0
 80079da:	4b9b      	ldr	r3, [pc, #620]	; (8007c48 <_dtoa_r+0x938>)
 80079dc:	f7f8 fe14 	bl	8000608 <__aeabi_dmul>
 80079e0:	2200      	movs	r2, #0
 80079e2:	2300      	movs	r3, #0
 80079e4:	4606      	mov	r6, r0
 80079e6:	460f      	mov	r7, r1
 80079e8:	f7f9 f876 	bl	8000ad8 <__aeabi_dcmpeq>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d09a      	beq.n	8007926 <_dtoa_r+0x616>
 80079f0:	e7cb      	b.n	800798a <_dtoa_r+0x67a>
 80079f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	f000 808b 	beq.w	8007b10 <_dtoa_r+0x800>
 80079fa:	9a06      	ldr	r2, [sp, #24]
 80079fc:	2a01      	cmp	r2, #1
 80079fe:	dc6e      	bgt.n	8007ade <_dtoa_r+0x7ce>
 8007a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a02:	2a00      	cmp	r2, #0
 8007a04:	d067      	beq.n	8007ad6 <_dtoa_r+0x7c6>
 8007a06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007a0a:	9f07      	ldr	r7, [sp, #28]
 8007a0c:	9d05      	ldr	r5, [sp, #20]
 8007a0e:	9a05      	ldr	r2, [sp, #20]
 8007a10:	2101      	movs	r1, #1
 8007a12:	441a      	add	r2, r3
 8007a14:	4620      	mov	r0, r4
 8007a16:	9205      	str	r2, [sp, #20]
 8007a18:	4498      	add	r8, r3
 8007a1a:	f000 fb8b 	bl	8008134 <__i2b>
 8007a1e:	4606      	mov	r6, r0
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	dd0c      	ble.n	8007a3e <_dtoa_r+0x72e>
 8007a24:	f1b8 0f00 	cmp.w	r8, #0
 8007a28:	dd09      	ble.n	8007a3e <_dtoa_r+0x72e>
 8007a2a:	4545      	cmp	r5, r8
 8007a2c:	9a05      	ldr	r2, [sp, #20]
 8007a2e:	462b      	mov	r3, r5
 8007a30:	bfa8      	it	ge
 8007a32:	4643      	movge	r3, r8
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	9205      	str	r2, [sp, #20]
 8007a38:	1aed      	subs	r5, r5, r3
 8007a3a:	eba8 0803 	sub.w	r8, r8, r3
 8007a3e:	9b07      	ldr	r3, [sp, #28]
 8007a40:	b1eb      	cbz	r3, 8007a7e <_dtoa_r+0x76e>
 8007a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d067      	beq.n	8007b18 <_dtoa_r+0x808>
 8007a48:	b18f      	cbz	r7, 8007a6e <_dtoa_r+0x75e>
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	463a      	mov	r2, r7
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f000 fc10 	bl	8008274 <__pow5mult>
 8007a54:	9a04      	ldr	r2, [sp, #16]
 8007a56:	4601      	mov	r1, r0
 8007a58:	4606      	mov	r6, r0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f000 fb73 	bl	8008146 <__multiply>
 8007a60:	9904      	ldr	r1, [sp, #16]
 8007a62:	9008      	str	r0, [sp, #32]
 8007a64:	4620      	mov	r0, r4
 8007a66:	f000 fac5 	bl	8007ff4 <_Bfree>
 8007a6a:	9b08      	ldr	r3, [sp, #32]
 8007a6c:	9304      	str	r3, [sp, #16]
 8007a6e:	9b07      	ldr	r3, [sp, #28]
 8007a70:	1bda      	subs	r2, r3, r7
 8007a72:	d004      	beq.n	8007a7e <_dtoa_r+0x76e>
 8007a74:	9904      	ldr	r1, [sp, #16]
 8007a76:	4620      	mov	r0, r4
 8007a78:	f000 fbfc 	bl	8008274 <__pow5mult>
 8007a7c:	9004      	str	r0, [sp, #16]
 8007a7e:	2101      	movs	r1, #1
 8007a80:	4620      	mov	r0, r4
 8007a82:	f000 fb57 	bl	8008134 <__i2b>
 8007a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a88:	4607      	mov	r7, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 81d0 	beq.w	8007e30 <_dtoa_r+0xb20>
 8007a90:	461a      	mov	r2, r3
 8007a92:	4601      	mov	r1, r0
 8007a94:	4620      	mov	r0, r4
 8007a96:	f000 fbed 	bl	8008274 <__pow5mult>
 8007a9a:	9b06      	ldr	r3, [sp, #24]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	4607      	mov	r7, r0
 8007aa0:	dc40      	bgt.n	8007b24 <_dtoa_r+0x814>
 8007aa2:	9b00      	ldr	r3, [sp, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d139      	bne.n	8007b1c <_dtoa_r+0x80c>
 8007aa8:	9b01      	ldr	r3, [sp, #4]
 8007aaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d136      	bne.n	8007b20 <_dtoa_r+0x810>
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ab8:	0d1b      	lsrs	r3, r3, #20
 8007aba:	051b      	lsls	r3, r3, #20
 8007abc:	b12b      	cbz	r3, 8007aca <_dtoa_r+0x7ba>
 8007abe:	9b05      	ldr	r3, [sp, #20]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	9305      	str	r3, [sp, #20]
 8007ac4:	f108 0801 	add.w	r8, r8, #1
 8007ac8:	2301      	movs	r3, #1
 8007aca:	9307      	str	r3, [sp, #28]
 8007acc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d12a      	bne.n	8007b28 <_dtoa_r+0x818>
 8007ad2:	2001      	movs	r0, #1
 8007ad4:	e030      	b.n	8007b38 <_dtoa_r+0x828>
 8007ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ad8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007adc:	e795      	b.n	8007a0a <_dtoa_r+0x6fa>
 8007ade:	9b07      	ldr	r3, [sp, #28]
 8007ae0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007ae4:	42bb      	cmp	r3, r7
 8007ae6:	bfbf      	itttt	lt
 8007ae8:	9b07      	ldrlt	r3, [sp, #28]
 8007aea:	9707      	strlt	r7, [sp, #28]
 8007aec:	1afa      	sublt	r2, r7, r3
 8007aee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007af0:	bfbb      	ittet	lt
 8007af2:	189b      	addlt	r3, r3, r2
 8007af4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007af6:	1bdf      	subge	r7, r3, r7
 8007af8:	2700      	movlt	r7, #0
 8007afa:	f1b9 0f00 	cmp.w	r9, #0
 8007afe:	bfb5      	itete	lt
 8007b00:	9b05      	ldrlt	r3, [sp, #20]
 8007b02:	9d05      	ldrge	r5, [sp, #20]
 8007b04:	eba3 0509 	sublt.w	r5, r3, r9
 8007b08:	464b      	movge	r3, r9
 8007b0a:	bfb8      	it	lt
 8007b0c:	2300      	movlt	r3, #0
 8007b0e:	e77e      	b.n	8007a0e <_dtoa_r+0x6fe>
 8007b10:	9f07      	ldr	r7, [sp, #28]
 8007b12:	9d05      	ldr	r5, [sp, #20]
 8007b14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007b16:	e783      	b.n	8007a20 <_dtoa_r+0x710>
 8007b18:	9a07      	ldr	r2, [sp, #28]
 8007b1a:	e7ab      	b.n	8007a74 <_dtoa_r+0x764>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e7d4      	b.n	8007aca <_dtoa_r+0x7ba>
 8007b20:	9b00      	ldr	r3, [sp, #0]
 8007b22:	e7d2      	b.n	8007aca <_dtoa_r+0x7ba>
 8007b24:	2300      	movs	r3, #0
 8007b26:	9307      	str	r3, [sp, #28]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007b2e:	6918      	ldr	r0, [r3, #16]
 8007b30:	f000 fab2 	bl	8008098 <__hi0bits>
 8007b34:	f1c0 0020 	rsb	r0, r0, #32
 8007b38:	4440      	add	r0, r8
 8007b3a:	f010 001f 	ands.w	r0, r0, #31
 8007b3e:	d047      	beq.n	8007bd0 <_dtoa_r+0x8c0>
 8007b40:	f1c0 0320 	rsb	r3, r0, #32
 8007b44:	2b04      	cmp	r3, #4
 8007b46:	dd3b      	ble.n	8007bc0 <_dtoa_r+0x8b0>
 8007b48:	9b05      	ldr	r3, [sp, #20]
 8007b4a:	f1c0 001c 	rsb	r0, r0, #28
 8007b4e:	4403      	add	r3, r0
 8007b50:	9305      	str	r3, [sp, #20]
 8007b52:	4405      	add	r5, r0
 8007b54:	4480      	add	r8, r0
 8007b56:	9b05      	ldr	r3, [sp, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dd05      	ble.n	8007b68 <_dtoa_r+0x858>
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	9904      	ldr	r1, [sp, #16]
 8007b60:	4620      	mov	r0, r4
 8007b62:	f000 fbd5 	bl	8008310 <__lshift>
 8007b66:	9004      	str	r0, [sp, #16]
 8007b68:	f1b8 0f00 	cmp.w	r8, #0
 8007b6c:	dd05      	ble.n	8007b7a <_dtoa_r+0x86a>
 8007b6e:	4639      	mov	r1, r7
 8007b70:	4642      	mov	r2, r8
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fbcc 	bl	8008310 <__lshift>
 8007b78:	4607      	mov	r7, r0
 8007b7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b7c:	b353      	cbz	r3, 8007bd4 <_dtoa_r+0x8c4>
 8007b7e:	4639      	mov	r1, r7
 8007b80:	9804      	ldr	r0, [sp, #16]
 8007b82:	f000 fc19 	bl	80083b8 <__mcmp>
 8007b86:	2800      	cmp	r0, #0
 8007b88:	da24      	bge.n	8007bd4 <_dtoa_r+0x8c4>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	220a      	movs	r2, #10
 8007b8e:	9904      	ldr	r1, [sp, #16]
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 fa46 	bl	8008022 <__multadd>
 8007b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b98:	9004      	str	r0, [sp, #16]
 8007b9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 814d 	beq.w	8007e3e <_dtoa_r+0xb2e>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	220a      	movs	r2, #10
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 fa39 	bl	8008022 <__multadd>
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	dc4f      	bgt.n	8007c58 <_dtoa_r+0x948>
 8007bb8:	9b06      	ldr	r3, [sp, #24]
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	dd4c      	ble.n	8007c58 <_dtoa_r+0x948>
 8007bbe:	e011      	b.n	8007be4 <_dtoa_r+0x8d4>
 8007bc0:	d0c9      	beq.n	8007b56 <_dtoa_r+0x846>
 8007bc2:	9a05      	ldr	r2, [sp, #20]
 8007bc4:	331c      	adds	r3, #28
 8007bc6:	441a      	add	r2, r3
 8007bc8:	9205      	str	r2, [sp, #20]
 8007bca:	441d      	add	r5, r3
 8007bcc:	4498      	add	r8, r3
 8007bce:	e7c2      	b.n	8007b56 <_dtoa_r+0x846>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	e7f6      	b.n	8007bc2 <_dtoa_r+0x8b2>
 8007bd4:	f1b9 0f00 	cmp.w	r9, #0
 8007bd8:	dc38      	bgt.n	8007c4c <_dtoa_r+0x93c>
 8007bda:	9b06      	ldr	r3, [sp, #24]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	dd35      	ble.n	8007c4c <_dtoa_r+0x93c>
 8007be0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007be4:	9b02      	ldr	r3, [sp, #8]
 8007be6:	b963      	cbnz	r3, 8007c02 <_dtoa_r+0x8f2>
 8007be8:	4639      	mov	r1, r7
 8007bea:	2205      	movs	r2, #5
 8007bec:	4620      	mov	r0, r4
 8007bee:	f000 fa18 	bl	8008022 <__multadd>
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4607      	mov	r7, r0
 8007bf6:	9804      	ldr	r0, [sp, #16]
 8007bf8:	f000 fbde 	bl	80083b8 <__mcmp>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f73f adcc 	bgt.w	800779a <_dtoa_r+0x48a>
 8007c02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c04:	465d      	mov	r5, fp
 8007c06:	ea6f 0a03 	mvn.w	sl, r3
 8007c0a:	f04f 0900 	mov.w	r9, #0
 8007c0e:	4639      	mov	r1, r7
 8007c10:	4620      	mov	r0, r4
 8007c12:	f000 f9ef 	bl	8007ff4 <_Bfree>
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	f43f aeb7 	beq.w	800798a <_dtoa_r+0x67a>
 8007c1c:	f1b9 0f00 	cmp.w	r9, #0
 8007c20:	d005      	beq.n	8007c2e <_dtoa_r+0x91e>
 8007c22:	45b1      	cmp	r9, r6
 8007c24:	d003      	beq.n	8007c2e <_dtoa_r+0x91e>
 8007c26:	4649      	mov	r1, r9
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f000 f9e3 	bl	8007ff4 <_Bfree>
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4620      	mov	r0, r4
 8007c32:	f000 f9df 	bl	8007ff4 <_Bfree>
 8007c36:	e6a8      	b.n	800798a <_dtoa_r+0x67a>
 8007c38:	2700      	movs	r7, #0
 8007c3a:	463e      	mov	r6, r7
 8007c3c:	e7e1      	b.n	8007c02 <_dtoa_r+0x8f2>
 8007c3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007c42:	463e      	mov	r6, r7
 8007c44:	e5a9      	b.n	800779a <_dtoa_r+0x48a>
 8007c46:	bf00      	nop
 8007c48:	40240000 	.word	0x40240000
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 80fa 	beq.w	8007e4c <_dtoa_r+0xb3c>
 8007c58:	2d00      	cmp	r5, #0
 8007c5a:	dd05      	ble.n	8007c68 <_dtoa_r+0x958>
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	462a      	mov	r2, r5
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 fb55 	bl	8008310 <__lshift>
 8007c66:	4606      	mov	r6, r0
 8007c68:	9b07      	ldr	r3, [sp, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d04c      	beq.n	8007d08 <_dtoa_r+0x9f8>
 8007c6e:	6871      	ldr	r1, [r6, #4]
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f98b 	bl	8007f8c <_Balloc>
 8007c76:	6932      	ldr	r2, [r6, #16]
 8007c78:	3202      	adds	r2, #2
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	0092      	lsls	r2, r2, #2
 8007c7e:	f106 010c 	add.w	r1, r6, #12
 8007c82:	300c      	adds	r0, #12
 8007c84:	f7fe fb98 	bl	80063b8 <memcpy>
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	f000 fb3f 	bl	8008310 <__lshift>
 8007c92:	9b00      	ldr	r3, [sp, #0]
 8007c94:	f8cd b014 	str.w	fp, [sp, #20]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	46b1      	mov	r9, r6
 8007c9e:	9307      	str	r3, [sp, #28]
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	9804      	ldr	r0, [sp, #16]
 8007ca6:	f7ff faa7 	bl	80071f8 <quorem>
 8007caa:	4649      	mov	r1, r9
 8007cac:	4605      	mov	r5, r0
 8007cae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007cb2:	9804      	ldr	r0, [sp, #16]
 8007cb4:	f000 fb80 	bl	80083b8 <__mcmp>
 8007cb8:	4632      	mov	r2, r6
 8007cba:	9000      	str	r0, [sp, #0]
 8007cbc:	4639      	mov	r1, r7
 8007cbe:	4620      	mov	r0, r4
 8007cc0:	f000 fb94 	bl	80083ec <__mdiff>
 8007cc4:	68c3      	ldr	r3, [r0, #12]
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	bb03      	cbnz	r3, 8007d0c <_dtoa_r+0x9fc>
 8007cca:	4601      	mov	r1, r0
 8007ccc:	9008      	str	r0, [sp, #32]
 8007cce:	9804      	ldr	r0, [sp, #16]
 8007cd0:	f000 fb72 	bl	80083b8 <__mcmp>
 8007cd4:	9a08      	ldr	r2, [sp, #32]
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4620      	mov	r0, r4
 8007cdc:	9308      	str	r3, [sp, #32]
 8007cde:	f000 f989 	bl	8007ff4 <_Bfree>
 8007ce2:	9b08      	ldr	r3, [sp, #32]
 8007ce4:	b9a3      	cbnz	r3, 8007d10 <_dtoa_r+0xa00>
 8007ce6:	9a06      	ldr	r2, [sp, #24]
 8007ce8:	b992      	cbnz	r2, 8007d10 <_dtoa_r+0xa00>
 8007cea:	9a07      	ldr	r2, [sp, #28]
 8007cec:	b982      	cbnz	r2, 8007d10 <_dtoa_r+0xa00>
 8007cee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007cf2:	d029      	beq.n	8007d48 <_dtoa_r+0xa38>
 8007cf4:	9b00      	ldr	r3, [sp, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	dd01      	ble.n	8007cfe <_dtoa_r+0x9ee>
 8007cfa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007cfe:	9b05      	ldr	r3, [sp, #20]
 8007d00:	1c5d      	adds	r5, r3, #1
 8007d02:	f883 8000 	strb.w	r8, [r3]
 8007d06:	e782      	b.n	8007c0e <_dtoa_r+0x8fe>
 8007d08:	4630      	mov	r0, r6
 8007d0a:	e7c2      	b.n	8007c92 <_dtoa_r+0x982>
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e7e3      	b.n	8007cd8 <_dtoa_r+0x9c8>
 8007d10:	9a00      	ldr	r2, [sp, #0]
 8007d12:	2a00      	cmp	r2, #0
 8007d14:	db04      	blt.n	8007d20 <_dtoa_r+0xa10>
 8007d16:	d125      	bne.n	8007d64 <_dtoa_r+0xa54>
 8007d18:	9a06      	ldr	r2, [sp, #24]
 8007d1a:	bb1a      	cbnz	r2, 8007d64 <_dtoa_r+0xa54>
 8007d1c:	9a07      	ldr	r2, [sp, #28]
 8007d1e:	bb0a      	cbnz	r2, 8007d64 <_dtoa_r+0xa54>
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	ddec      	ble.n	8007cfe <_dtoa_r+0x9ee>
 8007d24:	2201      	movs	r2, #1
 8007d26:	9904      	ldr	r1, [sp, #16]
 8007d28:	4620      	mov	r0, r4
 8007d2a:	f000 faf1 	bl	8008310 <__lshift>
 8007d2e:	4639      	mov	r1, r7
 8007d30:	9004      	str	r0, [sp, #16]
 8007d32:	f000 fb41 	bl	80083b8 <__mcmp>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	dc03      	bgt.n	8007d42 <_dtoa_r+0xa32>
 8007d3a:	d1e0      	bne.n	8007cfe <_dtoa_r+0x9ee>
 8007d3c:	f018 0f01 	tst.w	r8, #1
 8007d40:	d0dd      	beq.n	8007cfe <_dtoa_r+0x9ee>
 8007d42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d46:	d1d8      	bne.n	8007cfa <_dtoa_r+0x9ea>
 8007d48:	9b05      	ldr	r3, [sp, #20]
 8007d4a:	9a05      	ldr	r2, [sp, #20]
 8007d4c:	1c5d      	adds	r5, r3, #1
 8007d4e:	2339      	movs	r3, #57	; 0x39
 8007d50:	7013      	strb	r3, [r2, #0]
 8007d52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007d56:	2b39      	cmp	r3, #57	; 0x39
 8007d58:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007d5c:	d04f      	beq.n	8007dfe <_dtoa_r+0xaee>
 8007d5e:	3301      	adds	r3, #1
 8007d60:	7013      	strb	r3, [r2, #0]
 8007d62:	e754      	b.n	8007c0e <_dtoa_r+0x8fe>
 8007d64:	9a05      	ldr	r2, [sp, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f102 0501 	add.w	r5, r2, #1
 8007d6c:	dd06      	ble.n	8007d7c <_dtoa_r+0xa6c>
 8007d6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007d72:	d0e9      	beq.n	8007d48 <_dtoa_r+0xa38>
 8007d74:	f108 0801 	add.w	r8, r8, #1
 8007d78:	9b05      	ldr	r3, [sp, #20]
 8007d7a:	e7c2      	b.n	8007d02 <_dtoa_r+0x9f2>
 8007d7c:	9a02      	ldr	r2, [sp, #8]
 8007d7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007d82:	eba5 030b 	sub.w	r3, r5, fp
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d021      	beq.n	8007dce <_dtoa_r+0xabe>
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	220a      	movs	r2, #10
 8007d8e:	9904      	ldr	r1, [sp, #16]
 8007d90:	4620      	mov	r0, r4
 8007d92:	f000 f946 	bl	8008022 <__multadd>
 8007d96:	45b1      	cmp	r9, r6
 8007d98:	9004      	str	r0, [sp, #16]
 8007d9a:	f04f 0300 	mov.w	r3, #0
 8007d9e:	f04f 020a 	mov.w	r2, #10
 8007da2:	4649      	mov	r1, r9
 8007da4:	4620      	mov	r0, r4
 8007da6:	d105      	bne.n	8007db4 <_dtoa_r+0xaa4>
 8007da8:	f000 f93b 	bl	8008022 <__multadd>
 8007dac:	4681      	mov	r9, r0
 8007dae:	4606      	mov	r6, r0
 8007db0:	9505      	str	r5, [sp, #20]
 8007db2:	e776      	b.n	8007ca2 <_dtoa_r+0x992>
 8007db4:	f000 f935 	bl	8008022 <__multadd>
 8007db8:	4631      	mov	r1, r6
 8007dba:	4681      	mov	r9, r0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	220a      	movs	r2, #10
 8007dc0:	4620      	mov	r0, r4
 8007dc2:	f000 f92e 	bl	8008022 <__multadd>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	e7f2      	b.n	8007db0 <_dtoa_r+0xaa0>
 8007dca:	f04f 0900 	mov.w	r9, #0
 8007dce:	2201      	movs	r2, #1
 8007dd0:	9904      	ldr	r1, [sp, #16]
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fa9c 	bl	8008310 <__lshift>
 8007dd8:	4639      	mov	r1, r7
 8007dda:	9004      	str	r0, [sp, #16]
 8007ddc:	f000 faec 	bl	80083b8 <__mcmp>
 8007de0:	2800      	cmp	r0, #0
 8007de2:	dcb6      	bgt.n	8007d52 <_dtoa_r+0xa42>
 8007de4:	d102      	bne.n	8007dec <_dtoa_r+0xadc>
 8007de6:	f018 0f01 	tst.w	r8, #1
 8007dea:	d1b2      	bne.n	8007d52 <_dtoa_r+0xa42>
 8007dec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007df0:	2b30      	cmp	r3, #48	; 0x30
 8007df2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007df6:	f47f af0a 	bne.w	8007c0e <_dtoa_r+0x8fe>
 8007dfa:	4615      	mov	r5, r2
 8007dfc:	e7f6      	b.n	8007dec <_dtoa_r+0xadc>
 8007dfe:	4593      	cmp	fp, r2
 8007e00:	d105      	bne.n	8007e0e <_dtoa_r+0xafe>
 8007e02:	2331      	movs	r3, #49	; 0x31
 8007e04:	f10a 0a01 	add.w	sl, sl, #1
 8007e08:	f88b 3000 	strb.w	r3, [fp]
 8007e0c:	e6ff      	b.n	8007c0e <_dtoa_r+0x8fe>
 8007e0e:	4615      	mov	r5, r2
 8007e10:	e79f      	b.n	8007d52 <_dtoa_r+0xa42>
 8007e12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007e78 <_dtoa_r+0xb68>
 8007e16:	e007      	b.n	8007e28 <_dtoa_r+0xb18>
 8007e18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007e1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007e7c <_dtoa_r+0xb6c>
 8007e1e:	b11b      	cbz	r3, 8007e28 <_dtoa_r+0xb18>
 8007e20:	f10b 0308 	add.w	r3, fp, #8
 8007e24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007e26:	6013      	str	r3, [r2, #0]
 8007e28:	4658      	mov	r0, fp
 8007e2a:	b017      	add	sp, #92	; 0x5c
 8007e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e30:	9b06      	ldr	r3, [sp, #24]
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	f77f ae35 	ble.w	8007aa2 <_dtoa_r+0x792>
 8007e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e3a:	9307      	str	r3, [sp, #28]
 8007e3c:	e649      	b.n	8007ad2 <_dtoa_r+0x7c2>
 8007e3e:	9b02      	ldr	r3, [sp, #8]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	dc03      	bgt.n	8007e4c <_dtoa_r+0xb3c>
 8007e44:	9b06      	ldr	r3, [sp, #24]
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	f73f aecc 	bgt.w	8007be4 <_dtoa_r+0x8d4>
 8007e4c:	465d      	mov	r5, fp
 8007e4e:	4639      	mov	r1, r7
 8007e50:	9804      	ldr	r0, [sp, #16]
 8007e52:	f7ff f9d1 	bl	80071f8 <quorem>
 8007e56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007e5a:	f805 8b01 	strb.w	r8, [r5], #1
 8007e5e:	9a02      	ldr	r2, [sp, #8]
 8007e60:	eba5 030b 	sub.w	r3, r5, fp
 8007e64:	429a      	cmp	r2, r3
 8007e66:	ddb0      	ble.n	8007dca <_dtoa_r+0xaba>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	220a      	movs	r2, #10
 8007e6c:	9904      	ldr	r1, [sp, #16]
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 f8d7 	bl	8008022 <__multadd>
 8007e74:	9004      	str	r0, [sp, #16]
 8007e76:	e7ea      	b.n	8007e4e <_dtoa_r+0xb3e>
 8007e78:	08037e28 	.word	0x08037e28
 8007e7c:	08037e4c 	.word	0x08037e4c

08007e80 <_localeconv_r>:
 8007e80:	4b04      	ldr	r3, [pc, #16]	; (8007e94 <_localeconv_r+0x14>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6a18      	ldr	r0, [r3, #32]
 8007e86:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <_localeconv_r+0x18>)
 8007e88:	2800      	cmp	r0, #0
 8007e8a:	bf08      	it	eq
 8007e8c:	4618      	moveq	r0, r3
 8007e8e:	30f0      	adds	r0, #240	; 0xf0
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	200009cc 	.word	0x200009cc
 8007e98:	20000a30 	.word	0x20000a30

08007e9c <_lseek_r>:
 8007e9c:	b538      	push	{r3, r4, r5, lr}
 8007e9e:	4c07      	ldr	r4, [pc, #28]	; (8007ebc <_lseek_r+0x20>)
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	4608      	mov	r0, r1
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	6022      	str	r2, [r4, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	f7f9 fc10 	bl	80016d0 <_lseek>
 8007eb0:	1c43      	adds	r3, r0, #1
 8007eb2:	d102      	bne.n	8007eba <_lseek_r+0x1e>
 8007eb4:	6823      	ldr	r3, [r4, #0]
 8007eb6:	b103      	cbz	r3, 8007eba <_lseek_r+0x1e>
 8007eb8:	602b      	str	r3, [r5, #0]
 8007eba:	bd38      	pop	{r3, r4, r5, pc}
 8007ebc:	200013a0 	.word	0x200013a0

08007ec0 <__swhatbuf_r>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	460e      	mov	r6, r1
 8007ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec8:	2900      	cmp	r1, #0
 8007eca:	b096      	sub	sp, #88	; 0x58
 8007ecc:	4614      	mov	r4, r2
 8007ece:	461d      	mov	r5, r3
 8007ed0:	da07      	bge.n	8007ee2 <__swhatbuf_r+0x22>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	602b      	str	r3, [r5, #0]
 8007ed6:	89b3      	ldrh	r3, [r6, #12]
 8007ed8:	061a      	lsls	r2, r3, #24
 8007eda:	d410      	bmi.n	8007efe <__swhatbuf_r+0x3e>
 8007edc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ee0:	e00e      	b.n	8007f00 <__swhatbuf_r+0x40>
 8007ee2:	466a      	mov	r2, sp
 8007ee4:	f000 fe06 	bl	8008af4 <_fstat_r>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	dbf2      	blt.n	8007ed2 <__swhatbuf_r+0x12>
 8007eec:	9a01      	ldr	r2, [sp, #4]
 8007eee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ef2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ef6:	425a      	negs	r2, r3
 8007ef8:	415a      	adcs	r2, r3
 8007efa:	602a      	str	r2, [r5, #0]
 8007efc:	e7ee      	b.n	8007edc <__swhatbuf_r+0x1c>
 8007efe:	2340      	movs	r3, #64	; 0x40
 8007f00:	2000      	movs	r0, #0
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	b016      	add	sp, #88	; 0x58
 8007f06:	bd70      	pop	{r4, r5, r6, pc}

08007f08 <__smakebuf_r>:
 8007f08:	898b      	ldrh	r3, [r1, #12]
 8007f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f0c:	079d      	lsls	r5, r3, #30
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460c      	mov	r4, r1
 8007f12:	d507      	bpl.n	8007f24 <__smakebuf_r+0x1c>
 8007f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	6123      	str	r3, [r4, #16]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	6163      	str	r3, [r4, #20]
 8007f20:	b002      	add	sp, #8
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	ab01      	add	r3, sp, #4
 8007f26:	466a      	mov	r2, sp
 8007f28:	f7ff ffca 	bl	8007ec0 <__swhatbuf_r>
 8007f2c:	9900      	ldr	r1, [sp, #0]
 8007f2e:	4605      	mov	r5, r0
 8007f30:	4630      	mov	r0, r6
 8007f32:	f7fe faa3 	bl	800647c <_malloc_r>
 8007f36:	b948      	cbnz	r0, 8007f4c <__smakebuf_r+0x44>
 8007f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3c:	059a      	lsls	r2, r3, #22
 8007f3e:	d4ef      	bmi.n	8007f20 <__smakebuf_r+0x18>
 8007f40:	f023 0303 	bic.w	r3, r3, #3
 8007f44:	f043 0302 	orr.w	r3, r3, #2
 8007f48:	81a3      	strh	r3, [r4, #12]
 8007f4a:	e7e3      	b.n	8007f14 <__smakebuf_r+0xc>
 8007f4c:	4b0d      	ldr	r3, [pc, #52]	; (8007f84 <__smakebuf_r+0x7c>)
 8007f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	6020      	str	r0, [r4, #0]
 8007f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f58:	81a3      	strh	r3, [r4, #12]
 8007f5a:	9b00      	ldr	r3, [sp, #0]
 8007f5c:	6163      	str	r3, [r4, #20]
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	6120      	str	r0, [r4, #16]
 8007f62:	b15b      	cbz	r3, 8007f7c <__smakebuf_r+0x74>
 8007f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f000 fdd5 	bl	8008b18 <_isatty_r>
 8007f6e:	b128      	cbz	r0, 8007f7c <__smakebuf_r+0x74>
 8007f70:	89a3      	ldrh	r3, [r4, #12]
 8007f72:	f023 0303 	bic.w	r3, r3, #3
 8007f76:	f043 0301 	orr.w	r3, r3, #1
 8007f7a:	81a3      	strh	r3, [r4, #12]
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	431d      	orrs	r5, r3
 8007f80:	81a5      	strh	r5, [r4, #12]
 8007f82:	e7cd      	b.n	8007f20 <__smakebuf_r+0x18>
 8007f84:	08006215 	.word	0x08006215

08007f88 <__malloc_lock>:
 8007f88:	4770      	bx	lr

08007f8a <__malloc_unlock>:
 8007f8a:	4770      	bx	lr

08007f8c <_Balloc>:
 8007f8c:	b570      	push	{r4, r5, r6, lr}
 8007f8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f90:	4604      	mov	r4, r0
 8007f92:	460e      	mov	r6, r1
 8007f94:	b93d      	cbnz	r5, 8007fa6 <_Balloc+0x1a>
 8007f96:	2010      	movs	r0, #16
 8007f98:	f7fe fa06 	bl	80063a8 <malloc>
 8007f9c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f9e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fa2:	6005      	str	r5, [r0, #0]
 8007fa4:	60c5      	str	r5, [r0, #12]
 8007fa6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007fa8:	68eb      	ldr	r3, [r5, #12]
 8007faa:	b183      	cbz	r3, 8007fce <_Balloc+0x42>
 8007fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007fb4:	b9b8      	cbnz	r0, 8007fe6 <_Balloc+0x5a>
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	fa01 f506 	lsl.w	r5, r1, r6
 8007fbc:	1d6a      	adds	r2, r5, #5
 8007fbe:	0092      	lsls	r2, r2, #2
 8007fc0:	4620      	mov	r0, r4
 8007fc2:	f000 fabf 	bl	8008544 <_calloc_r>
 8007fc6:	b160      	cbz	r0, 8007fe2 <_Balloc+0x56>
 8007fc8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007fcc:	e00e      	b.n	8007fec <_Balloc+0x60>
 8007fce:	2221      	movs	r2, #33	; 0x21
 8007fd0:	2104      	movs	r1, #4
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fab6 	bl	8008544 <_calloc_r>
 8007fd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fda:	60e8      	str	r0, [r5, #12]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e4      	bne.n	8007fac <_Balloc+0x20>
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
 8007fe6:	6802      	ldr	r2, [r0, #0]
 8007fe8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007fec:	2300      	movs	r3, #0
 8007fee:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ff2:	e7f7      	b.n	8007fe4 <_Balloc+0x58>

08007ff4 <_Bfree>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ff8:	4606      	mov	r6, r0
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	b93c      	cbnz	r4, 800800e <_Bfree+0x1a>
 8007ffe:	2010      	movs	r0, #16
 8008000:	f7fe f9d2 	bl	80063a8 <malloc>
 8008004:	6270      	str	r0, [r6, #36]	; 0x24
 8008006:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800800a:	6004      	str	r4, [r0, #0]
 800800c:	60c4      	str	r4, [r0, #12]
 800800e:	b13d      	cbz	r5, 8008020 <_Bfree+0x2c>
 8008010:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008012:	686a      	ldr	r2, [r5, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800801a:	6029      	str	r1, [r5, #0]
 800801c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008020:	bd70      	pop	{r4, r5, r6, pc}

08008022 <__multadd>:
 8008022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008026:	690d      	ldr	r5, [r1, #16]
 8008028:	461f      	mov	r7, r3
 800802a:	4606      	mov	r6, r0
 800802c:	460c      	mov	r4, r1
 800802e:	f101 0c14 	add.w	ip, r1, #20
 8008032:	2300      	movs	r3, #0
 8008034:	f8dc 0000 	ldr.w	r0, [ip]
 8008038:	b281      	uxth	r1, r0
 800803a:	fb02 7101 	mla	r1, r2, r1, r7
 800803e:	0c0f      	lsrs	r7, r1, #16
 8008040:	0c00      	lsrs	r0, r0, #16
 8008042:	fb02 7000 	mla	r0, r2, r0, r7
 8008046:	b289      	uxth	r1, r1
 8008048:	3301      	adds	r3, #1
 800804a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800804e:	429d      	cmp	r5, r3
 8008050:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008054:	f84c 1b04 	str.w	r1, [ip], #4
 8008058:	dcec      	bgt.n	8008034 <__multadd+0x12>
 800805a:	b1d7      	cbz	r7, 8008092 <__multadd+0x70>
 800805c:	68a3      	ldr	r3, [r4, #8]
 800805e:	42ab      	cmp	r3, r5
 8008060:	dc12      	bgt.n	8008088 <__multadd+0x66>
 8008062:	6861      	ldr	r1, [r4, #4]
 8008064:	4630      	mov	r0, r6
 8008066:	3101      	adds	r1, #1
 8008068:	f7ff ff90 	bl	8007f8c <_Balloc>
 800806c:	6922      	ldr	r2, [r4, #16]
 800806e:	3202      	adds	r2, #2
 8008070:	f104 010c 	add.w	r1, r4, #12
 8008074:	4680      	mov	r8, r0
 8008076:	0092      	lsls	r2, r2, #2
 8008078:	300c      	adds	r0, #12
 800807a:	f7fe f99d 	bl	80063b8 <memcpy>
 800807e:	4621      	mov	r1, r4
 8008080:	4630      	mov	r0, r6
 8008082:	f7ff ffb7 	bl	8007ff4 <_Bfree>
 8008086:	4644      	mov	r4, r8
 8008088:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800808c:	3501      	adds	r5, #1
 800808e:	615f      	str	r7, [r3, #20]
 8008090:	6125      	str	r5, [r4, #16]
 8008092:	4620      	mov	r0, r4
 8008094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008098 <__hi0bits>:
 8008098:	0c02      	lsrs	r2, r0, #16
 800809a:	0412      	lsls	r2, r2, #16
 800809c:	4603      	mov	r3, r0
 800809e:	b9b2      	cbnz	r2, 80080ce <__hi0bits+0x36>
 80080a0:	0403      	lsls	r3, r0, #16
 80080a2:	2010      	movs	r0, #16
 80080a4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80080a8:	bf04      	itt	eq
 80080aa:	021b      	lsleq	r3, r3, #8
 80080ac:	3008      	addeq	r0, #8
 80080ae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80080b2:	bf04      	itt	eq
 80080b4:	011b      	lsleq	r3, r3, #4
 80080b6:	3004      	addeq	r0, #4
 80080b8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80080bc:	bf04      	itt	eq
 80080be:	009b      	lsleq	r3, r3, #2
 80080c0:	3002      	addeq	r0, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	db06      	blt.n	80080d4 <__hi0bits+0x3c>
 80080c6:	005b      	lsls	r3, r3, #1
 80080c8:	d503      	bpl.n	80080d2 <__hi0bits+0x3a>
 80080ca:	3001      	adds	r0, #1
 80080cc:	4770      	bx	lr
 80080ce:	2000      	movs	r0, #0
 80080d0:	e7e8      	b.n	80080a4 <__hi0bits+0xc>
 80080d2:	2020      	movs	r0, #32
 80080d4:	4770      	bx	lr

080080d6 <__lo0bits>:
 80080d6:	6803      	ldr	r3, [r0, #0]
 80080d8:	f013 0207 	ands.w	r2, r3, #7
 80080dc:	4601      	mov	r1, r0
 80080de:	d00b      	beq.n	80080f8 <__lo0bits+0x22>
 80080e0:	07da      	lsls	r2, r3, #31
 80080e2:	d423      	bmi.n	800812c <__lo0bits+0x56>
 80080e4:	0798      	lsls	r0, r3, #30
 80080e6:	bf49      	itett	mi
 80080e8:	085b      	lsrmi	r3, r3, #1
 80080ea:	089b      	lsrpl	r3, r3, #2
 80080ec:	2001      	movmi	r0, #1
 80080ee:	600b      	strmi	r3, [r1, #0]
 80080f0:	bf5c      	itt	pl
 80080f2:	600b      	strpl	r3, [r1, #0]
 80080f4:	2002      	movpl	r0, #2
 80080f6:	4770      	bx	lr
 80080f8:	b298      	uxth	r0, r3
 80080fa:	b9a8      	cbnz	r0, 8008128 <__lo0bits+0x52>
 80080fc:	0c1b      	lsrs	r3, r3, #16
 80080fe:	2010      	movs	r0, #16
 8008100:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008104:	bf04      	itt	eq
 8008106:	0a1b      	lsreq	r3, r3, #8
 8008108:	3008      	addeq	r0, #8
 800810a:	071a      	lsls	r2, r3, #28
 800810c:	bf04      	itt	eq
 800810e:	091b      	lsreq	r3, r3, #4
 8008110:	3004      	addeq	r0, #4
 8008112:	079a      	lsls	r2, r3, #30
 8008114:	bf04      	itt	eq
 8008116:	089b      	lsreq	r3, r3, #2
 8008118:	3002      	addeq	r0, #2
 800811a:	07da      	lsls	r2, r3, #31
 800811c:	d402      	bmi.n	8008124 <__lo0bits+0x4e>
 800811e:	085b      	lsrs	r3, r3, #1
 8008120:	d006      	beq.n	8008130 <__lo0bits+0x5a>
 8008122:	3001      	adds	r0, #1
 8008124:	600b      	str	r3, [r1, #0]
 8008126:	4770      	bx	lr
 8008128:	4610      	mov	r0, r2
 800812a:	e7e9      	b.n	8008100 <__lo0bits+0x2a>
 800812c:	2000      	movs	r0, #0
 800812e:	4770      	bx	lr
 8008130:	2020      	movs	r0, #32
 8008132:	4770      	bx	lr

08008134 <__i2b>:
 8008134:	b510      	push	{r4, lr}
 8008136:	460c      	mov	r4, r1
 8008138:	2101      	movs	r1, #1
 800813a:	f7ff ff27 	bl	8007f8c <_Balloc>
 800813e:	2201      	movs	r2, #1
 8008140:	6144      	str	r4, [r0, #20]
 8008142:	6102      	str	r2, [r0, #16]
 8008144:	bd10      	pop	{r4, pc}

08008146 <__multiply>:
 8008146:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800814a:	4614      	mov	r4, r2
 800814c:	690a      	ldr	r2, [r1, #16]
 800814e:	6923      	ldr	r3, [r4, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	bfb8      	it	lt
 8008154:	460b      	movlt	r3, r1
 8008156:	4688      	mov	r8, r1
 8008158:	bfbc      	itt	lt
 800815a:	46a0      	movlt	r8, r4
 800815c:	461c      	movlt	r4, r3
 800815e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008162:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008166:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800816a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800816e:	eb07 0609 	add.w	r6, r7, r9
 8008172:	42b3      	cmp	r3, r6
 8008174:	bfb8      	it	lt
 8008176:	3101      	addlt	r1, #1
 8008178:	f7ff ff08 	bl	8007f8c <_Balloc>
 800817c:	f100 0514 	add.w	r5, r0, #20
 8008180:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008184:	462b      	mov	r3, r5
 8008186:	2200      	movs	r2, #0
 8008188:	4573      	cmp	r3, lr
 800818a:	d316      	bcc.n	80081ba <__multiply+0x74>
 800818c:	f104 0214 	add.w	r2, r4, #20
 8008190:	f108 0114 	add.w	r1, r8, #20
 8008194:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008198:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	9b00      	ldr	r3, [sp, #0]
 80081a0:	9201      	str	r2, [sp, #4]
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d80c      	bhi.n	80081c0 <__multiply+0x7a>
 80081a6:	2e00      	cmp	r6, #0
 80081a8:	dd03      	ble.n	80081b2 <__multiply+0x6c>
 80081aa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d05d      	beq.n	800826e <__multiply+0x128>
 80081b2:	6106      	str	r6, [r0, #16]
 80081b4:	b003      	add	sp, #12
 80081b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ba:	f843 2b04 	str.w	r2, [r3], #4
 80081be:	e7e3      	b.n	8008188 <__multiply+0x42>
 80081c0:	f8b2 b000 	ldrh.w	fp, [r2]
 80081c4:	f1bb 0f00 	cmp.w	fp, #0
 80081c8:	d023      	beq.n	8008212 <__multiply+0xcc>
 80081ca:	4689      	mov	r9, r1
 80081cc:	46ac      	mov	ip, r5
 80081ce:	f04f 0800 	mov.w	r8, #0
 80081d2:	f859 4b04 	ldr.w	r4, [r9], #4
 80081d6:	f8dc a000 	ldr.w	sl, [ip]
 80081da:	b2a3      	uxth	r3, r4
 80081dc:	fa1f fa8a 	uxth.w	sl, sl
 80081e0:	fb0b a303 	mla	r3, fp, r3, sl
 80081e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80081e8:	f8dc 4000 	ldr.w	r4, [ip]
 80081ec:	4443      	add	r3, r8
 80081ee:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80081f2:	fb0b 840a 	mla	r4, fp, sl, r8
 80081f6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80081fa:	46e2      	mov	sl, ip
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008202:	454f      	cmp	r7, r9
 8008204:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008208:	f84a 3b04 	str.w	r3, [sl], #4
 800820c:	d82b      	bhi.n	8008266 <__multiply+0x120>
 800820e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008212:	9b01      	ldr	r3, [sp, #4]
 8008214:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008218:	3204      	adds	r2, #4
 800821a:	f1ba 0f00 	cmp.w	sl, #0
 800821e:	d020      	beq.n	8008262 <__multiply+0x11c>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	4689      	mov	r9, r1
 8008224:	46a8      	mov	r8, r5
 8008226:	f04f 0b00 	mov.w	fp, #0
 800822a:	f8b9 c000 	ldrh.w	ip, [r9]
 800822e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008232:	fb0a 440c 	mla	r4, sl, ip, r4
 8008236:	445c      	add	r4, fp
 8008238:	46c4      	mov	ip, r8
 800823a:	b29b      	uxth	r3, r3
 800823c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008240:	f84c 3b04 	str.w	r3, [ip], #4
 8008244:	f859 3b04 	ldr.w	r3, [r9], #4
 8008248:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800824c:	0c1b      	lsrs	r3, r3, #16
 800824e:	fb0a b303 	mla	r3, sl, r3, fp
 8008252:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008256:	454f      	cmp	r7, r9
 8008258:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800825c:	d805      	bhi.n	800826a <__multiply+0x124>
 800825e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008262:	3504      	adds	r5, #4
 8008264:	e79b      	b.n	800819e <__multiply+0x58>
 8008266:	46d4      	mov	ip, sl
 8008268:	e7b3      	b.n	80081d2 <__multiply+0x8c>
 800826a:	46e0      	mov	r8, ip
 800826c:	e7dd      	b.n	800822a <__multiply+0xe4>
 800826e:	3e01      	subs	r6, #1
 8008270:	e799      	b.n	80081a6 <__multiply+0x60>
	...

08008274 <__pow5mult>:
 8008274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008278:	4615      	mov	r5, r2
 800827a:	f012 0203 	ands.w	r2, r2, #3
 800827e:	4606      	mov	r6, r0
 8008280:	460f      	mov	r7, r1
 8008282:	d007      	beq.n	8008294 <__pow5mult+0x20>
 8008284:	3a01      	subs	r2, #1
 8008286:	4c21      	ldr	r4, [pc, #132]	; (800830c <__pow5mult+0x98>)
 8008288:	2300      	movs	r3, #0
 800828a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800828e:	f7ff fec8 	bl	8008022 <__multadd>
 8008292:	4607      	mov	r7, r0
 8008294:	10ad      	asrs	r5, r5, #2
 8008296:	d035      	beq.n	8008304 <__pow5mult+0x90>
 8008298:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800829a:	b93c      	cbnz	r4, 80082ac <__pow5mult+0x38>
 800829c:	2010      	movs	r0, #16
 800829e:	f7fe f883 	bl	80063a8 <malloc>
 80082a2:	6270      	str	r0, [r6, #36]	; 0x24
 80082a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082a8:	6004      	str	r4, [r0, #0]
 80082aa:	60c4      	str	r4, [r0, #12]
 80082ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80082b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082b4:	b94c      	cbnz	r4, 80082ca <__pow5mult+0x56>
 80082b6:	f240 2171 	movw	r1, #625	; 0x271
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7ff ff3a 	bl	8008134 <__i2b>
 80082c0:	2300      	movs	r3, #0
 80082c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80082c6:	4604      	mov	r4, r0
 80082c8:	6003      	str	r3, [r0, #0]
 80082ca:	f04f 0800 	mov.w	r8, #0
 80082ce:	07eb      	lsls	r3, r5, #31
 80082d0:	d50a      	bpl.n	80082e8 <__pow5mult+0x74>
 80082d2:	4639      	mov	r1, r7
 80082d4:	4622      	mov	r2, r4
 80082d6:	4630      	mov	r0, r6
 80082d8:	f7ff ff35 	bl	8008146 <__multiply>
 80082dc:	4639      	mov	r1, r7
 80082de:	4681      	mov	r9, r0
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7ff fe87 	bl	8007ff4 <_Bfree>
 80082e6:	464f      	mov	r7, r9
 80082e8:	106d      	asrs	r5, r5, #1
 80082ea:	d00b      	beq.n	8008304 <__pow5mult+0x90>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	b938      	cbnz	r0, 8008300 <__pow5mult+0x8c>
 80082f0:	4622      	mov	r2, r4
 80082f2:	4621      	mov	r1, r4
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff ff26 	bl	8008146 <__multiply>
 80082fa:	6020      	str	r0, [r4, #0]
 80082fc:	f8c0 8000 	str.w	r8, [r0]
 8008300:	4604      	mov	r4, r0
 8008302:	e7e4      	b.n	80082ce <__pow5mult+0x5a>
 8008304:	4638      	mov	r0, r7
 8008306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800830a:	bf00      	nop
 800830c:	08037f50 	.word	0x08037f50

08008310 <__lshift>:
 8008310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008314:	460c      	mov	r4, r1
 8008316:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800831a:	6923      	ldr	r3, [r4, #16]
 800831c:	6849      	ldr	r1, [r1, #4]
 800831e:	eb0a 0903 	add.w	r9, sl, r3
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	4607      	mov	r7, r0
 8008326:	4616      	mov	r6, r2
 8008328:	f109 0501 	add.w	r5, r9, #1
 800832c:	42ab      	cmp	r3, r5
 800832e:	db32      	blt.n	8008396 <__lshift+0x86>
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff fe2b 	bl	8007f8c <_Balloc>
 8008336:	2300      	movs	r3, #0
 8008338:	4680      	mov	r8, r0
 800833a:	f100 0114 	add.w	r1, r0, #20
 800833e:	461a      	mov	r2, r3
 8008340:	4553      	cmp	r3, sl
 8008342:	db2b      	blt.n	800839c <__lshift+0x8c>
 8008344:	6920      	ldr	r0, [r4, #16]
 8008346:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800834a:	f104 0314 	add.w	r3, r4, #20
 800834e:	f016 021f 	ands.w	r2, r6, #31
 8008352:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008356:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800835a:	d025      	beq.n	80083a8 <__lshift+0x98>
 800835c:	f1c2 0e20 	rsb	lr, r2, #32
 8008360:	2000      	movs	r0, #0
 8008362:	681e      	ldr	r6, [r3, #0]
 8008364:	468a      	mov	sl, r1
 8008366:	4096      	lsls	r6, r2
 8008368:	4330      	orrs	r0, r6
 800836a:	f84a 0b04 	str.w	r0, [sl], #4
 800836e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008372:	459c      	cmp	ip, r3
 8008374:	fa20 f00e 	lsr.w	r0, r0, lr
 8008378:	d814      	bhi.n	80083a4 <__lshift+0x94>
 800837a:	6048      	str	r0, [r1, #4]
 800837c:	b108      	cbz	r0, 8008382 <__lshift+0x72>
 800837e:	f109 0502 	add.w	r5, r9, #2
 8008382:	3d01      	subs	r5, #1
 8008384:	4638      	mov	r0, r7
 8008386:	f8c8 5010 	str.w	r5, [r8, #16]
 800838a:	4621      	mov	r1, r4
 800838c:	f7ff fe32 	bl	8007ff4 <_Bfree>
 8008390:	4640      	mov	r0, r8
 8008392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008396:	3101      	adds	r1, #1
 8008398:	005b      	lsls	r3, r3, #1
 800839a:	e7c7      	b.n	800832c <__lshift+0x1c>
 800839c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80083a0:	3301      	adds	r3, #1
 80083a2:	e7cd      	b.n	8008340 <__lshift+0x30>
 80083a4:	4651      	mov	r1, sl
 80083a6:	e7dc      	b.n	8008362 <__lshift+0x52>
 80083a8:	3904      	subs	r1, #4
 80083aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083ae:	f841 2f04 	str.w	r2, [r1, #4]!
 80083b2:	459c      	cmp	ip, r3
 80083b4:	d8f9      	bhi.n	80083aa <__lshift+0x9a>
 80083b6:	e7e4      	b.n	8008382 <__lshift+0x72>

080083b8 <__mcmp>:
 80083b8:	6903      	ldr	r3, [r0, #16]
 80083ba:	690a      	ldr	r2, [r1, #16]
 80083bc:	1a9b      	subs	r3, r3, r2
 80083be:	b530      	push	{r4, r5, lr}
 80083c0:	d10c      	bne.n	80083dc <__mcmp+0x24>
 80083c2:	0092      	lsls	r2, r2, #2
 80083c4:	3014      	adds	r0, #20
 80083c6:	3114      	adds	r1, #20
 80083c8:	1884      	adds	r4, r0, r2
 80083ca:	4411      	add	r1, r2
 80083cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80083d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80083d4:	4295      	cmp	r5, r2
 80083d6:	d003      	beq.n	80083e0 <__mcmp+0x28>
 80083d8:	d305      	bcc.n	80083e6 <__mcmp+0x2e>
 80083da:	2301      	movs	r3, #1
 80083dc:	4618      	mov	r0, r3
 80083de:	bd30      	pop	{r4, r5, pc}
 80083e0:	42a0      	cmp	r0, r4
 80083e2:	d3f3      	bcc.n	80083cc <__mcmp+0x14>
 80083e4:	e7fa      	b.n	80083dc <__mcmp+0x24>
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ea:	e7f7      	b.n	80083dc <__mcmp+0x24>

080083ec <__mdiff>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	460d      	mov	r5, r1
 80083f2:	4607      	mov	r7, r0
 80083f4:	4611      	mov	r1, r2
 80083f6:	4628      	mov	r0, r5
 80083f8:	4614      	mov	r4, r2
 80083fa:	f7ff ffdd 	bl	80083b8 <__mcmp>
 80083fe:	1e06      	subs	r6, r0, #0
 8008400:	d108      	bne.n	8008414 <__mdiff+0x28>
 8008402:	4631      	mov	r1, r6
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff fdc1 	bl	8007f8c <_Balloc>
 800840a:	2301      	movs	r3, #1
 800840c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	bfa4      	itt	ge
 8008416:	4623      	movge	r3, r4
 8008418:	462c      	movge	r4, r5
 800841a:	4638      	mov	r0, r7
 800841c:	6861      	ldr	r1, [r4, #4]
 800841e:	bfa6      	itte	ge
 8008420:	461d      	movge	r5, r3
 8008422:	2600      	movge	r6, #0
 8008424:	2601      	movlt	r6, #1
 8008426:	f7ff fdb1 	bl	8007f8c <_Balloc>
 800842a:	692b      	ldr	r3, [r5, #16]
 800842c:	60c6      	str	r6, [r0, #12]
 800842e:	6926      	ldr	r6, [r4, #16]
 8008430:	f105 0914 	add.w	r9, r5, #20
 8008434:	f104 0214 	add.w	r2, r4, #20
 8008438:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800843c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008440:	f100 0514 	add.w	r5, r0, #20
 8008444:	f04f 0e00 	mov.w	lr, #0
 8008448:	f852 ab04 	ldr.w	sl, [r2], #4
 800844c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008450:	fa1e f18a 	uxtah	r1, lr, sl
 8008454:	b2a3      	uxth	r3, r4
 8008456:	1ac9      	subs	r1, r1, r3
 8008458:	0c23      	lsrs	r3, r4, #16
 800845a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800845e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008462:	b289      	uxth	r1, r1
 8008464:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008468:	45c8      	cmp	r8, r9
 800846a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800846e:	4694      	mov	ip, r2
 8008470:	f845 3b04 	str.w	r3, [r5], #4
 8008474:	d8e8      	bhi.n	8008448 <__mdiff+0x5c>
 8008476:	45bc      	cmp	ip, r7
 8008478:	d304      	bcc.n	8008484 <__mdiff+0x98>
 800847a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800847e:	b183      	cbz	r3, 80084a2 <__mdiff+0xb6>
 8008480:	6106      	str	r6, [r0, #16]
 8008482:	e7c5      	b.n	8008410 <__mdiff+0x24>
 8008484:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008488:	fa1e f381 	uxtah	r3, lr, r1
 800848c:	141a      	asrs	r2, r3, #16
 800848e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008492:	b29b      	uxth	r3, r3
 8008494:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008498:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800849c:	f845 3b04 	str.w	r3, [r5], #4
 80084a0:	e7e9      	b.n	8008476 <__mdiff+0x8a>
 80084a2:	3e01      	subs	r6, #1
 80084a4:	e7e9      	b.n	800847a <__mdiff+0x8e>

080084a6 <__d2b>:
 80084a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80084aa:	460e      	mov	r6, r1
 80084ac:	2101      	movs	r1, #1
 80084ae:	ec59 8b10 	vmov	r8, r9, d0
 80084b2:	4615      	mov	r5, r2
 80084b4:	f7ff fd6a 	bl	8007f8c <_Balloc>
 80084b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80084bc:	4607      	mov	r7, r0
 80084be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084c2:	bb34      	cbnz	r4, 8008512 <__d2b+0x6c>
 80084c4:	9301      	str	r3, [sp, #4]
 80084c6:	f1b8 0300 	subs.w	r3, r8, #0
 80084ca:	d027      	beq.n	800851c <__d2b+0x76>
 80084cc:	a802      	add	r0, sp, #8
 80084ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 80084d2:	f7ff fe00 	bl	80080d6 <__lo0bits>
 80084d6:	9900      	ldr	r1, [sp, #0]
 80084d8:	b1f0      	cbz	r0, 8008518 <__d2b+0x72>
 80084da:	9a01      	ldr	r2, [sp, #4]
 80084dc:	f1c0 0320 	rsb	r3, r0, #32
 80084e0:	fa02 f303 	lsl.w	r3, r2, r3
 80084e4:	430b      	orrs	r3, r1
 80084e6:	40c2      	lsrs	r2, r0
 80084e8:	617b      	str	r3, [r7, #20]
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	61bb      	str	r3, [r7, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bf14      	ite	ne
 80084f4:	2102      	movne	r1, #2
 80084f6:	2101      	moveq	r1, #1
 80084f8:	6139      	str	r1, [r7, #16]
 80084fa:	b1c4      	cbz	r4, 800852e <__d2b+0x88>
 80084fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008500:	4404      	add	r4, r0
 8008502:	6034      	str	r4, [r6, #0]
 8008504:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008508:	6028      	str	r0, [r5, #0]
 800850a:	4638      	mov	r0, r7
 800850c:	b003      	add	sp, #12
 800850e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008516:	e7d5      	b.n	80084c4 <__d2b+0x1e>
 8008518:	6179      	str	r1, [r7, #20]
 800851a:	e7e7      	b.n	80084ec <__d2b+0x46>
 800851c:	a801      	add	r0, sp, #4
 800851e:	f7ff fdda 	bl	80080d6 <__lo0bits>
 8008522:	9b01      	ldr	r3, [sp, #4]
 8008524:	617b      	str	r3, [r7, #20]
 8008526:	2101      	movs	r1, #1
 8008528:	6139      	str	r1, [r7, #16]
 800852a:	3020      	adds	r0, #32
 800852c:	e7e5      	b.n	80084fa <__d2b+0x54>
 800852e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008532:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008536:	6030      	str	r0, [r6, #0]
 8008538:	6918      	ldr	r0, [r3, #16]
 800853a:	f7ff fdad 	bl	8008098 <__hi0bits>
 800853e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008542:	e7e1      	b.n	8008508 <__d2b+0x62>

08008544 <_calloc_r>:
 8008544:	b538      	push	{r3, r4, r5, lr}
 8008546:	fb02 f401 	mul.w	r4, r2, r1
 800854a:	4621      	mov	r1, r4
 800854c:	f7fd ff96 	bl	800647c <_malloc_r>
 8008550:	4605      	mov	r5, r0
 8008552:	b118      	cbz	r0, 800855c <_calloc_r+0x18>
 8008554:	4622      	mov	r2, r4
 8008556:	2100      	movs	r1, #0
 8008558:	f7fd ff39 	bl	80063ce <memset>
 800855c:	4628      	mov	r0, r5
 800855e:	bd38      	pop	{r3, r4, r5, pc}

08008560 <_realloc_r>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	4607      	mov	r7, r0
 8008564:	4614      	mov	r4, r2
 8008566:	460e      	mov	r6, r1
 8008568:	b921      	cbnz	r1, 8008574 <_realloc_r+0x14>
 800856a:	4611      	mov	r1, r2
 800856c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008570:	f7fd bf84 	b.w	800647c <_malloc_r>
 8008574:	b922      	cbnz	r2, 8008580 <_realloc_r+0x20>
 8008576:	f7fd ff33 	bl	80063e0 <_free_r>
 800857a:	4625      	mov	r5, r4
 800857c:	4628      	mov	r0, r5
 800857e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008580:	f000 fb05 	bl	8008b8e <_malloc_usable_size_r>
 8008584:	42a0      	cmp	r0, r4
 8008586:	d20f      	bcs.n	80085a8 <_realloc_r+0x48>
 8008588:	4621      	mov	r1, r4
 800858a:	4638      	mov	r0, r7
 800858c:	f7fd ff76 	bl	800647c <_malloc_r>
 8008590:	4605      	mov	r5, r0
 8008592:	2800      	cmp	r0, #0
 8008594:	d0f2      	beq.n	800857c <_realloc_r+0x1c>
 8008596:	4631      	mov	r1, r6
 8008598:	4622      	mov	r2, r4
 800859a:	f7fd ff0d 	bl	80063b8 <memcpy>
 800859e:	4631      	mov	r1, r6
 80085a0:	4638      	mov	r0, r7
 80085a2:	f7fd ff1d 	bl	80063e0 <_free_r>
 80085a6:	e7e9      	b.n	800857c <_realloc_r+0x1c>
 80085a8:	4635      	mov	r5, r6
 80085aa:	e7e7      	b.n	800857c <_realloc_r+0x1c>

080085ac <__ssputs_r>:
 80085ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b0:	688e      	ldr	r6, [r1, #8]
 80085b2:	429e      	cmp	r6, r3
 80085b4:	4682      	mov	sl, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	4690      	mov	r8, r2
 80085ba:	4699      	mov	r9, r3
 80085bc:	d837      	bhi.n	800862e <__ssputs_r+0x82>
 80085be:	898a      	ldrh	r2, [r1, #12]
 80085c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80085c4:	d031      	beq.n	800862a <__ssputs_r+0x7e>
 80085c6:	6825      	ldr	r5, [r4, #0]
 80085c8:	6909      	ldr	r1, [r1, #16]
 80085ca:	1a6f      	subs	r7, r5, r1
 80085cc:	6965      	ldr	r5, [r4, #20]
 80085ce:	2302      	movs	r3, #2
 80085d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80085d8:	f109 0301 	add.w	r3, r9, #1
 80085dc:	443b      	add	r3, r7
 80085de:	429d      	cmp	r5, r3
 80085e0:	bf38      	it	cc
 80085e2:	461d      	movcc	r5, r3
 80085e4:	0553      	lsls	r3, r2, #21
 80085e6:	d530      	bpl.n	800864a <__ssputs_r+0x9e>
 80085e8:	4629      	mov	r1, r5
 80085ea:	f7fd ff47 	bl	800647c <_malloc_r>
 80085ee:	4606      	mov	r6, r0
 80085f0:	b950      	cbnz	r0, 8008608 <__ssputs_r+0x5c>
 80085f2:	230c      	movs	r3, #12
 80085f4:	f8ca 3000 	str.w	r3, [sl]
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008608:	463a      	mov	r2, r7
 800860a:	6921      	ldr	r1, [r4, #16]
 800860c:	f7fd fed4 	bl	80063b8 <memcpy>
 8008610:	89a3      	ldrh	r3, [r4, #12]
 8008612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800861a:	81a3      	strh	r3, [r4, #12]
 800861c:	6126      	str	r6, [r4, #16]
 800861e:	6165      	str	r5, [r4, #20]
 8008620:	443e      	add	r6, r7
 8008622:	1bed      	subs	r5, r5, r7
 8008624:	6026      	str	r6, [r4, #0]
 8008626:	60a5      	str	r5, [r4, #8]
 8008628:	464e      	mov	r6, r9
 800862a:	454e      	cmp	r6, r9
 800862c:	d900      	bls.n	8008630 <__ssputs_r+0x84>
 800862e:	464e      	mov	r6, r9
 8008630:	4632      	mov	r2, r6
 8008632:	4641      	mov	r1, r8
 8008634:	6820      	ldr	r0, [r4, #0]
 8008636:	f000 fa91 	bl	8008b5c <memmove>
 800863a:	68a3      	ldr	r3, [r4, #8]
 800863c:	1b9b      	subs	r3, r3, r6
 800863e:	60a3      	str	r3, [r4, #8]
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	441e      	add	r6, r3
 8008644:	6026      	str	r6, [r4, #0]
 8008646:	2000      	movs	r0, #0
 8008648:	e7dc      	b.n	8008604 <__ssputs_r+0x58>
 800864a:	462a      	mov	r2, r5
 800864c:	f7ff ff88 	bl	8008560 <_realloc_r>
 8008650:	4606      	mov	r6, r0
 8008652:	2800      	cmp	r0, #0
 8008654:	d1e2      	bne.n	800861c <__ssputs_r+0x70>
 8008656:	6921      	ldr	r1, [r4, #16]
 8008658:	4650      	mov	r0, sl
 800865a:	f7fd fec1 	bl	80063e0 <_free_r>
 800865e:	e7c8      	b.n	80085f2 <__ssputs_r+0x46>

08008660 <_svfiprintf_r>:
 8008660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	461d      	mov	r5, r3
 8008666:	898b      	ldrh	r3, [r1, #12]
 8008668:	061f      	lsls	r7, r3, #24
 800866a:	b09d      	sub	sp, #116	; 0x74
 800866c:	4680      	mov	r8, r0
 800866e:	460c      	mov	r4, r1
 8008670:	4616      	mov	r6, r2
 8008672:	d50f      	bpl.n	8008694 <_svfiprintf_r+0x34>
 8008674:	690b      	ldr	r3, [r1, #16]
 8008676:	b96b      	cbnz	r3, 8008694 <_svfiprintf_r+0x34>
 8008678:	2140      	movs	r1, #64	; 0x40
 800867a:	f7fd feff 	bl	800647c <_malloc_r>
 800867e:	6020      	str	r0, [r4, #0]
 8008680:	6120      	str	r0, [r4, #16]
 8008682:	b928      	cbnz	r0, 8008690 <_svfiprintf_r+0x30>
 8008684:	230c      	movs	r3, #12
 8008686:	f8c8 3000 	str.w	r3, [r8]
 800868a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800868e:	e0c8      	b.n	8008822 <_svfiprintf_r+0x1c2>
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	6163      	str	r3, [r4, #20]
 8008694:	2300      	movs	r3, #0
 8008696:	9309      	str	r3, [sp, #36]	; 0x24
 8008698:	2320      	movs	r3, #32
 800869a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800869e:	2330      	movs	r3, #48	; 0x30
 80086a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086a4:	9503      	str	r5, [sp, #12]
 80086a6:	f04f 0b01 	mov.w	fp, #1
 80086aa:	4637      	mov	r7, r6
 80086ac:	463d      	mov	r5, r7
 80086ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086b2:	b10b      	cbz	r3, 80086b8 <_svfiprintf_r+0x58>
 80086b4:	2b25      	cmp	r3, #37	; 0x25
 80086b6:	d13e      	bne.n	8008736 <_svfiprintf_r+0xd6>
 80086b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80086bc:	d00b      	beq.n	80086d6 <_svfiprintf_r+0x76>
 80086be:	4653      	mov	r3, sl
 80086c0:	4632      	mov	r2, r6
 80086c2:	4621      	mov	r1, r4
 80086c4:	4640      	mov	r0, r8
 80086c6:	f7ff ff71 	bl	80085ac <__ssputs_r>
 80086ca:	3001      	adds	r0, #1
 80086cc:	f000 80a4 	beq.w	8008818 <_svfiprintf_r+0x1b8>
 80086d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d2:	4453      	add	r3, sl
 80086d4:	9309      	str	r3, [sp, #36]	; 0x24
 80086d6:	783b      	ldrb	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 809d 	beq.w	8008818 <_svfiprintf_r+0x1b8>
 80086de:	2300      	movs	r3, #0
 80086e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086e8:	9304      	str	r3, [sp, #16]
 80086ea:	9307      	str	r3, [sp, #28]
 80086ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086f0:	931a      	str	r3, [sp, #104]	; 0x68
 80086f2:	462f      	mov	r7, r5
 80086f4:	2205      	movs	r2, #5
 80086f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80086fa:	4850      	ldr	r0, [pc, #320]	; (800883c <_svfiprintf_r+0x1dc>)
 80086fc:	f7f7 fd78 	bl	80001f0 <memchr>
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	b9d0      	cbnz	r0, 800873a <_svfiprintf_r+0xda>
 8008704:	06d9      	lsls	r1, r3, #27
 8008706:	bf44      	itt	mi
 8008708:	2220      	movmi	r2, #32
 800870a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800870e:	071a      	lsls	r2, r3, #28
 8008710:	bf44      	itt	mi
 8008712:	222b      	movmi	r2, #43	; 0x2b
 8008714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008718:	782a      	ldrb	r2, [r5, #0]
 800871a:	2a2a      	cmp	r2, #42	; 0x2a
 800871c:	d015      	beq.n	800874a <_svfiprintf_r+0xea>
 800871e:	9a07      	ldr	r2, [sp, #28]
 8008720:	462f      	mov	r7, r5
 8008722:	2000      	movs	r0, #0
 8008724:	250a      	movs	r5, #10
 8008726:	4639      	mov	r1, r7
 8008728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800872c:	3b30      	subs	r3, #48	; 0x30
 800872e:	2b09      	cmp	r3, #9
 8008730:	d94d      	bls.n	80087ce <_svfiprintf_r+0x16e>
 8008732:	b1b8      	cbz	r0, 8008764 <_svfiprintf_r+0x104>
 8008734:	e00f      	b.n	8008756 <_svfiprintf_r+0xf6>
 8008736:	462f      	mov	r7, r5
 8008738:	e7b8      	b.n	80086ac <_svfiprintf_r+0x4c>
 800873a:	4a40      	ldr	r2, [pc, #256]	; (800883c <_svfiprintf_r+0x1dc>)
 800873c:	1a80      	subs	r0, r0, r2
 800873e:	fa0b f000 	lsl.w	r0, fp, r0
 8008742:	4318      	orrs	r0, r3
 8008744:	9004      	str	r0, [sp, #16]
 8008746:	463d      	mov	r5, r7
 8008748:	e7d3      	b.n	80086f2 <_svfiprintf_r+0x92>
 800874a:	9a03      	ldr	r2, [sp, #12]
 800874c:	1d11      	adds	r1, r2, #4
 800874e:	6812      	ldr	r2, [r2, #0]
 8008750:	9103      	str	r1, [sp, #12]
 8008752:	2a00      	cmp	r2, #0
 8008754:	db01      	blt.n	800875a <_svfiprintf_r+0xfa>
 8008756:	9207      	str	r2, [sp, #28]
 8008758:	e004      	b.n	8008764 <_svfiprintf_r+0x104>
 800875a:	4252      	negs	r2, r2
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	9207      	str	r2, [sp, #28]
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	783b      	ldrb	r3, [r7, #0]
 8008766:	2b2e      	cmp	r3, #46	; 0x2e
 8008768:	d10c      	bne.n	8008784 <_svfiprintf_r+0x124>
 800876a:	787b      	ldrb	r3, [r7, #1]
 800876c:	2b2a      	cmp	r3, #42	; 0x2a
 800876e:	d133      	bne.n	80087d8 <_svfiprintf_r+0x178>
 8008770:	9b03      	ldr	r3, [sp, #12]
 8008772:	1d1a      	adds	r2, r3, #4
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	9203      	str	r2, [sp, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	bfb8      	it	lt
 800877c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008780:	3702      	adds	r7, #2
 8008782:	9305      	str	r3, [sp, #20]
 8008784:	4d2e      	ldr	r5, [pc, #184]	; (8008840 <_svfiprintf_r+0x1e0>)
 8008786:	7839      	ldrb	r1, [r7, #0]
 8008788:	2203      	movs	r2, #3
 800878a:	4628      	mov	r0, r5
 800878c:	f7f7 fd30 	bl	80001f0 <memchr>
 8008790:	b138      	cbz	r0, 80087a2 <_svfiprintf_r+0x142>
 8008792:	2340      	movs	r3, #64	; 0x40
 8008794:	1b40      	subs	r0, r0, r5
 8008796:	fa03 f000 	lsl.w	r0, r3, r0
 800879a:	9b04      	ldr	r3, [sp, #16]
 800879c:	4303      	orrs	r3, r0
 800879e:	3701      	adds	r7, #1
 80087a0:	9304      	str	r3, [sp, #16]
 80087a2:	7839      	ldrb	r1, [r7, #0]
 80087a4:	4827      	ldr	r0, [pc, #156]	; (8008844 <_svfiprintf_r+0x1e4>)
 80087a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087aa:	2206      	movs	r2, #6
 80087ac:	1c7e      	adds	r6, r7, #1
 80087ae:	f7f7 fd1f 	bl	80001f0 <memchr>
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d038      	beq.n	8008828 <_svfiprintf_r+0x1c8>
 80087b6:	4b24      	ldr	r3, [pc, #144]	; (8008848 <_svfiprintf_r+0x1e8>)
 80087b8:	bb13      	cbnz	r3, 8008800 <_svfiprintf_r+0x1a0>
 80087ba:	9b03      	ldr	r3, [sp, #12]
 80087bc:	3307      	adds	r3, #7
 80087be:	f023 0307 	bic.w	r3, r3, #7
 80087c2:	3308      	adds	r3, #8
 80087c4:	9303      	str	r3, [sp, #12]
 80087c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c8:	444b      	add	r3, r9
 80087ca:	9309      	str	r3, [sp, #36]	; 0x24
 80087cc:	e76d      	b.n	80086aa <_svfiprintf_r+0x4a>
 80087ce:	fb05 3202 	mla	r2, r5, r2, r3
 80087d2:	2001      	movs	r0, #1
 80087d4:	460f      	mov	r7, r1
 80087d6:	e7a6      	b.n	8008726 <_svfiprintf_r+0xc6>
 80087d8:	2300      	movs	r3, #0
 80087da:	3701      	adds	r7, #1
 80087dc:	9305      	str	r3, [sp, #20]
 80087de:	4619      	mov	r1, r3
 80087e0:	250a      	movs	r5, #10
 80087e2:	4638      	mov	r0, r7
 80087e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087e8:	3a30      	subs	r2, #48	; 0x30
 80087ea:	2a09      	cmp	r2, #9
 80087ec:	d903      	bls.n	80087f6 <_svfiprintf_r+0x196>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d0c8      	beq.n	8008784 <_svfiprintf_r+0x124>
 80087f2:	9105      	str	r1, [sp, #20]
 80087f4:	e7c6      	b.n	8008784 <_svfiprintf_r+0x124>
 80087f6:	fb05 2101 	mla	r1, r5, r1, r2
 80087fa:	2301      	movs	r3, #1
 80087fc:	4607      	mov	r7, r0
 80087fe:	e7f0      	b.n	80087e2 <_svfiprintf_r+0x182>
 8008800:	ab03      	add	r3, sp, #12
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	4622      	mov	r2, r4
 8008806:	4b11      	ldr	r3, [pc, #68]	; (800884c <_svfiprintf_r+0x1ec>)
 8008808:	a904      	add	r1, sp, #16
 800880a:	4640      	mov	r0, r8
 800880c:	f7fd ff24 	bl	8006658 <_printf_float>
 8008810:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008814:	4681      	mov	r9, r0
 8008816:	d1d6      	bne.n	80087c6 <_svfiprintf_r+0x166>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	065b      	lsls	r3, r3, #25
 800881c:	f53f af35 	bmi.w	800868a <_svfiprintf_r+0x2a>
 8008820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008822:	b01d      	add	sp, #116	; 0x74
 8008824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008828:	ab03      	add	r3, sp, #12
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	4622      	mov	r2, r4
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <_svfiprintf_r+0x1ec>)
 8008830:	a904      	add	r1, sp, #16
 8008832:	4640      	mov	r0, r8
 8008834:	f7fe f9c6 	bl	8006bc4 <_printf_i>
 8008838:	e7ea      	b.n	8008810 <_svfiprintf_r+0x1b0>
 800883a:	bf00      	nop
 800883c:	08037f5c 	.word	0x08037f5c
 8008840:	08037f62 	.word	0x08037f62
 8008844:	08037f66 	.word	0x08037f66
 8008848:	08006659 	.word	0x08006659
 800884c:	080085ad 	.word	0x080085ad

08008850 <__sfputc_r>:
 8008850:	6893      	ldr	r3, [r2, #8]
 8008852:	3b01      	subs	r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	b410      	push	{r4}
 8008858:	6093      	str	r3, [r2, #8]
 800885a:	da08      	bge.n	800886e <__sfputc_r+0x1e>
 800885c:	6994      	ldr	r4, [r2, #24]
 800885e:	42a3      	cmp	r3, r4
 8008860:	db01      	blt.n	8008866 <__sfputc_r+0x16>
 8008862:	290a      	cmp	r1, #10
 8008864:	d103      	bne.n	800886e <__sfputc_r+0x1e>
 8008866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800886a:	f7fe bbe3 	b.w	8007034 <__swbuf_r>
 800886e:	6813      	ldr	r3, [r2, #0]
 8008870:	1c58      	adds	r0, r3, #1
 8008872:	6010      	str	r0, [r2, #0]
 8008874:	7019      	strb	r1, [r3, #0]
 8008876:	4608      	mov	r0, r1
 8008878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800887c:	4770      	bx	lr

0800887e <__sfputs_r>:
 800887e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008880:	4606      	mov	r6, r0
 8008882:	460f      	mov	r7, r1
 8008884:	4614      	mov	r4, r2
 8008886:	18d5      	adds	r5, r2, r3
 8008888:	42ac      	cmp	r4, r5
 800888a:	d101      	bne.n	8008890 <__sfputs_r+0x12>
 800888c:	2000      	movs	r0, #0
 800888e:	e007      	b.n	80088a0 <__sfputs_r+0x22>
 8008890:	463a      	mov	r2, r7
 8008892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008896:	4630      	mov	r0, r6
 8008898:	f7ff ffda 	bl	8008850 <__sfputc_r>
 800889c:	1c43      	adds	r3, r0, #1
 800889e:	d1f3      	bne.n	8008888 <__sfputs_r+0xa>
 80088a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088a4 <_vfiprintf_r>:
 80088a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	460c      	mov	r4, r1
 80088aa:	b09d      	sub	sp, #116	; 0x74
 80088ac:	4617      	mov	r7, r2
 80088ae:	461d      	mov	r5, r3
 80088b0:	4606      	mov	r6, r0
 80088b2:	b118      	cbz	r0, 80088bc <_vfiprintf_r+0x18>
 80088b4:	6983      	ldr	r3, [r0, #24]
 80088b6:	b90b      	cbnz	r3, 80088bc <_vfiprintf_r+0x18>
 80088b8:	f7fd fcc8 	bl	800624c <__sinit>
 80088bc:	4b7c      	ldr	r3, [pc, #496]	; (8008ab0 <_vfiprintf_r+0x20c>)
 80088be:	429c      	cmp	r4, r3
 80088c0:	d158      	bne.n	8008974 <_vfiprintf_r+0xd0>
 80088c2:	6874      	ldr	r4, [r6, #4]
 80088c4:	89a3      	ldrh	r3, [r4, #12]
 80088c6:	0718      	lsls	r0, r3, #28
 80088c8:	d55e      	bpl.n	8008988 <_vfiprintf_r+0xe4>
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d05b      	beq.n	8008988 <_vfiprintf_r+0xe4>
 80088d0:	2300      	movs	r3, #0
 80088d2:	9309      	str	r3, [sp, #36]	; 0x24
 80088d4:	2320      	movs	r3, #32
 80088d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088da:	2330      	movs	r3, #48	; 0x30
 80088dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088e0:	9503      	str	r5, [sp, #12]
 80088e2:	f04f 0b01 	mov.w	fp, #1
 80088e6:	46b8      	mov	r8, r7
 80088e8:	4645      	mov	r5, r8
 80088ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088ee:	b10b      	cbz	r3, 80088f4 <_vfiprintf_r+0x50>
 80088f0:	2b25      	cmp	r3, #37	; 0x25
 80088f2:	d154      	bne.n	800899e <_vfiprintf_r+0xfa>
 80088f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80088f8:	d00b      	beq.n	8008912 <_vfiprintf_r+0x6e>
 80088fa:	4653      	mov	r3, sl
 80088fc:	463a      	mov	r2, r7
 80088fe:	4621      	mov	r1, r4
 8008900:	4630      	mov	r0, r6
 8008902:	f7ff ffbc 	bl	800887e <__sfputs_r>
 8008906:	3001      	adds	r0, #1
 8008908:	f000 80c2 	beq.w	8008a90 <_vfiprintf_r+0x1ec>
 800890c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800890e:	4453      	add	r3, sl
 8008910:	9309      	str	r3, [sp, #36]	; 0x24
 8008912:	f898 3000 	ldrb.w	r3, [r8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	f000 80ba 	beq.w	8008a90 <_vfiprintf_r+0x1ec>
 800891c:	2300      	movs	r3, #0
 800891e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008922:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008926:	9304      	str	r3, [sp, #16]
 8008928:	9307      	str	r3, [sp, #28]
 800892a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800892e:	931a      	str	r3, [sp, #104]	; 0x68
 8008930:	46a8      	mov	r8, r5
 8008932:	2205      	movs	r2, #5
 8008934:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008938:	485e      	ldr	r0, [pc, #376]	; (8008ab4 <_vfiprintf_r+0x210>)
 800893a:	f7f7 fc59 	bl	80001f0 <memchr>
 800893e:	9b04      	ldr	r3, [sp, #16]
 8008940:	bb78      	cbnz	r0, 80089a2 <_vfiprintf_r+0xfe>
 8008942:	06d9      	lsls	r1, r3, #27
 8008944:	bf44      	itt	mi
 8008946:	2220      	movmi	r2, #32
 8008948:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800894c:	071a      	lsls	r2, r3, #28
 800894e:	bf44      	itt	mi
 8008950:	222b      	movmi	r2, #43	; 0x2b
 8008952:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008956:	782a      	ldrb	r2, [r5, #0]
 8008958:	2a2a      	cmp	r2, #42	; 0x2a
 800895a:	d02a      	beq.n	80089b2 <_vfiprintf_r+0x10e>
 800895c:	9a07      	ldr	r2, [sp, #28]
 800895e:	46a8      	mov	r8, r5
 8008960:	2000      	movs	r0, #0
 8008962:	250a      	movs	r5, #10
 8008964:	4641      	mov	r1, r8
 8008966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800896a:	3b30      	subs	r3, #48	; 0x30
 800896c:	2b09      	cmp	r3, #9
 800896e:	d969      	bls.n	8008a44 <_vfiprintf_r+0x1a0>
 8008970:	b360      	cbz	r0, 80089cc <_vfiprintf_r+0x128>
 8008972:	e024      	b.n	80089be <_vfiprintf_r+0x11a>
 8008974:	4b50      	ldr	r3, [pc, #320]	; (8008ab8 <_vfiprintf_r+0x214>)
 8008976:	429c      	cmp	r4, r3
 8008978:	d101      	bne.n	800897e <_vfiprintf_r+0xda>
 800897a:	68b4      	ldr	r4, [r6, #8]
 800897c:	e7a2      	b.n	80088c4 <_vfiprintf_r+0x20>
 800897e:	4b4f      	ldr	r3, [pc, #316]	; (8008abc <_vfiprintf_r+0x218>)
 8008980:	429c      	cmp	r4, r3
 8008982:	bf08      	it	eq
 8008984:	68f4      	ldreq	r4, [r6, #12]
 8008986:	e79d      	b.n	80088c4 <_vfiprintf_r+0x20>
 8008988:	4621      	mov	r1, r4
 800898a:	4630      	mov	r0, r6
 800898c:	f7fe fbb6 	bl	80070fc <__swsetup_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	d09d      	beq.n	80088d0 <_vfiprintf_r+0x2c>
 8008994:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008998:	b01d      	add	sp, #116	; 0x74
 800899a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899e:	46a8      	mov	r8, r5
 80089a0:	e7a2      	b.n	80088e8 <_vfiprintf_r+0x44>
 80089a2:	4a44      	ldr	r2, [pc, #272]	; (8008ab4 <_vfiprintf_r+0x210>)
 80089a4:	1a80      	subs	r0, r0, r2
 80089a6:	fa0b f000 	lsl.w	r0, fp, r0
 80089aa:	4318      	orrs	r0, r3
 80089ac:	9004      	str	r0, [sp, #16]
 80089ae:	4645      	mov	r5, r8
 80089b0:	e7be      	b.n	8008930 <_vfiprintf_r+0x8c>
 80089b2:	9a03      	ldr	r2, [sp, #12]
 80089b4:	1d11      	adds	r1, r2, #4
 80089b6:	6812      	ldr	r2, [r2, #0]
 80089b8:	9103      	str	r1, [sp, #12]
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	db01      	blt.n	80089c2 <_vfiprintf_r+0x11e>
 80089be:	9207      	str	r2, [sp, #28]
 80089c0:	e004      	b.n	80089cc <_vfiprintf_r+0x128>
 80089c2:	4252      	negs	r2, r2
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	9207      	str	r2, [sp, #28]
 80089ca:	9304      	str	r3, [sp, #16]
 80089cc:	f898 3000 	ldrb.w	r3, [r8]
 80089d0:	2b2e      	cmp	r3, #46	; 0x2e
 80089d2:	d10e      	bne.n	80089f2 <_vfiprintf_r+0x14e>
 80089d4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80089d8:	2b2a      	cmp	r3, #42	; 0x2a
 80089da:	d138      	bne.n	8008a4e <_vfiprintf_r+0x1aa>
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	1d1a      	adds	r2, r3, #4
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	9203      	str	r2, [sp, #12]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	bfb8      	it	lt
 80089e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80089ec:	f108 0802 	add.w	r8, r8, #2
 80089f0:	9305      	str	r3, [sp, #20]
 80089f2:	4d33      	ldr	r5, [pc, #204]	; (8008ac0 <_vfiprintf_r+0x21c>)
 80089f4:	f898 1000 	ldrb.w	r1, [r8]
 80089f8:	2203      	movs	r2, #3
 80089fa:	4628      	mov	r0, r5
 80089fc:	f7f7 fbf8 	bl	80001f0 <memchr>
 8008a00:	b140      	cbz	r0, 8008a14 <_vfiprintf_r+0x170>
 8008a02:	2340      	movs	r3, #64	; 0x40
 8008a04:	1b40      	subs	r0, r0, r5
 8008a06:	fa03 f000 	lsl.w	r0, r3, r0
 8008a0a:	9b04      	ldr	r3, [sp, #16]
 8008a0c:	4303      	orrs	r3, r0
 8008a0e:	f108 0801 	add.w	r8, r8, #1
 8008a12:	9304      	str	r3, [sp, #16]
 8008a14:	f898 1000 	ldrb.w	r1, [r8]
 8008a18:	482a      	ldr	r0, [pc, #168]	; (8008ac4 <_vfiprintf_r+0x220>)
 8008a1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008a1e:	2206      	movs	r2, #6
 8008a20:	f108 0701 	add.w	r7, r8, #1
 8008a24:	f7f7 fbe4 	bl	80001f0 <memchr>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d037      	beq.n	8008a9c <_vfiprintf_r+0x1f8>
 8008a2c:	4b26      	ldr	r3, [pc, #152]	; (8008ac8 <_vfiprintf_r+0x224>)
 8008a2e:	bb1b      	cbnz	r3, 8008a78 <_vfiprintf_r+0x1d4>
 8008a30:	9b03      	ldr	r3, [sp, #12]
 8008a32:	3307      	adds	r3, #7
 8008a34:	f023 0307 	bic.w	r3, r3, #7
 8008a38:	3308      	adds	r3, #8
 8008a3a:	9303      	str	r3, [sp, #12]
 8008a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a3e:	444b      	add	r3, r9
 8008a40:	9309      	str	r3, [sp, #36]	; 0x24
 8008a42:	e750      	b.n	80088e6 <_vfiprintf_r+0x42>
 8008a44:	fb05 3202 	mla	r2, r5, r2, r3
 8008a48:	2001      	movs	r0, #1
 8008a4a:	4688      	mov	r8, r1
 8008a4c:	e78a      	b.n	8008964 <_vfiprintf_r+0xc0>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f108 0801 	add.w	r8, r8, #1
 8008a54:	9305      	str	r3, [sp, #20]
 8008a56:	4619      	mov	r1, r3
 8008a58:	250a      	movs	r5, #10
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a60:	3a30      	subs	r2, #48	; 0x30
 8008a62:	2a09      	cmp	r2, #9
 8008a64:	d903      	bls.n	8008a6e <_vfiprintf_r+0x1ca>
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0c3      	beq.n	80089f2 <_vfiprintf_r+0x14e>
 8008a6a:	9105      	str	r1, [sp, #20]
 8008a6c:	e7c1      	b.n	80089f2 <_vfiprintf_r+0x14e>
 8008a6e:	fb05 2101 	mla	r1, r5, r1, r2
 8008a72:	2301      	movs	r3, #1
 8008a74:	4680      	mov	r8, r0
 8008a76:	e7f0      	b.n	8008a5a <_vfiprintf_r+0x1b6>
 8008a78:	ab03      	add	r3, sp, #12
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	4622      	mov	r2, r4
 8008a7e:	4b13      	ldr	r3, [pc, #76]	; (8008acc <_vfiprintf_r+0x228>)
 8008a80:	a904      	add	r1, sp, #16
 8008a82:	4630      	mov	r0, r6
 8008a84:	f7fd fde8 	bl	8006658 <_printf_float>
 8008a88:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008a8c:	4681      	mov	r9, r0
 8008a8e:	d1d5      	bne.n	8008a3c <_vfiprintf_r+0x198>
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	065b      	lsls	r3, r3, #25
 8008a94:	f53f af7e 	bmi.w	8008994 <_vfiprintf_r+0xf0>
 8008a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a9a:	e77d      	b.n	8008998 <_vfiprintf_r+0xf4>
 8008a9c:	ab03      	add	r3, sp, #12
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	4622      	mov	r2, r4
 8008aa2:	4b0a      	ldr	r3, [pc, #40]	; (8008acc <_vfiprintf_r+0x228>)
 8008aa4:	a904      	add	r1, sp, #16
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	f7fe f88c 	bl	8006bc4 <_printf_i>
 8008aac:	e7ec      	b.n	8008a88 <_vfiprintf_r+0x1e4>
 8008aae:	bf00      	nop
 8008ab0:	08037dd4 	.word	0x08037dd4
 8008ab4:	08037f5c 	.word	0x08037f5c
 8008ab8:	08037df4 	.word	0x08037df4
 8008abc:	08037db4 	.word	0x08037db4
 8008ac0:	08037f62 	.word	0x08037f62
 8008ac4:	08037f66 	.word	0x08037f66
 8008ac8:	08006659 	.word	0x08006659
 8008acc:	0800887f 	.word	0x0800887f

08008ad0 <_read_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4c07      	ldr	r4, [pc, #28]	; (8008af0 <_read_r+0x20>)
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	4611      	mov	r1, r2
 8008ada:	2200      	movs	r2, #0
 8008adc:	6022      	str	r2, [r4, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f7f8 fdb2 	bl	8001648 <_read>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_read_r+0x1e>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_read_r+0x1e>
 8008aec:	602b      	str	r3, [r5, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	200013a0 	.word	0x200013a0

08008af4 <_fstat_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4c07      	ldr	r4, [pc, #28]	; (8008b14 <_fstat_r+0x20>)
 8008af8:	2300      	movs	r3, #0
 8008afa:	4605      	mov	r5, r0
 8008afc:	4608      	mov	r0, r1
 8008afe:	4611      	mov	r1, r2
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	f7f8 fdca 	bl	800169a <_fstat>
 8008b06:	1c43      	adds	r3, r0, #1
 8008b08:	d102      	bne.n	8008b10 <_fstat_r+0x1c>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	b103      	cbz	r3, 8008b10 <_fstat_r+0x1c>
 8008b0e:	602b      	str	r3, [r5, #0]
 8008b10:	bd38      	pop	{r3, r4, r5, pc}
 8008b12:	bf00      	nop
 8008b14:	200013a0 	.word	0x200013a0

08008b18 <_isatty_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4c06      	ldr	r4, [pc, #24]	; (8008b34 <_isatty_r+0x1c>)
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	4605      	mov	r5, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	6023      	str	r3, [r4, #0]
 8008b24:	f7f8 fdc9 	bl	80016ba <_isatty>
 8008b28:	1c43      	adds	r3, r0, #1
 8008b2a:	d102      	bne.n	8008b32 <_isatty_r+0x1a>
 8008b2c:	6823      	ldr	r3, [r4, #0]
 8008b2e:	b103      	cbz	r3, 8008b32 <_isatty_r+0x1a>
 8008b30:	602b      	str	r3, [r5, #0]
 8008b32:	bd38      	pop	{r3, r4, r5, pc}
 8008b34:	200013a0 	.word	0x200013a0

08008b38 <__ascii_mbtowc>:
 8008b38:	b082      	sub	sp, #8
 8008b3a:	b901      	cbnz	r1, 8008b3e <__ascii_mbtowc+0x6>
 8008b3c:	a901      	add	r1, sp, #4
 8008b3e:	b142      	cbz	r2, 8008b52 <__ascii_mbtowc+0x1a>
 8008b40:	b14b      	cbz	r3, 8008b56 <__ascii_mbtowc+0x1e>
 8008b42:	7813      	ldrb	r3, [r2, #0]
 8008b44:	600b      	str	r3, [r1, #0]
 8008b46:	7812      	ldrb	r2, [r2, #0]
 8008b48:	1c10      	adds	r0, r2, #0
 8008b4a:	bf18      	it	ne
 8008b4c:	2001      	movne	r0, #1
 8008b4e:	b002      	add	sp, #8
 8008b50:	4770      	bx	lr
 8008b52:	4610      	mov	r0, r2
 8008b54:	e7fb      	b.n	8008b4e <__ascii_mbtowc+0x16>
 8008b56:	f06f 0001 	mvn.w	r0, #1
 8008b5a:	e7f8      	b.n	8008b4e <__ascii_mbtowc+0x16>

08008b5c <memmove>:
 8008b5c:	4288      	cmp	r0, r1
 8008b5e:	b510      	push	{r4, lr}
 8008b60:	eb01 0302 	add.w	r3, r1, r2
 8008b64:	d807      	bhi.n	8008b76 <memmove+0x1a>
 8008b66:	1e42      	subs	r2, r0, #1
 8008b68:	4299      	cmp	r1, r3
 8008b6a:	d00a      	beq.n	8008b82 <memmove+0x26>
 8008b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b70:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008b74:	e7f8      	b.n	8008b68 <memmove+0xc>
 8008b76:	4283      	cmp	r3, r0
 8008b78:	d9f5      	bls.n	8008b66 <memmove+0xa>
 8008b7a:	1881      	adds	r1, r0, r2
 8008b7c:	1ad2      	subs	r2, r2, r3
 8008b7e:	42d3      	cmn	r3, r2
 8008b80:	d100      	bne.n	8008b84 <memmove+0x28>
 8008b82:	bd10      	pop	{r4, pc}
 8008b84:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b88:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008b8c:	e7f7      	b.n	8008b7e <memmove+0x22>

08008b8e <_malloc_usable_size_r>:
 8008b8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b92:	1f18      	subs	r0, r3, #4
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfbc      	itt	lt
 8008b98:	580b      	ldrlt	r3, [r1, r0]
 8008b9a:	18c0      	addlt	r0, r0, r3
 8008b9c:	4770      	bx	lr

08008b9e <__ascii_wctomb>:
 8008b9e:	b149      	cbz	r1, 8008bb4 <__ascii_wctomb+0x16>
 8008ba0:	2aff      	cmp	r2, #255	; 0xff
 8008ba2:	bf85      	ittet	hi
 8008ba4:	238a      	movhi	r3, #138	; 0x8a
 8008ba6:	6003      	strhi	r3, [r0, #0]
 8008ba8:	700a      	strbls	r2, [r1, #0]
 8008baa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008bae:	bf98      	it	ls
 8008bb0:	2001      	movls	r0, #1
 8008bb2:	4770      	bx	lr
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	4770      	bx	lr

08008bb8 <_init>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr

08008bc4 <_fini>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr
